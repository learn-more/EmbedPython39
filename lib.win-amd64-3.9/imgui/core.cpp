/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "PYIMGUI_CUSTOM_EXCEPTION",
                null
            ]
        ],
        "depends": [
            "ansifeed-cpp\\AnsiTextColored.cpp",
            "ansifeed-cpp\\AnsiTextColored.h",
            "imgui-cpp\\imgui.h"
        ],
        "extra_compile_args": [
            "/FIpy_imconfig.h"
        ],
        "include_dirs": [
            "imgui-cpp",
            "ansifeed-cpp",
            ".\\imgui",
            "imgui",
            "config-cpp"
        ],
        "language": "c++",
        "name": "imgui.core",
        "sources": [
            "imgui/core.pyx",
            "imgui-cpp/imgui.cpp",
            "imgui-cpp/imgui_draw.cpp",
            "imgui-cpp/imgui_demo.cpp",
            "imgui-cpp/imgui_widgets.cpp",
            "config-cpp/py_imconfig.cpp"
        ]
    },
    "module_name": "imgui.core"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__imgui__core
#define __PYX_HAVE_API__imgui__core
/* Early includes */
#include "imgui.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <float.h>
#include "../ansifeed-cpp/AnsiTextColored.h"
#include "../ansifeed-cpp/AnsiTextColored.cpp"
#include <stdio.h>
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "imgui\\core.pyx",
  "stringsource",
  "type.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/*--- Type declarations ---*/
struct __pyx_obj_5imgui_4core__Font;
struct __pyx_obj_5imgui_4core__ImGuiContext;
struct __pyx_obj_5imgui_4core__DrawCmd;
struct __pyx_obj_5imgui_4core__DrawList;
struct __pyx_obj_5imgui_4core__Colors;
struct __pyx_obj_5imgui_4core_GuiStyle;
struct __pyx_obj_5imgui_4core__DrawData;
struct __pyx_obj_5imgui_4core__StaticGlyphRanges;
struct __pyx_obj_5imgui_4core__FontAtlas;
struct __pyx_obj_5imgui_4core__IO;
struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font;
struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled;
struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored;
struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled;
struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;
struct __pyx_opt_args_5imgui_4core_calc_text_size;
struct __pyx_opt_args_5imgui_4core_push_style_color;
struct __pyx_opt_args_5imgui_4core_pop_style_var;
struct __pyx_opt_args_5imgui_4core_get_color_u32_idx;
struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos;
struct __pyx_opt_args_5imgui_4core_pop_style_color;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;
struct __pyx_defaults2;
typedef struct __pyx_defaults2 __pyx_defaults2;
struct __pyx_defaults3;
typedef struct __pyx_defaults3 __pyx_defaults3;

/* "imgui/core.pyx":6713
 *     cimgui.PopFont()
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):             # <<<<<<<<<<<<<<
 *     """Calculate text size.
 *     Text can be multi-line.
 */
struct __pyx_opt_args_5imgui_4core_calc_text_size {
  int __pyx_n;
  bool hide_text_after_double_hash;
  float wrap_width;
};

/* "imgui/core.pyx":6801
 * 
 * cpdef push_style_color(
 *     cimgui.ImGuiCol variable,             # <<<<<<<<<<<<<<
 *     float r,
 *     float g,
 */
struct __pyx_opt_args_5imgui_4core_push_style_color {
  int __pyx_n;
  float a;
};

/* "imgui/core.pyx":6844
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */
struct __pyx_opt_args_5imgui_4core_pop_style_var {
  int __pyx_n;
  unsigned int count;
};

/* "imgui/core.pyx":6882
 * # Neither singledispatch nor multipledispatch seems to be available in Cython :-/
 * 
 * cpdef get_color_u32_idx(cimgui.ImGuiCol idx, float alpha_mul = 1.0):             # <<<<<<<<<<<<<<
 *     """ retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */
struct __pyx_opt_args_5imgui_4core_get_color_u32_idx {
  int __pyx_n;
  float alpha_mul;
};

/* "imgui/core.pyx":6986
 *     return cimgui.CalcItemWidth()
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */
struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos {
  int __pyx_n;
  float wrap_pos_x;
};

/* "imgui/core.pyx":7031
 *     cimgui.PopButtonRepeat()
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */
struct __pyx_opt_args_5imgui_4core_pop_style_color {
  int __pyx_n;
  unsigned int count;
};
struct __pyx_defaults {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults1 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults2 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults3 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};

/* "imgui/core.pxd":9
 * 
 * 
 * cdef class _Font(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImFont* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__Font {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__Font *__pyx_vtab;
  ImFont *_ptr;
};


/* "imgui/core.pyx":331
 * 
 * 
 * cdef class _ImGuiContext(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__ImGuiContext {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__ImGuiContext *__pyx_vtab;
  ImGuiContext *_ptr;
};


/* "imgui/core.pyx":347
 * 
 * 
 * cdef class _DrawCmd(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawCmd* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__DrawCmd {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__DrawCmd *__pyx_vtab;
  ImDrawCmd *_ptr;
};


/* "imgui/core.pyx":374
 * 
 * 
 * cdef class _DrawList(object):             # <<<<<<<<<<<<<<
 *     """ Low level drawing API.
 * 
 */
struct __pyx_obj_5imgui_4core__DrawList {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__DrawList *__pyx_vtab;
  ImDrawList *_ptr;
};


/* "imgui/core.pyx":814
 * 
 * 
 * cdef class _Colors(object):             # <<<<<<<<<<<<<<
 *     cdef GuiStyle _style
 * 
 */
struct __pyx_obj_5imgui_4core__Colors {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__Colors *__pyx_vtab;
  struct __pyx_obj_5imgui_4core_GuiStyle *_style;
};


/* "imgui/core.pyx":840
 * 
 * 
 * cdef class GuiStyle(object):             # <<<<<<<<<<<<<<
 *     """
 *     Container for ImGui style information
 */
struct __pyx_obj_5imgui_4core_GuiStyle {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core_GuiStyle *__pyx_vtab;
  ImGuiStyle *_ptr;
  bool _owner;
  struct __pyx_obj_5imgui_4core__Colors *_colors;
};


/* "imgui/core.pyx":1215
 * 
 * 
 * cdef class _DrawData(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawData* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__DrawData {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__DrawData *__pyx_vtab;
  ImDrawData *_ptr;
};


/* "imgui/core.pyx":1273
 * 
 * 
 * cdef class _StaticGlyphRanges(object):             # <<<<<<<<<<<<<<
 *     cdef const cimgui.ImWchar* ranges_ptr
 * 
 */
struct __pyx_obj_5imgui_4core__StaticGlyphRanges {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges *__pyx_vtab;
  ImWchar const *ranges_ptr;
};


/* "imgui/core.pyx":1297
 * 
 * 
 * cdef class _FontAtlas(object):             # <<<<<<<<<<<<<<
 *     """Font atlas object responsible for controling and loading fonts.
 * 
 */
struct __pyx_obj_5imgui_4core__FontAtlas {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__FontAtlas *__pyx_vtab;
  ImFontAtlas *_ptr;
};


/* "imgui/core.pyx":1434
 * 
 * 
 * cdef class _IO(object):             # <<<<<<<<<<<<<<
 *     """Main ImGui I/O context class used for ImGui configuration.
 * 
 */
struct __pyx_obj_5imgui_4core__IO {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__IO *__pyx_vtab;
  ImGuiIO *_ptr;
  PyObject *_fonts;
  PyObject *_get_clipboard_text_fn;
  PyObject *_set_clipboard_text_fn;
};


/* "imgui/core.pyx":7840
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font {
  PyObject_HEAD
  struct __pyx_obj_5imgui_4core__Font *__pyx_v_font;
};


/* "imgui/core.pyx":7872
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled {
  PyObject_HEAD
  PyObject *__pyx_v_count;
  PyObject *__pyx_v_value;
  ImGuiStyleVar __pyx_v_variable;
};


/* "imgui/core.pyx":7881
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored {
  PyObject_HEAD
  float __pyx_v_a;
  float __pyx_v_b;
  PyObject *__pyx_v_count;
  float __pyx_v_g;
  float __pyx_v_r;
  ImGuiCol __pyx_v_variable;
};


/* "imgui/core.pyx":7896
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled {
  PyObject_HEAD
  PyObject *__pyx_v_count;
  PyObject *__pyx_v_iterator;
  PyObject *__pyx_v_val;
  PyObject *__pyx_v_var;
  PyObject *__pyx_v_variables_and_values;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "imgui/core.pyx":7924
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped {
  PyObject_HEAD
  PyObject *__pyx_v_str_id;
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "imgui/core.pyx":1286
 * 
 * 
 * cdef class _Font(object):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):
 */

struct __pyx_vtabstruct_5imgui_4core__Font {
  PyObject *(*from_ptr)(ImFont *);
};
static struct __pyx_vtabstruct_5imgui_4core__Font *__pyx_vtabptr_5imgui_4core__Font;


/* "imgui/core.pyx":331
 * 
 * 
 * cdef class _ImGuiContext(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__ImGuiContext {
  PyObject *(*from_ptr)(ImGuiContext *);
};
static struct __pyx_vtabstruct_5imgui_4core__ImGuiContext *__pyx_vtabptr_5imgui_4core__ImGuiContext;


/* "imgui/core.pyx":347
 * 
 * 
 * cdef class _DrawCmd(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawCmd* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__DrawCmd {
  PyObject *(*from_ptr)(ImDrawCmd *);
};
static struct __pyx_vtabstruct_5imgui_4core__DrawCmd *__pyx_vtabptr_5imgui_4core__DrawCmd;


/* "imgui/core.pyx":374
 * 
 * 
 * cdef class _DrawList(object):             # <<<<<<<<<<<<<<
 *     """ Low level drawing API.
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__DrawList {
  PyObject *(*from_ptr)(ImDrawList *);
};
static struct __pyx_vtabstruct_5imgui_4core__DrawList *__pyx_vtabptr_5imgui_4core__DrawList;


/* "imgui/core.pyx":814
 * 
 * 
 * cdef class _Colors(object):             # <<<<<<<<<<<<<<
 *     cdef GuiStyle _style
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__Colors {
  PyObject *(*_check_color)(struct __pyx_obj_5imgui_4core__Colors *, ImGuiCol);
};
static struct __pyx_vtabstruct_5imgui_4core__Colors *__pyx_vtabptr_5imgui_4core__Colors;
static CYTHON_INLINE PyObject *__pyx_f_5imgui_4core_7_Colors__check_color(struct __pyx_obj_5imgui_4core__Colors *, ImGuiCol);


/* "imgui/core.pyx":840
 * 
 * 
 * cdef class GuiStyle(object):             # <<<<<<<<<<<<<<
 *     """
 *     Container for ImGui style information
 */

struct __pyx_vtabstruct_5imgui_4core_GuiStyle {
  PyObject *(*_check_ptr)(struct __pyx_obj_5imgui_4core_GuiStyle *);
  struct __pyx_obj_5imgui_4core_GuiStyle *(*from_ref)(ImGuiStyle &);
  struct __pyx_obj_5imgui_4core_GuiStyle *(*_create)(void);
};
static struct __pyx_vtabstruct_5imgui_4core_GuiStyle *__pyx_vtabptr_5imgui_4core_GuiStyle;
static CYTHON_INLINE PyObject *__pyx_f_5imgui_4core_8GuiStyle__check_ptr(struct __pyx_obj_5imgui_4core_GuiStyle *);


/* "imgui/core.pyx":1215
 * 
 * 
 * cdef class _DrawData(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawData* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__DrawData {
  PyObject *(*from_ptr)(ImDrawData *);
};
static struct __pyx_vtabstruct_5imgui_4core__DrawData *__pyx_vtabptr_5imgui_4core__DrawData;


/* "imgui/core.pyx":1273
 * 
 * 
 * cdef class _StaticGlyphRanges(object):             # <<<<<<<<<<<<<<
 *     cdef const cimgui.ImWchar* ranges_ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges {
  PyObject *(*from_ptr)(ImWchar const *);
};
static struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges *__pyx_vtabptr_5imgui_4core__StaticGlyphRanges;


/* "imgui/core.pyx":1297
 * 
 * 
 * cdef class _FontAtlas(object):             # <<<<<<<<<<<<<<
 *     """Font atlas object responsible for controling and loading fonts.
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__FontAtlas {
  PyObject *(*from_ptr)(ImFontAtlas *);
};
static struct __pyx_vtabstruct_5imgui_4core__FontAtlas *__pyx_vtabptr_5imgui_4core__FontAtlas;


/* "imgui/core.pyx":1434
 * 
 * 
 * cdef class _IO(object):             # <<<<<<<<<<<<<<
 *     """Main ImGui I/O context class used for ImGui configuration.
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__IO {
  char const *(*_get_clipboard_text)(void *);
  void (*_set_clipboard_text)(void *, char const *);
};
static struct __pyx_vtabstruct_5imgui_4core__IO *__pyx_vtabptr_5imgui_4core__IO;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* FusedFunction.proto */
typedef struct {
    __pyx_CyFunctionObject func;
    PyObject *__signatures__;
    PyObject *type;
    PyObject *self;
} __pyx_FusedFunctionObject;
static PyObject *__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                                         PyObject *qualname, PyObject *closure,
                                         PyObject *module, PyObject *globals,
                                         PyObject *code);
static int __pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self);
static PyTypeObject *__pyx_FusedFunctionType = NULL;
static int __pyx_FusedFunction_init(void);
#define __Pyx_FusedFunction_USED

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags(ImGuiWindowFlags value);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_float__const__(PyObject *, int writable_flag);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol(ImGuiCol value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags(ImGuiConfigFlags value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags(ImGuiBackendFlags value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiID(ImGuiID value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir(ImGuiDir value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor(ImGuiMouseCursor value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar(ImGuiStyleVar value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImU32(ImU32 value);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE ImU32 __Pyx_PyInt_As_ImU32(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiWindowFlags __Pyx_PyInt_As_ImGuiWindowFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiCol __Pyx_PyInt_As_ImGuiCol(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiConfigFlags __Pyx_PyInt_As_ImGuiConfigFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiBackendFlags __Pyx_PyInt_As_ImGuiBackendFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImWchar __Pyx_PyInt_As_ImWchar(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiID __Pyx_PyInt_As_ImGuiID(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiCond __Pyx_PyInt_As_ImGuiCond(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiTreeNodeFlags __Pyx_PyInt_As_ImGuiTreeNodeFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiDir __Pyx_PyInt_As_ImGuiDir(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiInputTextFlags __Pyx_PyInt_As_ImGuiInputTextFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiHoveredFlags __Pyx_PyInt_As_ImGuiHoveredFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiMouseCursor __Pyx_PyInt_As_ImGuiMouseCursor(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiStyleVar __Pyx_PyInt_As_ImGuiStyleVar(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiDragDropFlags __Pyx_PyInt_As_ImGuiDragDropFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiColorEditFlags __Pyx_PyInt_As_ImGuiColorEditFlags(PyObject *);

/* ImportNumPyArray.proto */
static PyObject *__pyx_numpy_ndarray = NULL;
static PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5imgui_4core_13_ImGuiContext_from_ptr(ImGuiContext *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_8_DrawCmd_from_ptr(ImDrawCmd *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_9_DrawList_from_ptr(ImDrawList *__pyx_v_ptr); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5imgui_4core_7_Colors__check_color(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5imgui_4core_8GuiStyle__check_ptr(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto*/
static struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_f_5imgui_4core_8GuiStyle_from_ref(ImGuiStyle &__pyx_v_ref); /* proto*/
static struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_f_5imgui_4core_8GuiStyle__create(void); /* proto*/
static PyObject *__pyx_f_5imgui_4core_9_DrawData_from_ptr(ImDrawData *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(ImWchar const *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_5_Font_from_ptr(ImFont *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_10_FontAtlas_from_ptr(ImFontAtlas *__pyx_v_ptr); /* proto*/
static char const *__pyx_f_5imgui_4core_3_IO__get_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data); /* proto*/
static void __pyx_f_5imgui_4core_3_IO__set_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data, char const *__pyx_v_text); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'imgui.enums' */

/* Module declarations from 'imgui.cimgui' */

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.float' */

/* Module declarations from 'imgui.ansifeed' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'imgui.core' */
static PyTypeObject *__pyx_ptype_5imgui_4core__Font = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__ImGuiContext = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__DrawCmd = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__DrawList = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__Colors = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core_GuiStyle = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__DrawData = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__StaticGlyphRanges = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__FontAtlas = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__IO = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct___py_font = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct_1__py_styled = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct_2__py_colored = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct_3__py_istyled = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct_4__py_scoped = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static unsigned short *__pyx_v_5imgui_4core__LATIN_ALL;
__PYX_EXTERN_C DL_EXPORT(PyObject) *ImGuiError;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static PyObject *__pyx_f_5imgui_4core__bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_5imgui_4core__from_bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_5imgui_4core__cast_ImVec2_tuple(ImVec2); /*proto*/
static ImVec2 __pyx_f_5imgui_4core__cast_tuple_ImVec2(PyObject *); /*proto*/
static ImVec2 __pyx_f_5imgui_4core__cast_args_ImVec2(float, float); /*proto*/
static ImVec4 __pyx_f_5imgui_4core__cast_tuple_ImVec4(PyObject *); /*proto*/
static ImVec4 __pyx_f_5imgui_4core__cast_args_ImVec4(float, float, float, float); /*proto*/
static PyObject *__pyx_f_5imgui_4core__cast_ImVec4_tuple(ImVec4); /*proto*/
static PyObject *__pyx_f_5imgui_4core_calc_text_size(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_calc_text_size *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_var(ImGuiStyleVar, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_color(ImGuiCol, float, float, float, int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_style_color *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_var(int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_var *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_font_size(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_style_color_vec_4(ImGuiCol, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_font_tex_uv_white_pixel(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_color_u32_idx(ImGuiCol, int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_get_color_u32_idx *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_color_u32_rgba(float, float, float, float, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_color_u32(ImU32, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_item_width(float, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_item_width(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_calculate_item_width(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_text_wrap_pos(int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_text_wrap_pos(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_allow_keyboard_focus(bool, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_allow_keyboard_focus(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_button_repeat(bool, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_button_repeat(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_color(int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_color *__pyx_optional_args); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_float__const__ = { "const float", NULL, sizeof(float const ), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "imgui.core"
extern int __pyx_module_is_main_imgui__core;
int __pyx_module_is_main_imgui__core = 0;

/* Implementation of 'imgui.core' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "%d";
static const char __pyx_k_f[] = "%.f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_3f[] = "%.3f";
static const char __pyx_k_6f[] = "%.6f";
static const char __pyx_k_IO[] = "_IO";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_io[] = "_io";
static const char __pyx_k__32[] = "";
static const char __pyx_k__33[] = "()";
static const char __pyx_k__34[] = "|";
static const char __pyx_k__50[] = "\000";
static const char __pyx_k_col[] = "col";
static const char __pyx_k_ctx[] = "ctx";
static const char __pyx_k_dst[] = "dst";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_ptr[] = "_ptr";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_uv0[] = "uv0";
static const char __pyx_k_uv1[] = "uv1";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_var[] = "var";
static const char __pyx_k_Font[] = "_Font";
static const char __pyx_k_ONCE[] = "ONCE";
static const char __pyx_k_Vec2[] = "Vec2";
static const char __pyx_k_Vec4[] = "Vec4";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_clip[] = "clip";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_font[] = "font";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_uv_a[] = "uv_a";
static const char __pyx_k_uv_b[] = "uv_b";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_KEY_A[] = "KEY_A";
static const char __pyx_k_KEY_C[] = "KEY_C";
static const char __pyx_k_KEY_V[] = "KEY_V";
static const char __pyx_k_KEY_X[] = "KEY_X";
static const char __pyx_k_KEY_Y[] = "KEY_Y";
static const char __pyx_k_KEY_Z[] = "KEY_Z";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_begin[] = "begin";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_combo[] = "combo";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dummy[] = "dummy";
static const char __pyx_k_end_x[] = "end_x";
static const char __pyx_k_end_y[] = "end_y";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pos_x[] = "pos_x";
static const char __pyx_k_pos_y[] = "pos_y";
static const char __pyx_k_power[] = "power";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_style[] = "style";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_ALWAYS[] = "ALWAYS";
static const char __pyx_k_Colors[] = "_Colors";
static const char __pyx_k_active[] = "active";
static const char __pyx_k_border[] = "border";
static const char __pyx_k_bullet[] = "bullet";
static const char __pyx_k_button[] = "button";
static const char __pyx_k_closed[] = "closed";
static const char __pyx_k_create[] = "create";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_get_io[] = "get_io";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_indent[] = "indent";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_opened[] = "opened";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_pop_id[] = "pop_id";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_render[] = "render";
static const char __pyx_k_repeat[] = "repeat";
static const char __pyx_k_str_id[] = "str_id";
static const char __pyx_k_stride[] = "stride";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_value0[] = "value0";
static const char __pyx_k_value1[] = "value1";
static const char __pyx_k_value2[] = "value2";
static const char __pyx_k_value3[] = "value3";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_DrawCmd[] = "_DrawCmd";
static const char __pyx_k_ImGuiID[] = "ImGuiID";
static const char __pyx_k_KEY_END[] = "KEY_END";
static const char __pyx_k_KEY_TAB[] = "KEY_TAB";
static const char __pyx_k_changed[] = "changed";
static const char __pyx_k_clicked[] = "clicked";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_current[] = "current";
static const char __pyx_k_desc_id[] = "desc_id";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_listbox[] = "listbox";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_overlay[] = "overlay";
static const char __pyx_k_payload[] = "payload";
static const char __pyx_k_pivot_x[] = "pivot_x";
static const char __pyx_k_pivot_y[] = "pivot_y";
static const char __pyx_k_push_id[] = "push_id";
static const char __pyx_k_py_font[] = "_py_font";
static const char __pyx_k_r_max_x[] = "r_max_x";
static const char __pyx_k_r_max_y[] = "r_max_y";
static const char __pyx_k_r_min_x[] = "r_min_x";
static const char __pyx_k_r_min_y[] = "r_min_y";
static const char __pyx_k_spacing[] = "spacing";
static const char __pyx_k_start_x[] = "start_x";
static const char __pyx_k_start_y[] = "start_y";
static const char __pyx_k_visible[] = "visible";
static const char __pyx_k_DrawData[] = "_DrawData";
static const char __pyx_k_DrawList[] = "_DrawList";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_GuiStyle[] = "GuiStyle";
static const char __pyx_k_KEY_HOME[] = "KEY_HOME";
static const char __pyx_k_c_string[] = "c_string";
static const char __pyx_k_centre_x[] = "centre_x";
static const char __pyx_k_centre_y[] = "centre_y";
static const char __pyx_k_checkbox[] = "checkbox";
static const char __pyx_k_closable[] = "closable";
static const char __pyx_k_defaults[] = "defaults";
static const char __pyx_k_drag_int[] = "drag_int";
static const char __pyx_k_end_menu[] = "end_menu";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_fraction[] = "fraction";
static const char __pyx_k_get_time[] = "get_time";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_in_items[] = "in_items";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_iterator[] = "iterator";
static const char __pyx_k_new_line[] = "new_line";
static const char __pyx_k_offset_x[] = "offset_x";
static const char __pyx_k_pop_font[] = "pop_font";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_rounding[] = "rounding";
static const char __pyx_k_scroll_x[] = "scroll_x";
static const char __pyx_k_scroll_y[] = "scroll_y";
static const char __pyx_k_selected[] = "selected";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_shortcut[] = "shortcut";
static const char __pyx_k_tree_pop[] = "tree_pop";
static const char __pyx_k_unindent[] = "unindent";
static const char __pyx_k_variable[] = "variable";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_APPEARING[] = "APPEARING";
static const char __pyx_k_FontAtlas[] = "_FontAtlas";
static const char __pyx_k_KEY_ENTER[] = "KEY_ENTER";
static const char __pyx_k_KEY_SPACE[] = "KEY_SPACE";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_alpha_mul[] = "alpha_mul";
static const char __pyx_k_collapsed[] = "collapsed";
static const char __pyx_k_condition[] = "condition";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_drag_int2[] = "drag_int2";
static const char __pyx_k_drag_int3[] = "drag_int3";
static const char __pyx_k_drag_int4[] = "drag_int4";
static const char __pyx_k_end_child[] = "end_child";
static const char __pyx_k_end_frame[] = "end_frame";
static const char __pyx_k_end_group[] = "end_group";
static const char __pyx_k_end_popup[] = "end_popup";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_fillvalue[] = "fillvalue";
static const char __pyx_k_get_style[] = "get_style";
static const char __pyx_k_gui_style[] = "gui_style";
static const char __pyx_k_input_int[] = "input_int";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_local_pos[] = "local_pos";
static const char __pyx_k_max_value[] = "max_value";
static const char __pyx_k_menu_item[] = "menu_item";
static const char __pyx_k_min_value[] = "min_value";
static const char __pyx_k_new_frame[] = "new_frame";
static const char __pyx_k_push_font[] = "push_font";
static const char __pyx_k_py_scoped[] = "_py_scoped";
static const char __pyx_k_py_string[] = "py_string";
static const char __pyx_k_py_styled[] = "_py_styled";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_same_line[] = "same_line";
static const char __pyx_k_scale_max[] = "scale_max";
static const char __pyx_k_scale_min[] = "scale_min";
static const char __pyx_k_separator[] = "separator";
static const char __pyx_k_step_fast[] = "step_fast";
static const char __pyx_k_thickness[] = "thickness";
static const char __pyx_k_tree_node[] = "tree_node";
static const char __pyx_k_COLOR_TEXT[] = "COLOR_TEXT";
static const char __pyx_k_ImGuiError[] = "ImGuiError";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_KEY_DELETE[] = "KEY_DELETE";
static const char __pyx_k_KEY_ESCAPE[] = "KEY_ESCAPE";
static const char __pyx_k_KEY_INSERT[] = "KEY_INSERT";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_begin_menu[] = "begin_menu";
static const char __pyx_k_contextlib[] = "contextlib";
static const char __pyx_k_drag_float[] = "drag_float";
static const char __pyx_k_graph_size[] = "graph_size";
static const char __pyx_k_identifier[] = "identifier";
static const char __pyx_k_imgui_core[] = "imgui.core";
static const char __pyx_k_inout_text[] = "inout_text";
static const char __pyx_k_input_int2[] = "input_int2";
static const char __pyx_k_input_int3[] = "input_int3";
static const char __pyx_k_input_int4[] = "input_int4";
static const char __pyx_k_input_text[] = "input_text";
static const char __pyx_k_label_text[] = "label_text";
static const char __pyx_k_namedtuple[] = "namedtuple";
static const char __pyx_k_open_popup[] = "open_popup";
static const char __pyx_k_plot_lines[] = "plot_lines";
static const char __pyx_k_py_colored[] = "_py_colored";
static const char __pyx_k_py_istyled[] = "_py_istyled";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_screen_pos[] = "screen_pos";
static const char __pyx_k_selectable[] = "selectable";
static const char __pyx_k_show_alpha[] = "show_alpha";
static const char __pyx_k_signatures[] = "signatures";
static const char __pyx_k_size_width[] = "size_width";
static const char __pyx_k_slider_int[] = "slider_int";
static const char __pyx_k_texture_id[] = "texture_id";
static const char __pyx_k_tint_color[] = "tint_color";
static const char __pyx_k_wrap_pos_x[] = "wrap_pos_x";
static const char __pyx_k_wrap_width[] = "wrap_width";
static const char __pyx_k_COLOR_COUNT[] = "COLOR_COUNT";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_KEY_PAGE_UP[] = "KEY_PAGE_UP";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_STYLE_ALPHA[] = "STYLE_ALPHA";
static const char __pyx_k_begin_child[] = "begin_child";
static const char __pyx_k_begin_group[] = "begin_group";
static const char __pyx_k_begin_popup[] = "begin_popup";
static const char __pyx_k_bullet_text[] = "bullet_text";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_color_edit3[] = "color_edit3";
static const char __pyx_k_color_edit4[] = "color_edit4";
static const char __pyx_k_drag_float2[] = "drag_float2";
static const char __pyx_k_drag_float3[] = "drag_float3";
static const char __pyx_k_drag_float4[] = "drag_float4";
static const char __pyx_k_end_tooltip[] = "end_tooltip";
static const char __pyx_k_flags_value[] = "flags_value";
static const char __pyx_k_get_version[] = "get_version";
static const char __pyx_k_inout_color[] = "inout_color";
static const char __pyx_k_inout_flags[] = "inout_flags";
static const char __pyx_k_inout_state[] = "inout_state";
static const char __pyx_k_inout_value[] = "inout_value";
static const char __pyx_k_input_float[] = "input_float";
static const char __pyx_k_next_column[] = "next_column";
static const char __pyx_k_set_tooltip[] = "set_tooltip";
static const char __pyx_k_size_height[] = "size_height";
static const char __pyx_k_size_pixels[] = "size_pixels";
static const char __pyx_k_slider_int2[] = "slider_int2";
static const char __pyx_k_slider_int3[] = "slider_int3";
static const char __pyx_k_slider_int4[] = "slider_int4";
static const char __pyx_k_zip_longest[] = "zip_longest";
static const char __pyx_k_COLOR_BORDER[] = "COLOR_BORDER";
static const char __pyx_k_COLOR_BUTTON[] = "COLOR_BUTTON";
static const char __pyx_k_COLOR_HEADER[] = "COLOR_HEADER";
static const char __pyx_k_DIRECTION_UP[] = "DIRECTION_UP";
static const char __pyx_k_HOVERED_NONE[] = "HOVERED_NONE";
static const char __pyx_k_ImGuiContext[] = "_ImGuiContext";
static const char __pyx_k_KEY_UP_ARROW[] = "KEY_UP_ARROW";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_arrow_button[] = "arrow_button";
static const char __pyx_k_border_color[] = "border_color";
static const char __pyx_k_change_speed[] = "change_speed";
static const char __pyx_k_color_button[] = "color_button";
static const char __pyx_k_column_index[] = "column_index";
static const char __pyx_k_end_menu_bar[] = "end_menu_bar";
static const char __pyx_k_get_scroll_x[] = "get_scroll_x";
static const char __pyx_k_get_scroll_y[] = "get_scroll_y";
static const char __pyx_k_glyph_ranges[] = "glyph_ranges";
static const char __pyx_k_image_button[] = "image_button";
static const char __pyx_k_inout_opened[] = "inout_opened";
static const char __pyx_k_inout_values[] = "inout_values";
static const char __pyx_k_input_double[] = "input_double";
static const char __pyx_k_input_float2[] = "input_float2";
static const char __pyx_k_input_float3[] = "input_float3";
static const char __pyx_k_input_float4[] = "input_float4";
static const char __pyx_k_izip_longest[] = "izip_longest";
static const char __pyx_k_mouse_button[] = "mouse_button";
static const char __pyx_k_num_segments[] = "num_segments";
static const char __pyx_k_overlay_text[] = "overlay_text";
static const char __pyx_k_progress_bar[] = "progress_bar";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_radio_button[] = "radio_button";
static const char __pyx_k_set_scroll_x[] = "set_scroll_x";
static const char __pyx_k_set_scroll_y[] = "set_scroll_y";
static const char __pyx_k_slider_angle[] = "slider_angle";
static const char __pyx_k_slider_float[] = "slider_float";
static const char __pyx_k_small_button[] = "small_button";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_text_colored[] = "text_colored";
static const char __pyx_k_text_wrapped[] = "text_wrapped";
static const char __pyx_k_upper_left_x[] = "upper_left_x";
static const char __pyx_k_upper_left_y[] = "upper_left_y";
static const char __pyx_k_v_slider_int[] = "v_slider_int";
static const char __pyx_k_values_count[] = "values_count";
static const char __pyx_k_CONFIG_IS_RGB[] = "CONFIG_IS_RGB";
static const char __pyx_k_KEY_BACKSPACE[] = "KEY_BACKSPACE";
static const char __pyx_k_KEY_PAGE_DOWN[] = "KEY_PAGE_DOWN";
static const char __pyx_k_WINDOW_NO_NAV[] = "WINDOW_NO_NAV";
static const char __pyx_k_begin_tooltip[] = "begin_tooltip";
static const char __pyx_k_buffer_length[] = "buffer_length";
static const char __pyx_k_frame_padding[] = "frame_padding";
static const char __pyx_k_get_draw_data[] = "get_draw_data";
static const char __pyx_k_get_mouse_pos[] = "get_mouse_pos";
static const char __pyx_k_inout_current[] = "inout_current";
static const char __pyx_k_inout_visible[] = "inout_visible";
static const char __pyx_k_is_mouse_down[] = "is_mouse_down";
static const char __pyx_k_lower_right_x[] = "lower_right_x";
static const char __pyx_k_lower_right_y[] = "lower_right_y";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_slider_float2[] = "slider_float2";
static const char __pyx_k_slider_float3[] = "slider_float3";
static const char __pyx_k_slider_float4[] = "slider_float4";
static const char __pyx_k_text_disabled[] = "text_disabled";
static const char __pyx_k_values_offset[] = "values_offset";
static const char __pyx_k_DIRECTION_DOWN[] = "DIRECTION_DOWN";
static const char __pyx_k_DIRECTION_LEFT[] = "DIRECTION_LEFT";
static const char __pyx_k_DIRECTION_NONE[] = "DIRECTION_NONE";
static const char __pyx_k_FIRST_USE_EVER[] = "FIRST_USE_EVER";
static const char __pyx_k_KEY_DOWN_ARROW[] = "KEY_DOWN_ARROW";
static const char __pyx_k_KEY_LEFT_ARROW[] = "KEY_LEFT_ARROW";
static const char __pyx_k_TREE_NODE_LEAF[] = "TREE_NODE_LEAF";
static const char __pyx_k_WINDOW_NO_MOVE[] = "WINDOW_NO_MOVE";
static const char __pyx_k_begin_menu_bar[] = "begin_menu_bar";
static const char __pyx_k_center_y_ratio[] = "center_y_ratio";
static const char __pyx_k_checkbox_flags[] = "checkbox_flags";
static const char __pyx_k_contextmanager[] = "contextmanager";
static const char __pyx_k_create_context[] = "create_context";
static const char __pyx_k_get_cursor_pos[] = "get_cursor_pos";
static const char __pyx_k_imgui_core_pyx[] = "imgui\\core.pyx";
static const char __pyx_k_inout_selected[] = "inout_selected";
static const char __pyx_k_is_item_active[] = "is_item_active";
static const char __pyx_k_listbox_footer[] = "listbox_footer";
static const char __pyx_k_listbox_header[] = "listbox_header";
static const char __pyx_k_lock_threshold[] = "lock_threshold";
static const char __pyx_k_overlay_text_b[] = "overlay_text_b";
static const char __pyx_k_plot_histogram[] = "plot_histogram";
static const char __pyx_k_set_cursor_pos[] = "set_cursor_pos";
static const char __pyx_k_v_slider_float[] = "v_slider_float";
static const char __pyx_k_COLOR_SEPARATOR[] = "COLOR_SEPARATOR";
static const char __pyx_k_CONFIG_NO_MOUSE[] = "CONFIG_NO_MOUSE";
static const char __pyx_k_DIRECTION_RIGHT[] = "DIRECTION_RIGHT";
static const char __pyx_k_KEY_RIGHT_ARROW[] = "KEY_RIGHT_ARROW";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_WINDOW_MENU_BAR[] = "WINDOW_MENU_BAR";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_also_over_items[] = "also_over_items";
static const char __pyx_k_destroy_context[] = "destroy_context";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_get_window_size[] = "get_window_size";
static const char __pyx_k_height_in_items[] = "height_in_items";
static const char __pyx_k_is_item_clicked[] = "is_item_clicked";
static const char __pyx_k_is_item_focused[] = "is_item_focused";
static const char __pyx_k_is_item_hovered[] = "is_item_hovered";
static const char __pyx_k_is_item_visible[] = "is_item_visible";
static const char __pyx_k_is_rect_visible[] = "is_rect_visible";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_require_pointer[] = "_require_pointer";
static const char __pyx_k_set_scroll_here[] = "set_scroll_here";
static const char __pyx_k_set_window_size[] = "set_window_size";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_show_user_guide[] = "show_user_guide";
static const char __pyx_k_COLOR_CHECK_MARK[] = "COLOR_CHECK_MARK";
static const char __pyx_k_COLOR_PLOT_LINES[] = "COLOR_PLOT_LINES";
static const char __pyx_k_COMBO_NO_PREVIEW[] = "COMBO_NO_PREVIEW";
static const char __pyx_k_FOCUS_ANY_WINDOW[] = "FOCUS_ANY_WINDOW";
static const char __pyx_k_TREE_NODE_BULLET[] = "TREE_NODE_BULLET";
static const char __pyx_k_TREE_NODE_FRAMED[] = "TREE_NODE_FRAMED";
static const char __pyx_k_WINDOW_NO_INPUTS[] = "WINDOW_NO_INPUTS";
static const char __pyx_k_WINDOW_NO_RESIZE[] = "WINDOW_NO_RESIZE";
static const char __pyx_k_get_column_index[] = "get_column_index";
static const char __pyx_k_get_column_width[] = "get_column_width";
static const char __pyx_k_get_cursor_pos_x[] = "get_cursor_pos_x";
static const char __pyx_k_get_cursor_pos_y[] = "get_cursor_pos_y";
static const char __pyx_k_get_frame_height[] = "get_frame_height";
static const char __pyx_k_get_mouse_cursor[] = "get_mouse_cursor";
static const char __pyx_k_get_scroll_max_x[] = "get_scroll_max_x";
static const char __pyx_k_get_scroll_max_y[] = "get_scroll_max_y";
static const char __pyx_k_get_window_width[] = "get_window_width";
static const char __pyx_k_invisible_button[] = "invisible_button";
static const char __pyx_k_is_mouse_clicked[] = "is_mouse_clicked";
static const char __pyx_k_overlay_text_ptr[] = "overlay_text_ptr";
static const char __pyx_k_set_column_width[] = "set_column_width";
static const char __pyx_k_set_cursor_pos_x[] = "set_cursor_pos_x";
static const char __pyx_k_set_cursor_pos_y[] = "set_cursor_pos_y";
static const char __pyx_k_set_mouse_cursor[] = "set_mouse_cursor";
static const char __pyx_k_set_window_focus[] = "set_window_focus";
static const char __pyx_k_show_demo_window[] = "show_demo_window";
static const char __pyx_k_show_test_window[] = "show_test_window";
static const char __pyx_k_text_unformatted[] = "text_unformatted";
static const char __pyx_k_COLOR_RESIZE_GRIP[] = "COLOR_RESIZE_GRIP";
static const char __pyx_k_COLOR_SLIDER_GRAB[] = "COLOR_SLIDER_GRAB";
static const char __pyx_k_COMBO_HEIGHT_MASK[] = "COMBO_HEIGHT_MASK";
static const char __pyx_k_FOCUS_ROOT_WINDOW[] = "FOCUS_ROOT_WINDOW";
static const char __pyx_k_HOVERED_RECT_ONLY[] = "HOVERED_RECT_ONLY";
static const char __pyx_k_MOUSE_CURSOR_HAND[] = "MOUSE_CURSOR_HAND";
static const char __pyx_k_MOUSE_CURSOR_NONE[] = "MOUSE_CURSOR_NONE";
static const char __pyx_k_StaticGlyphRanges[] = "_StaticGlyphRanges";
static const char __pyx_k_begin_popup_modal[] = "begin_popup_modal";
static const char __pyx_k_collapsing_header[] = "collapsing_header";
static const char __pyx_k_end_main_menu_bar[] = "end_main_menu_bar";
static const char __pyx_k_get_column_offset[] = "get_column_offset";
static const char __pyx_k_get_columns_count[] = "get_columns_count";
static const char __pyx_k_get_item_rect_max[] = "get_item_rect_max";
static const char __pyx_k_get_item_rect_min[] = "get_item_rect_min";
static const char __pyx_k_get_window_height[] = "get_window_height";
static const char __pyx_k_is_mouse_dragging[] = "is_mouse_dragging";
static const char __pyx_k_is_mouse_released[] = "is_mouse_released";
static const char __pyx_k_is_window_focused[] = "is_window_focused";
static const char __pyx_k_is_window_hovered[] = "is_window_hovered";
static const char __pyx_k_mouse_cursor_type[] = "mouse_cursor_type";
static const char __pyx_k_pop_text_wrap_pos[] = "pop_text_wrap_pos";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_set_column_offset[] = "set_column_offset";
static const char __pyx_k_shared_font_atlas[] = "shared_font_atlas";
static const char __pyx_k_show_style_editor[] = "show_style_editor";
static const char __pyx_k_style_colors_dark[] = "style_colors_dark";
static const char __pyx_k_COMBO_HEIGHT_LARGE[] = "COMBO_HEIGHT_LARGE";
static const char __pyx_k_COMBO_HEIGHT_SMALL[] = "COMBO_HEIGHT_SMALL";
static const char __pyx_k_HOVERED_ANY_WINDOW[] = "HOVERED_ANY_WINDOW";
static const char __pyx_k_MOUSE_CURSOR_ARROW[] = "MOUSE_CURSOR_ARROW";
static const char __pyx_k_STYLE_ITEM_SPACING[] = "STYLE_ITEM_SPACING";
static const char __pyx_k_TREE_NODE_SELECTED[] = "TREE_NODE_SELECTED";
static const char __pyx_k_WINDOW_NO_COLLAPSE[] = "WINDOW_NO_COLLAPSE";
static const char __pyx_k_ansifeed_text_ansi[] = "_ansifeed_text_ansi";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_item_rect_size[] = "get_item_rect_size";
static const char __pyx_k_get_mouse_position[] = "get_mouse_position";
static const char __pyx_k_is_any_item_active[] = "is_any_item_active";
static const char __pyx_k_push_text_wrap_pos[] = "push_text_wrap_pos";
static const char __pyx_k_show_font_selector[] = "show_font_selector";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_style_colors_light[] = "style_colors_light";
static const char __pyx_k_BACKEND_HAS_GAMEPAD[] = "BACKEND_HAS_GAMEPAD";
static const char __pyx_k_COLOR_BORDER_SHADOW[] = "COLOR_BORDER_SHADOW";
static const char __pyx_k_COLOR_BUTTON_ACTIVE[] = "COLOR_BUTTON_ACTIVE";
static const char __pyx_k_COLOR_HEADER_ACTIVE[] = "COLOR_HEADER_ACTIVE";
static const char __pyx_k_COLOR_NAV_HIGHLIGHT[] = "COLOR_NAV_HIGHLIGHT";
static const char __pyx_k_COLOR_TEXT_DISABLED[] = "COLOR_TEXT_DISABLED";
static const char __pyx_k_FOCUS_CHILD_WINDOWS[] = "FOCUS_CHILD_WINDOWS";
static const char __pyx_k_HOVERED_ROOT_WINDOW[] = "HOVERED_ROOT_WINDOW";
static const char __pyx_k_INPUT_TEXT_PASSWORD[] = "INPUT_TEXT_PASSWORD";
static const char __pyx_k_STYLE_FRAME_PADDING[] = "STYLE_FRAME_PADDING";
static const char __pyx_k_STYLE_GRAB_MIN_SIZE[] = "STYLE_GRAB_MIN_SIZE";
static const char __pyx_k_STYLE_GRAB_ROUNDING[] = "STYLE_GRAB_ROUNDING";
static const char __pyx_k_WINDOW_NO_NAV_FOCUS[] = "WINDOW_NO_NAV_FOCUS";
static const char __pyx_k_WINDOW_NO_SCROLLBAR[] = "WINDOW_NO_SCROLLBAR";
static const char __pyx_k_WINDOW_NO_TITLE_BAR[] = "WINDOW_NO_TITLE_BAR";
static const char __pyx_k_begin_main_menu_bar[] = "begin_main_menu_bar";
static const char __pyx_k_close_current_popup[] = "close_current_popup";
static const char __pyx_k_get_current_context[] = "get_current_context";
static const char __pyx_k_get_cursor_position[] = "get_cursor_position";
static const char __pyx_k_get_window_position[] = "get_window_position";
static const char __pyx_k_is_any_item_focused[] = "is_any_item_focused";
static const char __pyx_k_is_any_item_hovered[] = "is_any_item_hovered";
static const char __pyx_k_is_window_appearing[] = "is_window_appearing";
static const char __pyx_k_is_window_collapsed[] = "is_window_collapsed";
static const char __pyx_k_set_current_context[] = "set_current_context";
static const char __pyx_k_set_cursor_position[] = "set_cursor_position";
static const char __pyx_k_set_window_position[] = "set_window_position";
static const char __pyx_k_show_metrics_window[] = "show_metrics_window";
static const char __pyx_k_show_style_selector[] = "show_style_selector";
static const char __pyx_k_COLOR_BUTTON_HOVERED[] = "COLOR_BUTTON_HOVERED";
static const char __pyx_k_COLOR_HEADER_HOVERED[] = "COLOR_HEADER_HOVERED";
static const char __pyx_k_COLOR_PLOT_HISTOGRAM[] = "COLOR_PLOT_HISTOGRAM";
static const char __pyx_k_COLOR_SCROLLBAR_GRAB[] = "COLOR_SCROLLBAR_GRAB";
static const char __pyx_k_COMBO_HEIGHT_LARGEST[] = "COMBO_HEIGHT_LARGEST";
static const char __pyx_k_COMBO_HEIGHT_REGULAR[] = "COMBO_HEIGHT_REGULAR";
static const char __pyx_k_INPUT_TEXT_READ_ONLY[] = "INPUT_TEXT_READ_ONLY";
static const char __pyx_k_STYLE_CHILD_ROUNDING[] = "STYLE_CHILD_ROUNDING";
static const char __pyx_k_STYLE_FRAME_ROUNDING[] = "STYLE_FRAME_ROUNDING";
static const char __pyx_k_STYLE_INDENT_SPACING[] = "STYLE_INDENT_SPACING";
static const char __pyx_k_STYLE_POPUP_ROUNDING[] = "STYLE_POPUP_ROUNDING";
static const char __pyx_k_STYLE_SCROLLBAR_SIZE[] = "STYLE_SCROLLBAR_SIZE";
static const char __pyx_k_STYLE_WINDOW_PADDING[] = "STYLE_WINDOW_PADDING";
static const char __pyx_k_WINDOW_NO_NAV_INPUTS[] = "WINDOW_NO_NAV_INPUTS";
static const char __pyx_k_end_drag_drop_source[] = "end_drag_drop_source";
static const char __pyx_k_end_drag_drop_target[] = "end_drag_drop_target";
static const char __pyx_k_get_cursor_start_pos[] = "get_cursor_start_pos";
static const char __pyx_k_get_mouse_drag_delta[] = "get_mouse_drag_delta";
static const char __pyx_k_get_style_color_name[] = "get_style_color_name";
static const char __pyx_k_get_text_line_height[] = "get_text_line_height";
static const char __pyx_k_get_window_draw_list[] = "get_window_draw_list";
static const char __pyx_k_input_text_multiline[] = "input_text_multiline";
static const char __pyx_k_set_next_window_size[] = "set_next_window_size";
static const char __pyx_k_set_window_collapsed[] = "set_window_collapsed";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_style_colors_classic[] = "style_colors_classic";
static const char __pyx_k_variables_and_values[] = "variables_and_values";
static const char __pyx_k_COMBO_NO_ARROW_BUTTON[] = "COMBO_NO_ARROW_BUTTON";
static const char __pyx_k_HOVERED_CHILD_WINDOWS[] = "HOVERED_CHILD_WINDOWS";
static const char __pyx_k_STYLE_WINDOW_MIN_SIZE[] = "STYLE_WINDOW_MIN_SIZE";
static const char __pyx_k_STYLE_WINDOW_ROUNDING[] = "STYLE_WINDOW_ROUNDING";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_get_clipboard_text_fn[] = "get_clipboard_text_fn";
static const char __pyx_k_get_cursor_screen_pos[] = "get_cursor_screen_pos";
static const char __pyx_k_get_overlay_draw_list[] = "get_overlay_draw_list";
static const char __pyx_k_set_clipboard_text_fn[] = "set_clipboard_text_fn";
static const char __pyx_k_set_cursor_screen_pos[] = "set_cursor_screen_pos";
static const char __pyx_k_set_drag_drop_payload[] = "set_drag_drop_payload";
static const char __pyx_k_set_next_window_focus[] = "set_next_window_focus";
static const char __pyx_k_set_scroll_from_pos_y[] = "set_scroll_from_pos_y";
static const char __pyx_k_set_window_font_scale[] = "set_window_font_scale";
static const char __pyx_k_set_window_size_named[] = "set_window_size_named";
static const char __pyx_k_COLOR_CHILD_BACKGROUND[] = "COLOR_CHILD_BACKGROUND";
static const char __pyx_k_COLOR_DRAG_DROP_TARGET[] = "COLOR_DRAG_DROP_TARGET";
static const char __pyx_k_COLOR_FRAME_BACKGROUND[] = "COLOR_FRAME_BACKGROUND";
static const char __pyx_k_COLOR_POPUP_BACKGROUND[] = "COLOR_POPUP_BACKGROUND";
static const char __pyx_k_COLOR_SEPARATOR_ACTIVE[] = "COLOR_SEPARATOR_ACTIVE";
static const char __pyx_k_COLOR_TITLE_BACKGROUND[] = "COLOR_TITLE_BACKGROUND";
static const char __pyx_k_COMBO_POPUP_ALIGN_LEFT[] = "COMBO_POPUP_ALIGN_LEFT";
static const char __pyx_k_CONFIG_IS_TOUCH_SCREEN[] = "CONFIG_IS_TOUCH_SCREEN";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_EW[] = "MOUSE_CURSOR_RESIZE_EW";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_NS[] = "MOUSE_CURSOR_RESIZE_NS";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_STYLE_CHILD_BORDERSIZE[] = "STYLE_CHILD_BORDERSIZE";
static const char __pyx_k_STYLE_FRAME_BORDERSIZE[] = "STYLE_FRAME_BORDERSIZE";
static const char __pyx_k_STYLE_POPUP_BORDERSIZE[] = "STYLE_POPUP_BORDERSIZE";
static const char __pyx_k_TREE_NODE_DEFAULT_OPEN[] = "TREE_NODE_DEFAULT_OPEN";
static const char __pyx_k_Unknown_style_variable[] = "Unknown style variable: {}";
static const char __pyx_k_begin_drag_drop_source[] = "begin_drag_drop_source";
static const char __pyx_k_begin_drag_drop_target[] = "begin_drag_drop_target";
static const char __pyx_k_get_content_region_max[] = "get_content_region_max";
static const char __pyx_k_is_mouse_hovering_rect[] = "is_mouse_hovering_rect";
static const char __pyx_k_pop_text_wrap_position[] = "pop_text_wrap_position";
static const char __pyx_k_reset_mouse_drag_delta[] = "reset_mouse_drag_delta";
static const char __pyx_k_rounding_corners_flags[] = "rounding_corners_flags";
static const char __pyx_k_set_item_allow_overlap[] = "set_item_allow_overlap";
static const char __pyx_k_set_item_default_focus[] = "set_item_default_focus";
static const char __pyx_k_COLOR_SEPARATOR_HOVERED[] = "COLOR_SEPARATOR_HOVERED";
static const char __pyx_k_COLOR_WINDOW_BACKGROUND[] = "COLOR_WINDOW_BACKGROUND";
static const char __pyx_k_DRAG_DROP_SOURCE_EXTERN[] = "DRAG_DROP_SOURCE_EXTERN";
static const char __pyx_k_INPUT_TEXT_NO_UNDO_REDO[] = "INPUT_TEXT_NO_UNDO_REDO";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_ALL[] = "MOUSE_CURSOR_RESIZE_ALL";
static const char __pyx_k_MOUSE_CURSOR_TEXT_INPUT[] = "MOUSE_CURSOR_TEXT_INPUT";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_STYLE_BUTTON_TEXT_ALIGN[] = "STYLE_BUTTON_TEXT_ALIGN";
static const char __pyx_k_STYLE_WINDOW_BORDERSIZE[] = "STYLE_WINDOW_BORDERSIZE";
static const char __pyx_k_TREE_NODE_FRAME_PADDING[] = "TREE_NODE_FRAME_PADDING";
static const char __pyx_k_TREE_NODE_OPEN_ON_ARROW[] = "TREE_NODE_OPEN_ON_ARROW";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_is_mouse_double_clicked[] = "is_mouse_double_clicked";
static const char __pyx_k_push_text_wrap_position[] = "push_text_wrap_position";
static const char __pyx_k_set_keyboard_focus_here[] = "set_keyboard_focus_here";
static const char __pyx_k_COLOR_MENUBAR_BACKGROUND[] = "COLOR_MENUBAR_BACKGROUND";
static const char __pyx_k_COLOR_PLOT_LINES_HOVERED[] = "COLOR_PLOT_LINES_HOVERED";
static const char __pyx_k_COLOR_RESIZE_GRIP_ACTIVE[] = "COLOR_RESIZE_GRIP_ACTIVE";
static const char __pyx_k_COLOR_SLIDER_GRAB_ACTIVE[] = "COLOR_SLIDER_GRAB_ACTIVE";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_INPUT_TEXT_CHARS_DECIMAL[] = "INPUT_TEXT_CHARS_DECIMAL";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_NESW[] = "MOUSE_CURSOR_RESIZE_NESW";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_NWSE[] = "MOUSE_CURSOR_RESIZE_NWSE";
static const char __pyx_k_STYLE_ITEM_INNER_SPACING[] = "STYLE_ITEM_INNER_SPACING";
static const char __pyx_k_STYLE_SCROLLBAR_ROUNDING[] = "STYLE_SCROLLBAR_ROUNDING";
static const char __pyx_k_STYLE_WINDOW_TITLE_ALIGN[] = "STYLE_WINDOW_TITLE_ALIGN";
static const char __pyx_k_WINDOW_NO_SAVED_SETTINGS[] = "WINDOW_NO_SAVED_SETTINGS";
static const char __pyx_k_accept_drag_drop_payload[] = "accept_drag_drop_payload";
static const char __pyx_k_begin_popup_context_item[] = "begin_popup_context_item";
static const char __pyx_k_func_is_not_a_callable_s[] = "func is not a callable: %s";
static const char __pyx_k_s_improperly_initialized[] = "%s improperly initialized";
static const char __pyx_k_set_next_window_bg_alpha[] = "set_next_window_bg_alpha";
static const char __pyx_k_set_next_window_position[] = "set_next_window_position";
static const char __pyx_k_set_window_focus_labeled[] = "set_window_focus_labeled";
static const char __pyx_k_BACKEND_HAS_MOUSE_CURSORS[] = "BACKEND_HAS_MOUSE_CURSORS";
static const char __pyx_k_BACKEND_HAS_SET_MOUSE_POS[] = "BACKEND_HAS_SET_MOUSE_POS";
static const char __pyx_k_COLOR_RESIZE_GRIP_HOVERED[] = "COLOR_RESIZE_GRIP_HOVERED";
static const char __pyx_k_CONFIG_NAV_ENABLE_GAMEPAD[] = "CONFIG_NAV_ENABLE_GAMEPAD";
static const char __pyx_k_INPUT_TEXT_CHARS_NO_BLANK[] = "INPUT_TEXT_CHARS_NO_BLANK";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_WINDOW_ALWAYS_AUTO_RESIZE[] = "WINDOW_ALWAYS_AUTO_RESIZE";
static const char __pyx_k_get_cursor_start_position[] = "get_cursor_start_position";
static const char __pyx_k_set_next_window_collapsed[] = "set_next_window_collapsed";
static const char __pyx_k_COLOR_SCROLLBAR_BACKGROUND[] = "COLOR_SCROLLBAR_BACKGROUND";
static const char __pyx_k_CONFIG_NAV_ENABLE_KEYBOARD[] = "CONFIG_NAV_ENABLE_KEYBOARD";
static const char __pyx_k_DRAG_DROP_ACCEPT_PEEK_ONLY[] = "DRAG_DROP_ACCEPT_PEEK_ONLY";
static const char __pyx_k_Direction_wasn_t_specified[] = "Direction wasn't specified.";
static const char __pyx_k_INPUT_TEXT_ALLOW_TAB_INPUT[] = "INPUT_TEXT_ALLOW_TAB_INPUT";
static const char __pyx_k_INPUT_TEXT_AUTO_SELECT_ALL[] = "INPUT_TEXT_AUTO_SELECT_ALL";
static const char __pyx_k_INPUT_TEXT_CALLBACK_ALWAYS[] = "INPUT_TEXT_CALLBACK_ALWAYS";
static const char __pyx_k_INPUT_TEXT_CHARS_UPPERCASE[] = "INPUT_TEXT_CHARS_UPPERCASE";
static const char __pyx_k_ansifeed_text_ansi_colored[] = "_ansifeed_text_ansi_colored";
static const char __pyx_k_begin_popup_context_window[] = "begin_popup_context_window";
static const char __pyx_k_get_cursor_screen_position[] = "get_cursor_screen_position";
static const char __pyx_k_py_index_buffer_index_size[] = "_py_index_buffer_index_size";
static const char __pyx_k_set_cursor_screen_position[] = "set_cursor_screen_position";
static const char __pyx_k_COLOR_SCROLLBAR_GRAB_ACTIVE[] = "COLOR_SCROLLBAR_GRAB_ACTIVE";
static const char __pyx_k_INPUT_TEXT_CALLBACK_HISTORY[] = "INPUT_TEXT_CALLBACK_HISTORY";
static const char __pyx_k_No_matching_signature_found[] = "No matching signature found";
static const char __pyx_k_SELECTABLE_SPAN_ALL_COLUMNS[] = "SELECTABLE_SPAN_ALL_COLUMNS";
static const char __pyx_k_TREE_NODE_COLLAPSING_HEADER[] = "TREE_NODE_COLLAPSING_HEADER";
static const char __pyx_k_WINDOW_NO_SCROLL_WITH_MOUSE[] = "WINDOW_NO_SCROLL_WITH_MOUSE";
static const char __pyx_k_align_text_to_frame_padding[] = "align_text_to_frame_padding";
static const char __pyx_k_hide_text_after_double_hash[] = "hide_text_after_double_hash";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_set_window_position_labeled[] = "set_window_position_labeled";
static const char __pyx_k_COLOR_PLOT_HISTOGRAM_HOVERED[] = "COLOR_PLOT_HISTOGRAM_HOVERED";
static const char __pyx_k_COLOR_SCROLLBAR_GRAB_HOVERED[] = "COLOR_SCROLLBAR_GRAB_HOVERED";
static const char __pyx_k_FOCUS_ROOT_AND_CHILD_WINDOWS[] = "FOCUS_ROOT_AND_CHILD_WINDOWS";
static const char __pyx_k_INPUT_TEXT_CHARS_HEXADECIMAL[] = "INPUT_TEXT_CHARS_HEXADECIMAL";
static const char __pyx_k_SELECTABLE_DONT_CLOSE_POPUPS[] = "SELECTABLE_DONT_CLOSE_POPUPS";
static const char __pyx_k_TREE_NODE_ALLOW_ITEM_OVERLAP[] = "TREE_NODE_ALLOW_ITEM_OVERLAP";
static const char __pyx_k_WINDOW_NO_FOCUS_ON_APPEARING[] = "WINDOW_NO_FOCUS_ON_APPEARING";
static const char __pyx_k_get_content_region_available[] = "get_content_region_available";
static const char __pyx_k_py_vertex_buffer_vertex_size[] = "_py_vertex_buffer_vertex_size";
static const char __pyx_k_set_next_window_content_size[] = "set_next_window_content_size";
static const char __pyx_k_set_window_collapsed_labeled[] = "set_window_collapsed_labeled";
static const char __pyx_k_COLOR_FRAME_BACKGROUND_ACTIVE[] = "COLOR_FRAME_BACKGROUND_ACTIVE";
static const char __pyx_k_COLOR_NAV_WINDOWING_HIGHLIGHT[] = "COLOR_NAV_WINDOWING_HIGHLIGHT";
static const char __pyx_k_COLOR_TITLE_BACKGROUND_ACTIVE[] = "COLOR_TITLE_BACKGROUND_ACTIVE";
static const char __pyx_k_CONFIG_NO_MOUSE_CURSOR_CHARGE[] = "CONFIG_NO_MOUSE_CURSOR_CHARGE";
static const char __pyx_k_HOVERED_ALLOW_WHEN_OVERLAPPED[] = "HOVERED_ALLOW_WHEN_OVERLAPPED";
static const char __pyx_k_INPUT_TEXT_ALWAYS_INSERT_MODE[] = "INPUT_TEXT_ALWAYS_INSERT_MODE";
static const char __pyx_k_INPUT_TEXT_ENTER_RETURNS_TRUE[] = "INPUT_TEXT_ENTER_RETURNS_TRUE";
static const char __pyx_k_SELECTABLE_ALLOW_DOUBLE_CLICK[] = "SELECTABLE_ALLOW_DOUBLE_CLICK";
static const char __pyx_k_TREE_NODE_NO_AUTO_OPEN_ON_LOG[] = "TREE_NODE_NO_AUTO_OPEN_ON_LOG";
static const char __pyx_k_get_frame_height_with_spacing[] = "get_frame_height_with_spacing";
static const char __pyx_k_get_window_content_region_max[] = "get_window_content_region_max";
static const char __pyx_k_get_window_content_region_min[] = "get_window_content_region_min";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_COLOR_FRAME_BACKGROUND_HOVERED[] = "COLOR_FRAME_BACKGROUND_HOVERED";
static const char __pyx_k_COLOR_TEXT_SELECTED_BACKGROUND[] = "COLOR_TEXT_SELECTED_BACKGROUND";
static const char __pyx_k_CONFIG_NAV_NO_CAPTURE_KEYBOARD[] = "CONFIG_NAV_NO_CAPTURE_KEYBOARD";
static const char __pyx_k_DRAG_DROP_SOURCE_ALLOW_NULL_ID[] = "DRAG_DROP_SOURCE_ALLOW_NULL_ID";
static const char __pyx_k_HOVERED_ROOT_AND_CHILD_WINDOWS[] = "HOVERED_ROOT_AND_CHILD_WINDOWS";
static const char __pyx_k_INPUT_TEXT_CALLBACK_COMPLETION[] = "INPUT_TEXT_CALLBACK_COMPLETION";
static const char __pyx_k_TREE_NODE_NO_TREE_PUSH_ON_OPEN[] = "TREE_NODE_NO_TREE_PUSH_ON_OPEN";
static const char __pyx_k_TREE_NODE_OPEN_ON_DOUBLE_CLICK[] = "TREE_NODE_OPEN_ON_DOUBLE_CLICK";
static const char __pyx_k_pair_param_must_be_length_of_2[] = "pair param must be length of 2";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_CONFIG_NAV_ENABLE_SET_MOUSE_POS[] = "CONFIG_NAV_ENABLE_SET_MOUSE_POS";
static const char __pyx_k_INPUT_TEXT_CALLBACK_CHAR_FILTER[] = "INPUT_TEXT_CALLBACK_CHAR_FILTER";
static const char __pyx_k_INPUT_TEXT_NO_HORIZONTAL_SCROLL[] = "INPUT_TEXT_NO_HORIZONTAL_SCROLL";
static const char __pyx_k_WINDOW_HORIZONTAL_SCROLLING_BAR[] = "WINDOW_HORIZONTAL_SCROLLING_BAR";
static const char __pyx_k_get_window_content_region_width[] = "get_window_content_region_width";
static const char __pyx_k_py_vertex_buffer_vertex_col_off[] = "_py_vertex_buffer_vertex_col_offset";
static const char __pyx_k_py_vertex_buffer_vertex_pos_off[] = "_py_vertex_buffer_vertex_pos_offset";
static const char __pyx_k_py_vertex_buffer_vertex_uv_offs[] = "_py_vertex_buffer_vertex_uv_offset";
static const char __pyx_k_todo_consider_inlining_every_oc[] = "\n\n.. todo:: consider inlining every occurence of ``_cast_args_ImVecX`` (profile)\n.. todo: verify mem safety of char* variables and check for leaks\n";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_COLOR_MODAL_WINDOW_DIM_BACKGROUN[] = "COLOR_MODAL_WINDOW_DIM_BACKGROUND";
static const char __pyx_k_COLOR_NAV_WINDOWING_DIM_BACKGROU[] = "COLOR_NAV_WINDOWING_DIM_BACKGROUND";
static const char __pyx_k_COLOR_TITLE_BACKGROUND_COLLAPSED[] = "COLOR_TITLE_BACKGROUND_COLLAPSED";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Context_invalid_None_or_destroye[] = "Context invalid (None or destroyed)";
static const char __pyx_k_DRAG_DROP_ACCEPT_BEFORE_DELIVERY[] = "DRAG_DROP_ACCEPT_BEFORE_DELIVERY";
static const char __pyx_k_DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT[] = "DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT_RECT";
static const char __pyx_k_DRAG_DROP_ACCEPT_NO_PREVIEW_TOOL[] = "DRAG_DROP_ACCEPT_NO_PREVIEW_TOOLTIP";
static const char __pyx_k_DRAG_DROP_SOURCE_AUTO_EXPIRE_PAY[] = "DRAG_DROP_SOURCE_AUTO_EXPIRE_PAYLOAD";
static const char __pyx_k_DRAG_DROP_SOURCE_NO_DISABLE_HOVE[] = "DRAG_DROP_SOURCE_NO_DISABLE_HOVER";
static const char __pyx_k_DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN[] = "DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN_OTHERS";
static const char __pyx_k_DRAG_DROP_SOURCE_NO_PREVIEW_TOOL[] = "DRAG_DROP_SOURCE_NO_PREVIEW_TOOLTIP";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Expected_at_least_d_argument_s_g[] = "Expected at least %d argument%s, got %d";
static const char __pyx_k_Function_call_with_ambiguous_arg[] = "Function call with ambiguous argument types";
static const char __pyx_k_HOVERED_ALLOW_WHEN_BLOCKED_BY_AC[] = "HOVERED_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM";
static const char __pyx_k_HOVERED_ALLOW_WHEN_BLOCKED_BY_PO[] = "HOVERED_ALLOW_WHEN_BLOCKED_BY_POPUP";
static const char __pyx_k_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI[] = "INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE";
static const char __pyx_k_Improperly_initialized_use_imgui[] = "Improperly initialized, use imgui.get_style() or GuiStyle.created() to obtain style classes";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Style_value_must_be_float_or_two[] = "Style value must be float or two-elements list/tuple";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_Unsufficient_style_info_variable[] = "Unsufficient style info: {} variable lacks a value";
static const char __pyx_k_WINDOW_ALWAYS_HORIZONTAL_SCROLLB[] = "WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR";
static const char __pyx_k_WINDOW_ALWAYS_USE_WINDOW_PADDING[] = "WINDOW_ALWAYS_USE_WINDOW_PADDING";
static const char __pyx_k_WINDOW_ALWAYS_VERTICAL_SCROLLBAR[] = "WINDOW_ALWAYS_VERTICAL_SCROLLBAR";
static const char __pyx_k_WINDOW_NO_BRING_TO_FRONT_ON_FOCU[] = "WINDOW_NO_BRING_TO_FRONT_ON_FOCUS";
static const char __pyx_k_get_content_region_available_wid[] = "get_content_region_available_width";
static const char __pyx_k_get_text_line_height_with_spacin[] = "get_text_line_height_with_spacing";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_quadruple_param_must_be_length_o[] = "quadruple param must be length of 4";
static const char __pyx_k_self__ptr_cannot_be_converted_to[] = "self._ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_self_ranges_ptr_cannot_be_conver[] = "self.ranges_ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static PyObject *__pyx_kp_s_3f;
static PyObject *__pyx_kp_s_6f;
static PyObject *__pyx_n_s_ALWAYS;
static PyObject *__pyx_n_s_APPEARING;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_BACKEND_HAS_GAMEPAD;
static PyObject *__pyx_n_s_BACKEND_HAS_MOUSE_CURSORS;
static PyObject *__pyx_n_s_BACKEND_HAS_SET_MOUSE_POS;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_COLOR_BORDER;
static PyObject *__pyx_n_s_COLOR_BORDER_SHADOW;
static PyObject *__pyx_n_s_COLOR_BUTTON;
static PyObject *__pyx_n_s_COLOR_BUTTON_ACTIVE;
static PyObject *__pyx_n_s_COLOR_BUTTON_HOVERED;
static PyObject *__pyx_n_s_COLOR_CHECK_MARK;
static PyObject *__pyx_n_s_COLOR_CHILD_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_COUNT;
static PyObject *__pyx_n_s_COLOR_DRAG_DROP_TARGET;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND_ACTIVE;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND_HOVERED;
static PyObject *__pyx_n_s_COLOR_HEADER;
static PyObject *__pyx_n_s_COLOR_HEADER_ACTIVE;
static PyObject *__pyx_n_s_COLOR_HEADER_HOVERED;
static PyObject *__pyx_n_s_COLOR_MENUBAR_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_MODAL_WINDOW_DIM_BACKGROUN;
static PyObject *__pyx_n_s_COLOR_NAV_HIGHLIGHT;
static PyObject *__pyx_n_s_COLOR_NAV_WINDOWING_DIM_BACKGROU;
static PyObject *__pyx_n_s_COLOR_NAV_WINDOWING_HIGHLIGHT;
static PyObject *__pyx_n_s_COLOR_PLOT_HISTOGRAM;
static PyObject *__pyx_n_s_COLOR_PLOT_HISTOGRAM_HOVERED;
static PyObject *__pyx_n_s_COLOR_PLOT_LINES;
static PyObject *__pyx_n_s_COLOR_PLOT_LINES_HOVERED;
static PyObject *__pyx_n_s_COLOR_POPUP_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP_ACTIVE;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP_HOVERED;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB_ACTIVE;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB_HOVERED;
static PyObject *__pyx_n_s_COLOR_SEPARATOR;
static PyObject *__pyx_n_s_COLOR_SEPARATOR_ACTIVE;
static PyObject *__pyx_n_s_COLOR_SEPARATOR_HOVERED;
static PyObject *__pyx_n_s_COLOR_SLIDER_GRAB;
static PyObject *__pyx_n_s_COLOR_SLIDER_GRAB_ACTIVE;
static PyObject *__pyx_n_s_COLOR_TEXT;
static PyObject *__pyx_n_s_COLOR_TEXT_DISABLED;
static PyObject *__pyx_n_s_COLOR_TEXT_SELECTED_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND_ACTIVE;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND_COLLAPSED;
static PyObject *__pyx_n_s_COLOR_WINDOW_BACKGROUND;
static PyObject *__pyx_n_s_COMBO_HEIGHT_LARGE;
static PyObject *__pyx_n_s_COMBO_HEIGHT_LARGEST;
static PyObject *__pyx_n_s_COMBO_HEIGHT_MASK;
static PyObject *__pyx_n_s_COMBO_HEIGHT_REGULAR;
static PyObject *__pyx_n_s_COMBO_HEIGHT_SMALL;
static PyObject *__pyx_n_s_COMBO_NO_ARROW_BUTTON;
static PyObject *__pyx_n_s_COMBO_NO_PREVIEW;
static PyObject *__pyx_n_s_COMBO_POPUP_ALIGN_LEFT;
static PyObject *__pyx_n_s_CONFIG_IS_RGB;
static PyObject *__pyx_n_s_CONFIG_IS_TOUCH_SCREEN;
static PyObject *__pyx_n_s_CONFIG_NAV_ENABLE_GAMEPAD;
static PyObject *__pyx_n_s_CONFIG_NAV_ENABLE_KEYBOARD;
static PyObject *__pyx_n_s_CONFIG_NAV_ENABLE_SET_MOUSE_POS;
static PyObject *__pyx_n_s_CONFIG_NAV_NO_CAPTURE_KEYBOARD;
static PyObject *__pyx_n_s_CONFIG_NO_MOUSE;
static PyObject *__pyx_n_s_CONFIG_NO_MOUSE_CURSOR_CHARGE;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Colors;
static PyObject *__pyx_kp_s_Context_invalid_None_or_destroye;
static PyObject *__pyx_n_s_DIRECTION_DOWN;
static PyObject *__pyx_n_s_DIRECTION_LEFT;
static PyObject *__pyx_n_s_DIRECTION_NONE;
static PyObject *__pyx_n_s_DIRECTION_RIGHT;
static PyObject *__pyx_n_s_DIRECTION_UP;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_BEFORE_DELIVERY;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_NO_PREVIEW_TOOL;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_PEEK_ONLY;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_ALLOW_NULL_ID;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_AUTO_EXPIRE_PAY;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_EXTERN;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_NO_DISABLE_HOVE;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_NO_PREVIEW_TOOL;
static PyObject *__pyx_kp_s_Direction_wasn_t_specified;
static PyObject *__pyx_n_s_DrawCmd;
static PyObject *__pyx_n_s_DrawData;
static PyObject *__pyx_n_s_DrawList;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_s_Expected_at_least_d_argument_s_g;
static PyObject *__pyx_n_s_FIRST_USE_EVER;
static PyObject *__pyx_n_s_FOCUS_ANY_WINDOW;
static PyObject *__pyx_n_s_FOCUS_CHILD_WINDOWS;
static PyObject *__pyx_n_s_FOCUS_ROOT_AND_CHILD_WINDOWS;
static PyObject *__pyx_n_s_FOCUS_ROOT_WINDOW;
static PyObject *__pyx_n_s_Font;
static PyObject *__pyx_n_s_FontAtlas;
static PyObject *__pyx_kp_s_Function_call_with_ambiguous_arg;
static PyObject *__pyx_n_s_GuiStyle;
static PyObject *__pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_AC;
static PyObject *__pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_PO;
static PyObject *__pyx_n_s_HOVERED_ALLOW_WHEN_OVERLAPPED;
static PyObject *__pyx_n_s_HOVERED_ANY_WINDOW;
static PyObject *__pyx_n_s_HOVERED_CHILD_WINDOWS;
static PyObject *__pyx_n_s_HOVERED_NONE;
static PyObject *__pyx_n_s_HOVERED_RECT_ONLY;
static PyObject *__pyx_n_s_HOVERED_ROOT_AND_CHILD_WINDOWS;
static PyObject *__pyx_n_s_HOVERED_ROOT_WINDOW;
static PyObject *__pyx_n_s_INPUT_TEXT_ALLOW_TAB_INPUT;
static PyObject *__pyx_n_s_INPUT_TEXT_ALWAYS_INSERT_MODE;
static PyObject *__pyx_n_s_INPUT_TEXT_AUTO_SELECT_ALL;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_ALWAYS;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_CHAR_FILTER;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_COMPLETION;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_HISTORY;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_DECIMAL;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_HEXADECIMAL;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_NO_BLANK;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_UPPERCASE;
static PyObject *__pyx_n_s_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI;
static PyObject *__pyx_n_s_INPUT_TEXT_ENTER_RETURNS_TRUE;
static PyObject *__pyx_n_s_INPUT_TEXT_NO_HORIZONTAL_SCROLL;
static PyObject *__pyx_n_s_INPUT_TEXT_NO_UNDO_REDO;
static PyObject *__pyx_n_s_INPUT_TEXT_PASSWORD;
static PyObject *__pyx_n_s_INPUT_TEXT_READ_ONLY;
static PyObject *__pyx_n_s_IO;
static PyObject *__pyx_n_s_ImGuiContext;
static PyObject *__pyx_n_s_ImGuiError;
static PyObject *__pyx_n_s_ImGuiID;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Improperly_initialized_use_imgui;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_KEY_A;
static PyObject *__pyx_n_s_KEY_BACKSPACE;
static PyObject *__pyx_n_s_KEY_C;
static PyObject *__pyx_n_s_KEY_DELETE;
static PyObject *__pyx_n_s_KEY_DOWN_ARROW;
static PyObject *__pyx_n_s_KEY_END;
static PyObject *__pyx_n_s_KEY_ENTER;
static PyObject *__pyx_n_s_KEY_ESCAPE;
static PyObject *__pyx_n_s_KEY_HOME;
static PyObject *__pyx_n_s_KEY_INSERT;
static PyObject *__pyx_n_s_KEY_LEFT_ARROW;
static PyObject *__pyx_n_s_KEY_PAGE_DOWN;
static PyObject *__pyx_n_s_KEY_PAGE_UP;
static PyObject *__pyx_n_s_KEY_RIGHT_ARROW;
static PyObject *__pyx_n_s_KEY_SPACE;
static PyObject *__pyx_n_s_KEY_TAB;
static PyObject *__pyx_n_s_KEY_UP_ARROW;
static PyObject *__pyx_n_s_KEY_V;
static PyObject *__pyx_n_s_KEY_X;
static PyObject *__pyx_n_s_KEY_Y;
static PyObject *__pyx_n_s_KEY_Z;
static PyObject *__pyx_n_s_MOUSE_CURSOR_ARROW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_HAND;
static PyObject *__pyx_n_s_MOUSE_CURSOR_NONE;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_ALL;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_EW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NESW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NS;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NWSE;
static PyObject *__pyx_n_s_MOUSE_CURSOR_TEXT_INPUT;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_s_No_matching_signature_found;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_ONCE;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SELECTABLE_ALLOW_DOUBLE_CLICK;
static PyObject *__pyx_n_s_SELECTABLE_DONT_CLOSE_POPUPS;
static PyObject *__pyx_n_s_SELECTABLE_SPAN_ALL_COLUMNS;
static PyObject *__pyx_n_s_STYLE_ALPHA;
static PyObject *__pyx_n_s_STYLE_BUTTON_TEXT_ALIGN;
static PyObject *__pyx_n_s_STYLE_CHILD_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_CHILD_ROUNDING;
static PyObject *__pyx_n_s_STYLE_FRAME_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_FRAME_PADDING;
static PyObject *__pyx_n_s_STYLE_FRAME_ROUNDING;
static PyObject *__pyx_n_s_STYLE_GRAB_MIN_SIZE;
static PyObject *__pyx_n_s_STYLE_GRAB_ROUNDING;
static PyObject *__pyx_n_s_STYLE_INDENT_SPACING;
static PyObject *__pyx_n_s_STYLE_ITEM_INNER_SPACING;
static PyObject *__pyx_n_s_STYLE_ITEM_SPACING;
static PyObject *__pyx_n_s_STYLE_POPUP_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_POPUP_ROUNDING;
static PyObject *__pyx_n_s_STYLE_SCROLLBAR_ROUNDING;
static PyObject *__pyx_n_s_STYLE_SCROLLBAR_SIZE;
static PyObject *__pyx_n_s_STYLE_WINDOW_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_WINDOW_MIN_SIZE;
static PyObject *__pyx_n_s_STYLE_WINDOW_PADDING;
static PyObject *__pyx_n_s_STYLE_WINDOW_ROUNDING;
static PyObject *__pyx_n_s_STYLE_WINDOW_TITLE_ALIGN;
static PyObject *__pyx_n_s_StaticGlyphRanges;
static PyObject *__pyx_kp_s_Style_value_must_be_float_or_two;
static PyObject *__pyx_n_s_TREE_NODE_ALLOW_ITEM_OVERLAP;
static PyObject *__pyx_n_s_TREE_NODE_BULLET;
static PyObject *__pyx_n_s_TREE_NODE_COLLAPSING_HEADER;
static PyObject *__pyx_n_s_TREE_NODE_DEFAULT_OPEN;
static PyObject *__pyx_n_s_TREE_NODE_FRAMED;
static PyObject *__pyx_n_s_TREE_NODE_FRAME_PADDING;
static PyObject *__pyx_n_s_TREE_NODE_LEAF;
static PyObject *__pyx_n_s_TREE_NODE_NO_AUTO_OPEN_ON_LOG;
static PyObject *__pyx_n_s_TREE_NODE_NO_TREE_PUSH_ON_OPEN;
static PyObject *__pyx_n_s_TREE_NODE_OPEN_ON_ARROW;
static PyObject *__pyx_n_s_TREE_NODE_OPEN_ON_DOUBLE_CLICK;
static PyObject *__pyx_n_s_TREE_NODE_SELECTED;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_s_Unknown_style_variable;
static PyObject *__pyx_kp_s_Unsufficient_style_info_variable;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Vec2;
static PyObject *__pyx_n_s_Vec4;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_AUTO_RESIZE;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_HORIZONTAL_SCROLLB;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_USE_WINDOW_PADDING;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_VERTICAL_SCROLLBAR;
static PyObject *__pyx_n_s_WINDOW_HORIZONTAL_SCROLLING_BAR;
static PyObject *__pyx_n_s_WINDOW_MENU_BAR;
static PyObject *__pyx_n_s_WINDOW_NO_BRING_TO_FRONT_ON_FOCU;
static PyObject *__pyx_n_s_WINDOW_NO_COLLAPSE;
static PyObject *__pyx_n_s_WINDOW_NO_FOCUS_ON_APPEARING;
static PyObject *__pyx_n_s_WINDOW_NO_INPUTS;
static PyObject *__pyx_n_s_WINDOW_NO_MOVE;
static PyObject *__pyx_n_s_WINDOW_NO_NAV;
static PyObject *__pyx_n_s_WINDOW_NO_NAV_FOCUS;
static PyObject *__pyx_n_s_WINDOW_NO_NAV_INPUTS;
static PyObject *__pyx_n_s_WINDOW_NO_RESIZE;
static PyObject *__pyx_n_s_WINDOW_NO_SAVED_SETTINGS;
static PyObject *__pyx_n_s_WINDOW_NO_SCROLLBAR;
static PyObject *__pyx_n_s_WINDOW_NO_SCROLL_WITH_MOUSE;
static PyObject *__pyx_n_s_WINDOW_NO_TITLE_BAR;
static PyObject *__pyx_kp_s__32;
static PyObject *__pyx_kp_s__33;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_kp_s__50;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_accept_drag_drop_payload;
static PyObject *__pyx_n_s_active;
static PyObject *__pyx_n_s_align_text_to_frame_padding;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_alpha_mul;
static PyObject *__pyx_n_s_also_over_items;
static PyObject *__pyx_n_s_ansifeed_text_ansi;
static PyObject *__pyx_n_s_ansifeed_text_ansi_colored;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_arrow_button;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_begin_child;
static PyObject *__pyx_n_s_begin_drag_drop_source;
static PyObject *__pyx_n_s_begin_drag_drop_target;
static PyObject *__pyx_n_s_begin_group;
static PyObject *__pyx_n_s_begin_main_menu_bar;
static PyObject *__pyx_n_s_begin_menu;
static PyObject *__pyx_n_s_begin_menu_bar;
static PyObject *__pyx_n_s_begin_popup;
static PyObject *__pyx_n_s_begin_popup_context_item;
static PyObject *__pyx_n_s_begin_popup_context_window;
static PyObject *__pyx_n_s_begin_popup_modal;
static PyObject *__pyx_n_s_begin_tooltip;
static PyObject *__pyx_n_s_border;
static PyObject *__pyx_n_s_border_color;
static PyObject *__pyx_n_s_buffer_length;
static PyObject *__pyx_n_s_bullet;
static PyObject *__pyx_n_s_bullet_text;
static PyObject *__pyx_n_s_button;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_c_string;
static PyObject *__pyx_n_s_center_y_ratio;
static PyObject *__pyx_n_s_centre_x;
static PyObject *__pyx_n_s_centre_y;
static PyObject *__pyx_n_s_change_speed;
static PyObject *__pyx_n_s_changed;
static PyObject *__pyx_n_s_checkbox;
static PyObject *__pyx_n_s_checkbox_flags;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_clicked;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clip;
static PyObject *__pyx_n_s_closable;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_close_current_popup;
static PyObject *__pyx_n_s_closed;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_s_collapsed;
static PyObject *__pyx_n_s_collapsing_header;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_color_button;
static PyObject *__pyx_n_s_color_edit3;
static PyObject *__pyx_n_s_color_edit4;
static PyObject *__pyx_n_s_column_index;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_combo;
static PyObject *__pyx_n_s_condition;
static PyObject *__pyx_n_s_contextlib;
static PyObject *__pyx_n_s_contextmanager;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_create;
static PyObject *__pyx_n_s_create_context;
static PyObject *__pyx_n_s_ctx;
static PyObject *__pyx_n_s_current;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_defaults;
static PyObject *__pyx_n_s_desc_id;
static PyObject *__pyx_n_s_destroy_context;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_drag_float;
static PyObject *__pyx_n_s_drag_float2;
static PyObject *__pyx_n_s_drag_float3;
static PyObject *__pyx_n_s_drag_float4;
static PyObject *__pyx_n_s_drag_int;
static PyObject *__pyx_n_s_drag_int2;
static PyObject *__pyx_n_s_drag_int3;
static PyObject *__pyx_n_s_drag_int4;
static PyObject *__pyx_n_s_dst;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_dummy;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_end_child;
static PyObject *__pyx_n_s_end_drag_drop_source;
static PyObject *__pyx_n_s_end_drag_drop_target;
static PyObject *__pyx_n_s_end_frame;
static PyObject *__pyx_n_s_end_group;
static PyObject *__pyx_n_s_end_main_menu_bar;
static PyObject *__pyx_n_s_end_menu;
static PyObject *__pyx_n_s_end_menu_bar;
static PyObject *__pyx_n_s_end_popup;
static PyObject *__pyx_n_s_end_tooltip;
static PyObject *__pyx_n_s_end_x;
static PyObject *__pyx_n_s_end_y;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_kp_s_f;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fillvalue;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flags_value;
static PyObject *__pyx_n_s_font;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_fraction;
static PyObject *__pyx_n_s_frame_padding;
static PyObject *__pyx_kp_s_func_is_not_a_callable_s;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_get_clipboard_text_fn;
static PyObject *__pyx_n_s_get_column_index;
static PyObject *__pyx_n_s_get_column_offset;
static PyObject *__pyx_n_s_get_column_width;
static PyObject *__pyx_n_s_get_columns_count;
static PyObject *__pyx_n_s_get_content_region_available;
static PyObject *__pyx_n_s_get_content_region_available_wid;
static PyObject *__pyx_n_s_get_content_region_max;
static PyObject *__pyx_n_s_get_current_context;
static PyObject *__pyx_n_s_get_cursor_pos;
static PyObject *__pyx_n_s_get_cursor_pos_x;
static PyObject *__pyx_n_s_get_cursor_pos_y;
static PyObject *__pyx_n_s_get_cursor_position;
static PyObject *__pyx_n_s_get_cursor_screen_pos;
static PyObject *__pyx_n_s_get_cursor_screen_position;
static PyObject *__pyx_n_s_get_cursor_start_pos;
static PyObject *__pyx_n_s_get_cursor_start_position;
static PyObject *__pyx_n_s_get_draw_data;
static PyObject *__pyx_n_s_get_frame_height;
static PyObject *__pyx_n_s_get_frame_height_with_spacing;
static PyObject *__pyx_n_s_get_io;
static PyObject *__pyx_n_s_get_item_rect_max;
static PyObject *__pyx_n_s_get_item_rect_min;
static PyObject *__pyx_n_s_get_item_rect_size;
static PyObject *__pyx_n_s_get_mouse_cursor;
static PyObject *__pyx_n_s_get_mouse_drag_delta;
static PyObject *__pyx_n_s_get_mouse_pos;
static PyObject *__pyx_n_s_get_mouse_position;
static PyObject *__pyx_n_s_get_overlay_draw_list;
static PyObject *__pyx_n_s_get_scroll_max_x;
static PyObject *__pyx_n_s_get_scroll_max_y;
static PyObject *__pyx_n_s_get_scroll_x;
static PyObject *__pyx_n_s_get_scroll_y;
static PyObject *__pyx_n_s_get_style;
static PyObject *__pyx_n_s_get_style_color_name;
static PyObject *__pyx_n_s_get_text_line_height;
static PyObject *__pyx_n_s_get_text_line_height_with_spacin;
static PyObject *__pyx_n_s_get_time;
static PyObject *__pyx_n_s_get_version;
static PyObject *__pyx_n_s_get_window_content_region_max;
static PyObject *__pyx_n_s_get_window_content_region_min;
static PyObject *__pyx_n_s_get_window_content_region_width;
static PyObject *__pyx_n_s_get_window_draw_list;
static PyObject *__pyx_n_s_get_window_height;
static PyObject *__pyx_n_s_get_window_position;
static PyObject *__pyx_n_s_get_window_size;
static PyObject *__pyx_n_s_get_window_width;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_glyph_ranges;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_graph_size;
static PyObject *__pyx_n_s_gui_style;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_height_in_items;
static PyObject *__pyx_n_s_hide_text_after_double_hash;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_identifier;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_ignore;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_image_button;
static PyObject *__pyx_n_s_imgui_core;
static PyObject *__pyx_kp_s_imgui_core_pyx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_items;
static PyObject *__pyx_n_s_indent;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_inout_color;
static PyObject *__pyx_n_s_inout_current;
static PyObject *__pyx_n_s_inout_flags;
static PyObject *__pyx_n_s_inout_opened;
static PyObject *__pyx_n_s_inout_selected;
static PyObject *__pyx_n_s_inout_state;
static PyObject *__pyx_n_s_inout_text;
static PyObject *__pyx_n_s_inout_value;
static PyObject *__pyx_n_s_inout_values;
static PyObject *__pyx_n_s_inout_visible;
static PyObject *__pyx_n_s_input_double;
static PyObject *__pyx_n_s_input_float;
static PyObject *__pyx_n_s_input_float2;
static PyObject *__pyx_n_s_input_float3;
static PyObject *__pyx_n_s_input_float4;
static PyObject *__pyx_n_s_input_int;
static PyObject *__pyx_n_s_input_int2;
static PyObject *__pyx_n_s_input_int3;
static PyObject *__pyx_n_s_input_int4;
static PyObject *__pyx_n_s_input_text;
static PyObject *__pyx_n_s_input_text_multiline;
static PyObject *__pyx_n_s_invisible_button;
static PyObject *__pyx_n_s_io;
static PyObject *__pyx_n_s_is_any_item_active;
static PyObject *__pyx_n_s_is_any_item_focused;
static PyObject *__pyx_n_s_is_any_item_hovered;
static PyObject *__pyx_n_s_is_item_active;
static PyObject *__pyx_n_s_is_item_clicked;
static PyObject *__pyx_n_s_is_item_focused;
static PyObject *__pyx_n_s_is_item_hovered;
static PyObject *__pyx_n_s_is_item_visible;
static PyObject *__pyx_n_s_is_mouse_clicked;
static PyObject *__pyx_n_s_is_mouse_double_clicked;
static PyObject *__pyx_n_s_is_mouse_down;
static PyObject *__pyx_n_s_is_mouse_dragging;
static PyObject *__pyx_n_s_is_mouse_hovering_rect;
static PyObject *__pyx_n_s_is_mouse_released;
static PyObject *__pyx_n_s_is_rect_visible;
static PyObject *__pyx_n_s_is_window_appearing;
static PyObject *__pyx_n_s_is_window_collapsed;
static PyObject *__pyx_n_s_is_window_focused;
static PyObject *__pyx_n_s_is_window_hovered;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iterator;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip_longest;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_label_text;
static PyObject *__pyx_n_s_listbox;
static PyObject *__pyx_n_s_listbox_footer;
static PyObject *__pyx_n_s_listbox_header;
static PyObject *__pyx_n_s_local_pos;
static PyObject *__pyx_n_s_lock_threshold;
static PyObject *__pyx_n_s_lower_right_x;
static PyObject *__pyx_n_s_lower_right_y;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_value;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_menu_item;
static PyObject *__pyx_n_s_min_value;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mouse_button;
static PyObject *__pyx_n_s_mouse_cursor_type;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_frame;
static PyObject *__pyx_n_s_new_line;
static PyObject *__pyx_n_s_next_column;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num_segments;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_n_s_offset_x;
static PyObject *__pyx_n_s_open_popup;
static PyObject *__pyx_n_s_opened;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_overlay;
static PyObject *__pyx_n_s_overlay_text;
static PyObject *__pyx_n_s_overlay_text_b;
static PyObject *__pyx_n_s_overlay_text_ptr;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_kp_s_pair_param_must_be_length_of_2;
static PyObject *__pyx_n_s_payload;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pivot_x;
static PyObject *__pyx_n_s_pivot_y;
static PyObject *__pyx_n_s_plot_histogram;
static PyObject *__pyx_n_s_plot_lines;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_pop_font;
static PyObject *__pyx_n_s_pop_id;
static PyObject *__pyx_n_s_pop_text_wrap_pos;
static PyObject *__pyx_n_s_pop_text_wrap_position;
static PyObject *__pyx_n_s_pos_x;
static PyObject *__pyx_n_s_pos_y;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_power;
static PyObject *__pyx_n_s_progress_bar;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_push_font;
static PyObject *__pyx_n_s_push_id;
static PyObject *__pyx_n_s_push_text_wrap_pos;
static PyObject *__pyx_n_s_push_text_wrap_position;
static PyObject *__pyx_n_s_py_colored;
static PyObject *__pyx_n_s_py_font;
static PyObject *__pyx_n_s_py_index_buffer_index_size;
static PyObject *__pyx_n_s_py_istyled;
static PyObject *__pyx_n_s_py_scoped;
static PyObject *__pyx_n_s_py_string;
static PyObject *__pyx_n_s_py_styled;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_col_off;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_pos_off;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_size;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_uv_offs;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_s_quadruple_param_must_be_length_o;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_r_max_x;
static PyObject *__pyx_n_s_r_max_y;
static PyObject *__pyx_n_s_r_min_x;
static PyObject *__pyx_n_s_r_min_y;
static PyObject *__pyx_n_s_radio_button;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_render;
static PyObject *__pyx_n_s_repeat;
static PyObject *__pyx_n_s_require_pointer;
static PyObject *__pyx_n_s_reset_mouse_drag_delta;
static PyObject *__pyx_n_s_rounding;
static PyObject *__pyx_n_s_rounding_corners_flags;
static PyObject *__pyx_kp_s_s_improperly_initialized;
static PyObject *__pyx_n_s_same_line;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_scale_max;
static PyObject *__pyx_n_s_scale_min;
static PyObject *__pyx_n_s_screen_pos;
static PyObject *__pyx_n_s_scroll_x;
static PyObject *__pyx_n_s_scroll_y;
static PyObject *__pyx_n_s_selectable;
static PyObject *__pyx_n_s_selected;
static PyObject *__pyx_kp_s_self__ptr_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_ranges_ptr_cannot_be_conver;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_separator;
static PyObject *__pyx_n_s_set_clipboard_text_fn;
static PyObject *__pyx_n_s_set_column_offset;
static PyObject *__pyx_n_s_set_column_width;
static PyObject *__pyx_n_s_set_current_context;
static PyObject *__pyx_n_s_set_cursor_pos;
static PyObject *__pyx_n_s_set_cursor_pos_x;
static PyObject *__pyx_n_s_set_cursor_pos_y;
static PyObject *__pyx_n_s_set_cursor_position;
static PyObject *__pyx_n_s_set_cursor_screen_pos;
static PyObject *__pyx_n_s_set_cursor_screen_position;
static PyObject *__pyx_n_s_set_drag_drop_payload;
static PyObject *__pyx_n_s_set_item_allow_overlap;
static PyObject *__pyx_n_s_set_item_default_focus;
static PyObject *__pyx_n_s_set_keyboard_focus_here;
static PyObject *__pyx_n_s_set_mouse_cursor;
static PyObject *__pyx_n_s_set_next_window_bg_alpha;
static PyObject *__pyx_n_s_set_next_window_collapsed;
static PyObject *__pyx_n_s_set_next_window_content_size;
static PyObject *__pyx_n_s_set_next_window_focus;
static PyObject *__pyx_n_s_set_next_window_position;
static PyObject *__pyx_n_s_set_next_window_size;
static PyObject *__pyx_n_s_set_scroll_from_pos_y;
static PyObject *__pyx_n_s_set_scroll_here;
static PyObject *__pyx_n_s_set_scroll_x;
static PyObject *__pyx_n_s_set_scroll_y;
static PyObject *__pyx_n_s_set_tooltip;
static PyObject *__pyx_n_s_set_window_collapsed;
static PyObject *__pyx_n_s_set_window_collapsed_labeled;
static PyObject *__pyx_n_s_set_window_focus;
static PyObject *__pyx_n_s_set_window_focus_labeled;
static PyObject *__pyx_n_s_set_window_font_scale;
static PyObject *__pyx_n_s_set_window_position;
static PyObject *__pyx_n_s_set_window_position_labeled;
static PyObject *__pyx_n_s_set_window_size;
static PyObject *__pyx_n_s_set_window_size_named;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shared_font_atlas;
static PyObject *__pyx_n_s_shortcut;
static PyObject *__pyx_n_s_show_alpha;
static PyObject *__pyx_n_s_show_demo_window;
static PyObject *__pyx_n_s_show_font_selector;
static PyObject *__pyx_n_s_show_metrics_window;
static PyObject *__pyx_n_s_show_style_editor;
static PyObject *__pyx_n_s_show_style_selector;
static PyObject *__pyx_n_s_show_test_window;
static PyObject *__pyx_n_s_show_user_guide;
static PyObject *__pyx_n_s_signatures;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_size_height;
static PyObject *__pyx_n_s_size_pixels;
static PyObject *__pyx_n_s_size_width;
static PyObject *__pyx_n_s_slider_angle;
static PyObject *__pyx_n_s_slider_float;
static PyObject *__pyx_n_s_slider_float2;
static PyObject *__pyx_n_s_slider_float3;
static PyObject *__pyx_n_s_slider_float4;
static PyObject *__pyx_n_s_slider_int;
static PyObject *__pyx_n_s_slider_int2;
static PyObject *__pyx_n_s_slider_int3;
static PyObject *__pyx_n_s_slider_int4;
static PyObject *__pyx_n_s_small_button;
static PyObject *__pyx_n_s_spacing;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_x;
static PyObject *__pyx_n_s_start_y;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_step_fast;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_str_id;
static PyObject *__pyx_n_s_stride;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_style;
static PyObject *__pyx_n_s_style_colors_classic;
static PyObject *__pyx_n_s_style_colors_dark;
static PyObject *__pyx_n_s_style_colors_light;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_text_colored;
static PyObject *__pyx_n_s_text_disabled;
static PyObject *__pyx_n_s_text_unformatted;
static PyObject *__pyx_n_s_text_wrapped;
static PyObject *__pyx_n_s_texture_id;
static PyObject *__pyx_n_s_thickness;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tint_color;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_n_s_tree_node;
static PyObject *__pyx_n_s_tree_pop;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unindent;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upper_left_x;
static PyObject *__pyx_n_s_upper_left_y;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_uv0;
static PyObject *__pyx_n_s_uv1;
static PyObject *__pyx_n_s_uv_a;
static PyObject *__pyx_n_s_uv_b;
static PyObject *__pyx_n_s_v_slider_float;
static PyObject *__pyx_n_s_v_slider_int;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_value0;
static PyObject *__pyx_n_s_value1;
static PyObject *__pyx_n_s_value2;
static PyObject *__pyx_n_s_value3;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_values_count;
static PyObject *__pyx_n_s_values_offset;
static PyObject *__pyx_n_s_var;
static PyObject *__pyx_n_s_variable;
static PyObject *__pyx_n_s_variables_and_values;
static PyObject *__pyx_n_s_visible;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_wrap_pos_x;
static PyObject *__pyx_n_s_wrap_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zip_longest;
static PyObject *__pyx_pf_5imgui_4core_13_ImGuiContext___eq__(struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_self, struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5imgui_4core_13_ImGuiContext_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_13_ImGuiContext_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10texture_id___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_9clip_rect___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10elem_count___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_add_line(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_start_x, float __pyx_v_start_y, float __pyx_v_end_x, float __pyx_v_end_y, ImU32 __pyx_v_col, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_2add_rect(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_4add_rect_filled(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_6add_circle(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, int __pyx_v_num_segments, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_8add_circle_filled(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, ImU32 __pyx_v_num_segments); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_10add_text(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_pos_x, float __pyx_v_pos_y, ImU32 __pyx_v_col, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_12add_image(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_texture_id, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_uv_a, PyObject *__pyx_v_uv_b, ImU32 __pyx_v_col); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_14add_polyline(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_points, ImU32 __pyx_v_col, bool __pyx_v_closed, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_16channels_split(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, int __pyx_v_channels_count); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_18channels_set_current(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_20channels_merge(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_8commands___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_7_Colors___cinit__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_7_Colors_2__init__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_gui_style); /* proto */
static PyObject *__pyx_pf_5imgui_4core_7_Colors_4__getitem__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable); /* proto */
static int __pyx_pf_5imgui_4core_7_Colors_6__setitem__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_7_Colors_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_7_Colors_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle___cinit__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static void __pyx_pf_5imgui_4core_8GuiStyle_2__dealloc__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_4__eq__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_6create(void); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_5alpha___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_5alpha_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18window_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18window_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14child_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14child_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17child_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_17child_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14popup_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14popup_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17popup_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_17popup_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18window_title_align___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18window_title_align_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13frame_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17frame_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_17frame_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_12item_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17button_text_align___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_17button_text_align_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18mouse_cursor_scale___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18mouse_cursor_scale_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17anti_aliased_fill___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_17anti_aliased_fill_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_8color(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, ImGuiCol __pyx_v_variable); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_6colors___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_9_DrawData___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_2_require_pointer(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_4deindex_all_buffers(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_6scale_clip_rects(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_5valid___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_9cmd_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_vtx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_idx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_14commands_lists___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_5_Font___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_5_Font_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_10_FontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_2_require_pointer(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_4add_font_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_filename, float __pyx_v_size_pixels, struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_glyph_ranges); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_8clear_tex_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10clear_input_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_12clear_fonts(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_14clear(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese_full(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_24get_glyph_ranges_chinese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_26get_glyph_ranges_cyrillic(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_28get_glyph_ranges_latin(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_30get_tex_data_as_alpha8(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_32get_tex_data_as_rgba32(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10texture_id___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id_2__set__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_13texture_width___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_14texture_height___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_3_IO___init__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_12config_flags___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_12config_flags_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImGuiConfigFlags __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_13backend_flags___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_13backend_flags_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImGuiBackendFlags __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_12display_size___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_12display_size_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_10delta_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_10delta_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_time); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_15ini_saving_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_13log_file_name___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_13log_file_name_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_13ini_file_name___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_13ini_file_name_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_map___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_16key_repeat_delay___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_15key_repeat_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_5fonts___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_17font_global_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_17font_global_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_16display_fb_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_16display_fb_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_min___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_19display_visible_min_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_max___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_19display_visible_max_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_24config_mac_osx_behaviors___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_24config_mac_osx_behaviors_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_19config_cursor_blink___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_19config_cursor_blink_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_32config_resize_windows_from_edges___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_32config_resize_windows_from_edges_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_21get_clipboard_text_fn___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_21get_clipboard_text_fn_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_21set_clipboard_text_fn___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_21set_clipboard_text_fn_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9mouse_pos___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_9mouse_pos_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_10mouse_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_11mouse_wheel___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_11mouse_wheel_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_22mouse_wheel_horizontal___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_22mouse_wheel_horizontal_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_8key_ctrl___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_8key_ctrl_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_shift___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_9key_shift_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_alt___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_7key_alt_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_super___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_9key_super_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9keys_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_2add_input_character(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImWchar __pyx_v_c); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_4add_input_characters_utf8(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_utf8_chars); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_6clear_input_characters(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_18want_capture_mouse___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_21want_capture_keyboard___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_15want_text_input___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_18want_set_mouse_pos___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_21want_save_ini_setting___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_10nav_active___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_11nav_visible___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9framerate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_23metrics_render_vertices___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_22metrics_active_windows___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_11mouse_delta___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_get_io(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_2get_style(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_4new_frame(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_6end_frame(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8render(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10show_user_guide(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_12get_version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_14style_colors_dark(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst); /* proto */
static PyObject *__pyx_pf_5imgui_4core_16style_colors_classic(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst); /* proto */
static PyObject *__pyx_pf_5imgui_4core_18style_colors_light(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst); /* proto */
static PyObject *__pyx_pf_5imgui_4core_20show_style_editor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_style); /* proto */
static PyObject *__pyx_pf_5imgui_4core_22show_demo_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable); /* proto */
static PyObject *__pyx_pf_5imgui_4core_24show_test_window(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_26show_metrics_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable); /* proto */
static PyObject *__pyx_pf_5imgui_4core_28show_style_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_5imgui_4core_30show_font_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_5imgui_4core_32begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_closable, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_34get_draw_data(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_36end(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_38begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults); /* proto */
static PyObject *__pyx_pf_5imgui_4core_501__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_491begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_503__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_493begin_child(CYTHON_UNUSED PyObject *__pyx_self, ImGuiID __pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_40end_child(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_42get_content_region_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_44get_content_region_available(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_46get_content_region_available_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_48get_window_content_region_min(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_50get_window_content_region_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_52get_window_content_region_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_54set_window_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_56set_window_focus_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_5imgui_4core_58set_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_60set_window_size_named(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_62get_scroll_x(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_64get_scroll_y(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_66get_scroll_max_x(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_68get_scroll_max_y(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_70set_scroll_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_x); /* proto */
static PyObject *__pyx_pf_5imgui_4core_72set_scroll_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_y); /* proto */
static PyObject *__pyx_pf_5imgui_4core_74set_window_font_scale(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scale); /* proto */
static PyObject *__pyx_pf_5imgui_4core_76set_next_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_78set_next_window_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_80set_next_window_bg_alpha(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_5imgui_4core_82get_window_draw_list(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_84get_overlay_draw_list(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_86get_window_position(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_88get_window_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_90get_window_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_92get_window_height(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_94set_next_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition, float __pyx_v_pivot_x, float __pyx_v_pivot_y); /* proto */
static PyObject *__pyx_pf_5imgui_4core_96set_next_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_98set_next_window_content_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_100set_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_102set_window_position_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_104set_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_106set_window_collapsed_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_108is_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_110is_window_appearing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_112tree_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, ImGuiTreeNodeFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_114tree_pop(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_116collapsing_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, PyObject *__pyx_v_visible, ImGuiTreeNodeFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_118selectable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_selected, ImGuiTreeNodeFlags __pyx_v_flags, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_120listbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items); /* proto */
static PyObject *__pyx_pf_5imgui_4core_122listbox_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_124listbox_footer(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_126set_tooltip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_128begin_tooltip(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_130end_tooltip(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_132begin_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_134end_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_136begin_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_138end_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_140begin_menu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_5imgui_4core_142end_menu(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_144menu_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_shortcut, bool __pyx_v_selected, PyObject *__pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_5imgui_4core_146open_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_5imgui_4core_148begin_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_150begin_popup_modal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_visible, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_152begin_popup_context_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_154begin_popup_context_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_also_over_items, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_156end_popup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_158close_current_popup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_160text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_162text_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_5imgui_4core_164text_disabled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_166text_wrapped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_168label_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_170text_unformatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_172bullet(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_174bullet_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_176button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_178small_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_5imgui_4core_180arrow_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiDir __pyx_v_direction); /* proto */
static PyObject *__pyx_pf_5imgui_4core_182invisible_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_identifier, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_184color_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_desc_id, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_a, PyObject *__pyx_v_flags, float __pyx_v_width, float __pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_186image_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color, int __pyx_v_frame_padding); /* proto */
static PyObject *__pyx_pf_5imgui_4core_188image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color); /* proto */
static PyObject *__pyx_pf_5imgui_4core_190checkbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_192checkbox_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, unsigned int __pyx_v_flags, unsigned int __pyx_v_flags_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_194radio_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_active); /* proto */
static PyObject *__pyx_pf_5imgui_4core_196combo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items); /* proto */
static PyObject *__pyx_pf_5imgui_4core_198color_edit3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b); /* proto */
static PyObject *__pyx_pf_5imgui_4core_200color_edit4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, bool __pyx_v_show_alpha); /* proto */
static PyObject *__pyx_pf_5imgui_4core_202drag_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_204drag_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_206drag_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_208drag_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_210drag_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_212drag_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_214drag_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_216drag_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_218input_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_220input_text_multiline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, float __pyx_v_width, float __pyx_v_height, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_222input_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_step, float __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_224input_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_226input_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_228input_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_230input_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_step, int __pyx_v_step_fast, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_232input_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_234input_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_236input_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_238input_double(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, double __pyx_v_value, double __pyx_v_step, double __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_240slider_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_242slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_244slider_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_246slider_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_248slider_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_250slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_252slider_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_254slider_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_256slider_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_258v_slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_260v_slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_262plot_lines(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride); /* proto */
static PyObject *__pyx_pf_5imgui_4core_264plot_histogram(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride); /* proto */
static PyObject *__pyx_pf_5imgui_4core_266progress_bar(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_fraction, PyObject *__pyx_v_size, PyObject *__pyx_v_overlay); /* proto */
static PyObject *__pyx_pf_5imgui_4core_268set_item_default_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_270set_keyboard_focus_here(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_offset); /* proto */
static PyObject *__pyx_pf_5imgui_4core_272is_item_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_274is_item_focused(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_276is_item_active(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_278is_item_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_280is_item_visible(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_282is_any_item_hovered(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_284is_any_item_active(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_286is_any_item_focused(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_288get_item_rect_min(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_290get_item_rect_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_292get_item_rect_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_294set_item_allow_overlap(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_296is_window_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_298is_window_focused(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_300is_rect_visible(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_size_width, float __pyx_v_size_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_302get_style_color_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_5imgui_4core_304get_time(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_306is_mouse_hovering_rect(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r_min_x, float __pyx_v_r_min_y, float __pyx_v_r_max_x, float __pyx_v_r_max_y, bool __pyx_v_clip); /* proto */
static PyObject *__pyx_pf_5imgui_4core_308is_mouse_double_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_310is_mouse_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, bool __pyx_v_repeat); /* proto */
static PyObject *__pyx_pf_5imgui_4core_312is_mouse_released(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_314is_mouse_down(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_316is_mouse_dragging(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold); /* proto */
static PyObject *__pyx_pf_5imgui_4core_318get_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold); /* proto */
static PyObject *__pyx_pf_5imgui_4core_320get_mouse_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_322reset_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_324get_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_326set_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self, ImGuiMouseCursor __pyx_v_mouse_cursor_type); /* proto */
static PyObject *__pyx_pf_5imgui_4core_328set_scroll_here(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_center_y_ratio); /* proto */
static PyObject *__pyx_pf_5imgui_4core_330set_scroll_from_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_pos_y, float __pyx_v_center_y_ratio); /* proto */
static PyObject *__pyx_pf_5imgui_4core_332push_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font); /* proto */
static PyObject *__pyx_pf_5imgui_4core_334pop_font(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_336calc_text_size(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, bool __pyx_v_hide_text_after_double_hash, float __pyx_v_wrap_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_338push_style_var(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_340push_style_color(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_5imgui_4core_342pop_style_var(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_5imgui_4core_344get_font_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_346get_style_color_vec_4(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_5imgui_4core_348get_font_tex_uv_white_pixel(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_350get_color_u32_idx(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx, float __pyx_v_alpha_mul); /* proto */
static PyObject *__pyx_pf_5imgui_4core_352get_color_u32_rgba(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_5imgui_4core_354get_color_u32(CYTHON_UNUSED PyObject *__pyx_self, ImU32 __pyx_v_col); /* proto */
static PyObject *__pyx_pf_5imgui_4core_356push_item_width(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_item_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_358pop_item_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_360calculate_item_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_362push_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_wrap_pos_x); /* proto */
static PyObject *__pyx_pf_5imgui_4core_364pop_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_366push_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_allow_focus); /* proto */
static PyObject *__pyx_pf_5imgui_4core_368pop_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_370push_button_repeat(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_repeat); /* proto */
static PyObject *__pyx_pf_5imgui_4core_372pop_button_repeat(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_374pop_style_color(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_5imgui_4core_376separator(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_378same_line(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position, float __pyx_v_spacing); /* proto */
static PyObject *__pyx_pf_5imgui_4core_380new_line(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_382spacing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_384dummy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_386indent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_388unindent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_390columns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_count, PyObject *__pyx_v_identifier, bool __pyx_v_border); /* proto */
static PyObject *__pyx_pf_5imgui_4core_392next_column(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_394get_column_index(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_396get_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index); /* proto */
static PyObject *__pyx_pf_5imgui_4core_398set_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_offset_x); /* proto */
static PyObject *__pyx_pf_5imgui_4core_400get_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index); /* proto */
static PyObject *__pyx_pf_5imgui_4core_402set_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_404get_columns_count(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_406begin_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self, ImGuiDragDropFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_408set_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, PyObject *__pyx_v_data, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_410end_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_412begin_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_414accept_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, ImGuiDragDropFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_416end_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_418begin_group(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_420end_group(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_422get_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_424get_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_426get_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_428set_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_local_pos); /* proto */
static PyObject *__pyx_pf_5imgui_4core_430set_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x); /* proto */
static PyObject *__pyx_pf_5imgui_4core_432set_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_y); /* proto */
static PyObject *__pyx_pf_5imgui_4core_434get_cursor_start_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_436get_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_438set_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_screen_pos); /* proto */
static PyObject *__pyx_pf_5imgui_4core_440align_text_to_frame_padding(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_442get_text_line_height(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_444get_text_line_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_446get_frame_height(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_448get_frame_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_450create_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_shared_font_atlas); /* proto */
static PyObject *__pyx_pf_5imgui_4core_452destroy_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_5imgui_4core_454get_current_context(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_456set_current_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_5imgui_4core_458push_id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id); /* proto */
static PyObject *__pyx_pf_5imgui_4core_460pop_id(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_462_ansifeed_text_ansi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_464_ansifeed_text_ansi_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_5imgui_4core_466_py_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font); /* proto */
static PyObject *__pyx_pf_5imgui_4core_469_py_styled(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_472_py_colored(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_5imgui_4core_475_py_istyled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variables_and_values); /* proto */
static PyObject *__pyx_pf_5imgui_4core_478_py_scoped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id); /* proto */
static PyObject *__pyx_pf_5imgui_4core_481_py_vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_483_py_vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_485_py_vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_487_py_vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_489_py_index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5imgui_4core__Font(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__ImGuiContext(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__DrawCmd(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__DrawList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__Colors(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core_GuiStyle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__DrawData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__StaticGlyphRanges(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__FontAtlas(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__IO(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct___py_font(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_1__py_styled(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_2__py_colored(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_3__py_istyled(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_4__py_scoped(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyString_Type_encode = {0, &__pyx_n_s_encode, 0, 0, 0};
static PyObject *__pyx_float_1_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__29;
static PyObject *__pyx_k__30;
static PyObject *__pyx_k__31;
static ImGuiCond __pyx_k__37;
static ImGuiCond __pyx_k__38;
static ImGuiCond __pyx_k__39;
static ImGuiCond __pyx_k__40;
static ImGuiCond __pyx_k__41;
static ImGuiCond __pyx_k__42;
static ImGuiCond __pyx_k__43;
static ImGuiCond __pyx_k__44;
static ImGuiCond __pyx_k__45;
static ImGuiDir __pyx_k__46;
static float __pyx_k__51;
static float __pyx_k__52;
static int __pyx_k__53;
static float __pyx_k__54;
static float __pyx_k__55;
static int __pyx_k__56;
static float __pyx_k__57;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__79;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__218;
static PyObject *__pyx_tuple__220;
static PyObject *__pyx_tuple__222;
static PyObject *__pyx_tuple__224;
static PyObject *__pyx_tuple__226;
static PyObject *__pyx_tuple__228;
static PyObject *__pyx_tuple__230;
static PyObject *__pyx_tuple__232;
static PyObject *__pyx_tuple__234;
static PyObject *__pyx_tuple__236;
static PyObject *__pyx_tuple__238;
static PyObject *__pyx_tuple__240;
static PyObject *__pyx_tuple__242;
static PyObject *__pyx_tuple__244;
static PyObject *__pyx_tuple__246;
static PyObject *__pyx_tuple__248;
static PyObject *__pyx_tuple__250;
static PyObject *__pyx_tuple__252;
static PyObject *__pyx_tuple__254;
static PyObject *__pyx_tuple__256;
static PyObject *__pyx_tuple__258;
static PyObject *__pyx_tuple__260;
static PyObject *__pyx_tuple__262;
static PyObject *__pyx_tuple__264;
static PyObject *__pyx_tuple__266;
static PyObject *__pyx_tuple__268;
static PyObject *__pyx_tuple__270;
static PyObject *__pyx_tuple__272;
static PyObject *__pyx_tuple__274;
static PyObject *__pyx_tuple__276;
static PyObject *__pyx_tuple__278;
static PyObject *__pyx_tuple__280;
static PyObject *__pyx_tuple__282;
static PyObject *__pyx_tuple__284;
static PyObject *__pyx_tuple__286;
static PyObject *__pyx_tuple__288;
static PyObject *__pyx_tuple__290;
static PyObject *__pyx_tuple__292;
static PyObject *__pyx_tuple__294;
static PyObject *__pyx_tuple__296;
static PyObject *__pyx_tuple__298;
static PyObject *__pyx_tuple__300;
static PyObject *__pyx_tuple__302;
static PyObject *__pyx_tuple__304;
static PyObject *__pyx_tuple__306;
static PyObject *__pyx_tuple__308;
static PyObject *__pyx_tuple__311;
static PyObject *__pyx_tuple__313;
static PyObject *__pyx_tuple__317;
static PyObject *__pyx_tuple__327;
static PyObject *__pyx_tuple__329;
static PyObject *__pyx_tuple__331;
static PyObject *__pyx_tuple__333;
static PyObject *__pyx_tuple__336;
static PyObject *__pyx_tuple__338;
static PyObject *__pyx_tuple__340;
static PyObject *__pyx_tuple__342;
static PyObject *__pyx_tuple__344;
static PyObject *__pyx_tuple__346;
static PyObject *__pyx_tuple__348;
static PyObject *__pyx_tuple__351;
static PyObject *__pyx_tuple__354;
static PyObject *__pyx_tuple__356;
static PyObject *__pyx_tuple__358;
static PyObject *__pyx_tuple__360;
static PyObject *__pyx_tuple__364;
static PyObject *__pyx_tuple__368;
static PyObject *__pyx_tuple__370;
static PyObject *__pyx_tuple__372;
static PyObject *__pyx_tuple__374;
static PyObject *__pyx_tuple__378;
static PyObject *__pyx_tuple__380;
static PyObject *__pyx_tuple__382;
static PyObject *__pyx_tuple__384;
static PyObject *__pyx_tuple__387;
static PyObject *__pyx_tuple__389;
static PyObject *__pyx_tuple__393;
static PyObject *__pyx_tuple__401;
static PyObject *__pyx_tuple__403;
static PyObject *__pyx_tuple__405;
static PyObject *__pyx_tuple__409;
static PyObject *__pyx_tuple__416;
static PyObject *__pyx_tuple__418;
static PyObject *__pyx_tuple__420;
static PyObject *__pyx_tuple__422;
static PyObject *__pyx_tuple__424;
static PyObject *__pyx_tuple__427;
static PyObject *__pyx_tuple__429;
static PyObject *__pyx_tuple__431;
static PyObject *__pyx_tuple__432;
static PyObject *__pyx_tuple__433;
static PyObject *__pyx_tuple__434;
static PyObject *__pyx_tuple__435;
static PyObject *__pyx_tuple__441;
static PyObject *__pyx_tuple__442;
static PyObject *__pyx_tuple__443;
static PyObject *__pyx_tuple__444;
static PyObject *__pyx_tuple__445;
static PyObject *__pyx_tuple__446;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__124;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__128;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__130;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__134;
static PyObject *__pyx_codeobj__136;
static PyObject *__pyx_codeobj__138;
static PyObject *__pyx_codeobj__140;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__144;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__146;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__148;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__165;
static PyObject *__pyx_codeobj__167;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
static PyObject *__pyx_codeobj__174;
static PyObject *__pyx_codeobj__176;
static PyObject *__pyx_codeobj__177;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__180;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__182;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__184;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__188;
static PyObject *__pyx_codeobj__190;
static PyObject *__pyx_codeobj__192;
static PyObject *__pyx_codeobj__194;
static PyObject *__pyx_codeobj__196;
static PyObject *__pyx_codeobj__198;
static PyObject *__pyx_codeobj__200;
static PyObject *__pyx_codeobj__201;
static PyObject *__pyx_codeobj__202;
static PyObject *__pyx_codeobj__204;
static PyObject *__pyx_codeobj__206;
static PyObject *__pyx_codeobj__208;
static PyObject *__pyx_codeobj__210;
static PyObject *__pyx_codeobj__212;
static PyObject *__pyx_codeobj__214;
static PyObject *__pyx_codeobj__215;
static PyObject *__pyx_codeobj__217;
static PyObject *__pyx_codeobj__219;
static PyObject *__pyx_codeobj__221;
static PyObject *__pyx_codeobj__223;
static PyObject *__pyx_codeobj__225;
static PyObject *__pyx_codeobj__227;
static PyObject *__pyx_codeobj__229;
static PyObject *__pyx_codeobj__231;
static PyObject *__pyx_codeobj__233;
static PyObject *__pyx_codeobj__235;
static PyObject *__pyx_codeobj__237;
static PyObject *__pyx_codeobj__239;
static PyObject *__pyx_codeobj__241;
static PyObject *__pyx_codeobj__243;
static PyObject *__pyx_codeobj__245;
static PyObject *__pyx_codeobj__247;
static PyObject *__pyx_codeobj__249;
static PyObject *__pyx_codeobj__251;
static PyObject *__pyx_codeobj__253;
static PyObject *__pyx_codeobj__255;
static PyObject *__pyx_codeobj__257;
static PyObject *__pyx_codeobj__259;
static PyObject *__pyx_codeobj__261;
static PyObject *__pyx_codeobj__263;
static PyObject *__pyx_codeobj__265;
static PyObject *__pyx_codeobj__267;
static PyObject *__pyx_codeobj__269;
static PyObject *__pyx_codeobj__271;
static PyObject *__pyx_codeobj__273;
static PyObject *__pyx_codeobj__275;
static PyObject *__pyx_codeobj__277;
static PyObject *__pyx_codeobj__279;
static PyObject *__pyx_codeobj__281;
static PyObject *__pyx_codeobj__283;
static PyObject *__pyx_codeobj__285;
static PyObject *__pyx_codeobj__287;
static PyObject *__pyx_codeobj__289;
static PyObject *__pyx_codeobj__291;
static PyObject *__pyx_codeobj__293;
static PyObject *__pyx_codeobj__295;
static PyObject *__pyx_codeobj__297;
static PyObject *__pyx_codeobj__299;
static PyObject *__pyx_codeobj__301;
static PyObject *__pyx_codeobj__303;
static PyObject *__pyx_codeobj__305;
static PyObject *__pyx_codeobj__307;
static PyObject *__pyx_codeobj__309;
static PyObject *__pyx_codeobj__310;
static PyObject *__pyx_codeobj__312;
static PyObject *__pyx_codeobj__314;
static PyObject *__pyx_codeobj__315;
static PyObject *__pyx_codeobj__316;
static PyObject *__pyx_codeobj__318;
static PyObject *__pyx_codeobj__319;
static PyObject *__pyx_codeobj__320;
static PyObject *__pyx_codeobj__321;
static PyObject *__pyx_codeobj__322;
static PyObject *__pyx_codeobj__323;
static PyObject *__pyx_codeobj__324;
static PyObject *__pyx_codeobj__325;
static PyObject *__pyx_codeobj__326;
static PyObject *__pyx_codeobj__328;
static PyObject *__pyx_codeobj__330;
static PyObject *__pyx_codeobj__332;
static PyObject *__pyx_codeobj__334;
static PyObject *__pyx_codeobj__335;
static PyObject *__pyx_codeobj__337;
static PyObject *__pyx_codeobj__339;
static PyObject *__pyx_codeobj__341;
static PyObject *__pyx_codeobj__343;
static PyObject *__pyx_codeobj__345;
static PyObject *__pyx_codeobj__347;
static PyObject *__pyx_codeobj__349;
static PyObject *__pyx_codeobj__350;
static PyObject *__pyx_codeobj__352;
static PyObject *__pyx_codeobj__353;
static PyObject *__pyx_codeobj__355;
static PyObject *__pyx_codeobj__357;
static PyObject *__pyx_codeobj__359;
static PyObject *__pyx_codeobj__361;
static PyObject *__pyx_codeobj__362;
static PyObject *__pyx_codeobj__363;
static PyObject *__pyx_codeobj__365;
static PyObject *__pyx_codeobj__366;
static PyObject *__pyx_codeobj__367;
static PyObject *__pyx_codeobj__369;
static PyObject *__pyx_codeobj__371;
static PyObject *__pyx_codeobj__373;
static PyObject *__pyx_codeobj__375;
static PyObject *__pyx_codeobj__376;
static PyObject *__pyx_codeobj__377;
static PyObject *__pyx_codeobj__379;
static PyObject *__pyx_codeobj__381;
static PyObject *__pyx_codeobj__383;
static PyObject *__pyx_codeobj__385;
static PyObject *__pyx_codeobj__386;
static PyObject *__pyx_codeobj__388;
static PyObject *__pyx_codeobj__390;
static PyObject *__pyx_codeobj__391;
static PyObject *__pyx_codeobj__392;
static PyObject *__pyx_codeobj__394;
static PyObject *__pyx_codeobj__395;
static PyObject *__pyx_codeobj__396;
static PyObject *__pyx_codeobj__397;
static PyObject *__pyx_codeobj__398;
static PyObject *__pyx_codeobj__399;
static PyObject *__pyx_codeobj__400;
static PyObject *__pyx_codeobj__402;
static PyObject *__pyx_codeobj__404;
static PyObject *__pyx_codeobj__406;
static PyObject *__pyx_codeobj__407;
static PyObject *__pyx_codeobj__408;
static PyObject *__pyx_codeobj__410;
static PyObject *__pyx_codeobj__411;
static PyObject *__pyx_codeobj__412;
static PyObject *__pyx_codeobj__413;
static PyObject *__pyx_codeobj__414;
static PyObject *__pyx_codeobj__415;
static PyObject *__pyx_codeobj__417;
static PyObject *__pyx_codeobj__419;
static PyObject *__pyx_codeobj__421;
static PyObject *__pyx_codeobj__423;
static PyObject *__pyx_codeobj__425;
static PyObject *__pyx_codeobj__426;
static PyObject *__pyx_codeobj__428;
static PyObject *__pyx_codeobj__430;
static PyObject *__pyx_codeobj__436;
static PyObject *__pyx_codeobj__437;
static PyObject *__pyx_codeobj__438;
static PyObject *__pyx_codeobj__439;
static PyObject *__pyx_codeobj__440;
static PyObject *__pyx_codeobj__447;
/* Late includes */
PyObject *ImGuiError = 0;

/* "imgui/core.pyx":277
 * 
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

static PyObject *__pyx_f_5imgui_4core__bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bytes", 0);

  /* "imgui/core.pyx":278
 * 
 * cdef bytes _bytes(str text):
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_text, __pyx_kp_s_utf_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":277
 * 
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":281
 * 
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))
 * 
 */

static PyObject *__pyx_f_5imgui_4core__from_bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_bytes", 0);

  /* "imgui/core.pyx":282
 * 
 * cdef str _from_bytes(bytes text):
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_errors, __pyx_n_s_ignore) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":281
 * 
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core._from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":285
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

static PyObject *__pyx_f_5imgui_4core__cast_ImVec2_tuple(ImVec2 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec2_tuple", 0);

  /* "imgui/core.pyx":286
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa
 *     return Vec2(vec.x, vec.y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":285
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core._cast_ImVec2_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":289
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_5imgui_4core__cast_tuple_ImVec2(PyObject *__pyx_v_pair) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec2", 0);

  /* "imgui/core.pyx":292
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_pair); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "imgui/core.pyx":293
 * 
 *     if len(pair) != 2:
 *         raise ValueError("pair param must be length of 2")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y = pair
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 293, __pyx_L1_error)

    /* "imgui/core.pyx":292
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  }

  /* "imgui/core.pyx":295
 *         raise ValueError("pair param must be length of 2")
 * 
 *     vec.x, vec.y = pair             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_pair))) || (PyList_CheckExact(__pyx_v_pair))) {
    PyObject* sequence = __pyx_v_pair;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 295, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_v_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 295, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 295, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vec.x = __pyx_t_7;
  __pyx_v_vec.y = __pyx_t_8;

  /* "imgui/core.pyx":297
 *     vec.x, vec.y = pair
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":289
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core._cast_tuple_ImVec2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":300
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_5imgui_4core__cast_args_ImVec2(float __pyx_v_x, float __pyx_v_y) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("_cast_args_ImVec2", 0);

  /* "imgui/core.pyx":303
 *     cdef cimgui.ImVec2 vec
 * 
 *     vec.x, vec.y = x, y             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;

  /* "imgui/core.pyx":305
 *     vec.x, vec.y = x, y
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":300
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":308
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_5imgui_4core__cast_tuple_ImVec4(PyObject *__pyx_v_quadruple) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec4", 0);

  /* "imgui/core.pyx":311
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_quadruple); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "imgui/core.pyx":312
 * 
 *     if len(quadruple) != 4:
 *         raise ValueError("quadruple param must be length of 4")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 312, __pyx_L1_error)

    /* "imgui/core.pyx":311
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  }

  /* "imgui/core.pyx":314
 *         raise ValueError("quadruple param must be length of 4")
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_quadruple))) || (PyList_CheckExact(__pyx_v_quadruple))) {
    PyObject* sequence = __pyx_v_quadruple;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 314, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 314, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_v_quadruple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_vec.x = __pyx_t_9;
  __pyx_v_vec.y = __pyx_t_10;
  __pyx_v_vec.z = __pyx_t_11;
  __pyx_v_vec.w = __pyx_t_12;

  /* "imgui/core.pyx":316
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":308
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("imgui.core._cast_tuple_ImVec4", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":319
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_5imgui_4core__cast_args_ImVec4(float __pyx_v_x, float __pyx_v_y, float __pyx_v_z, float __pyx_v_w) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  __Pyx_RefNannySetupContext("_cast_args_ImVec4", 0);

  /* "imgui/core.pyx":322
 *     cdef cimgui.ImVec4 vec
 * 
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_t_3 = __pyx_v_z;
  __pyx_t_4 = __pyx_v_w;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;
  __pyx_v_vec.z = __pyx_t_3;
  __pyx_v_vec.w = __pyx_t_4;

  /* "imgui/core.pyx":324
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":319
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":327
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

static PyObject *__pyx_f_5imgui_4core__cast_ImVec4_tuple(ImVec4 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec4_tuple", 0);

  /* "imgui/core.pyx":328
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.w); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":327
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core._cast_ImVec4_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":335
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_5imgui_4core_13_ImGuiContext_from_ptr(ImGuiContext *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":336
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":337
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _ImGuiContext()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":336
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "imgui/core.pyx":339
 *             return None
 * 
 *         instance = _ImGuiContext()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__ImGuiContext)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__ImGuiContext *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":340
 * 
 *         instance = _ImGuiContext()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":341
 *         instance = _ImGuiContext()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":335
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._ImGuiContext.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":343
 *         return instance
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_13_ImGuiContext_1__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_13_ImGuiContext_1__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5imgui_4core__ImGuiContext, 1, "other", 0))) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_13_ImGuiContext___eq__(((struct __pyx_obj_5imgui_4core__ImGuiContext *)__pyx_v_self), ((struct __pyx_obj_5imgui_4core__ImGuiContext *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_13_ImGuiContext___eq__(struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_self, struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "imgui/core.pyx":344
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):
 *         return other._ptr == self._ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_other->_ptr == __pyx_v_self->_ptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":343
 *         return instance
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._ImGuiContext.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_13_ImGuiContext_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_13_ImGuiContext_2__reduce_cython__[] = "_ImGuiContext.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_13_ImGuiContext_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_13_ImGuiContext_2__reduce_cython__(((struct __pyx_obj_5imgui_4core__ImGuiContext *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_13_ImGuiContext_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._ImGuiContext.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_13_ImGuiContext_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_13_ImGuiContext_4__setstate_cython__[] = "_ImGuiContext.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_13_ImGuiContext_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_13_ImGuiContext_4__setstate_cython__(((struct __pyx_obj_5imgui_4core__ImGuiContext *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_13_ImGuiContext_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._ImGuiContext.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":353
 *     #       see: http://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#fast-instantiation
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_5imgui_4core_8_DrawCmd_from_ptr(ImDrawCmd *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":354
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":355
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _DrawCmd()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":354
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "imgui/core.pyx":357
 *             return None
 * 
 *         instance = _DrawCmd()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__DrawCmd)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":358
 * 
 *         instance = _DrawCmd()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":359
 *         instance = _DrawCmd()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":353
 *     #       see: http://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#fast-instantiation
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._DrawCmd.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":362
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         return <object>self._ptr.TextureId
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_10texture_id___get__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10texture_id___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":363
 *     @property
 *     def texture_id(self):
 *         return <object>self._ptr.TextureId             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_ptr->TextureId));
  __pyx_r = ((PyObject *)__pyx_v_self->_ptr->TextureId);
  goto __pyx_L0;

  /* "imgui/core.pyx":362
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         return <object>self._ptr.TextureId
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":366
 * 
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_9clip_rect___get__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_9clip_rect___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":367
 *     @property
 *     def clip_rect(self):
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec4_tuple(__pyx_v_self->_ptr->ClipRect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":366
 * 
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.clip_rect.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":370
 * 
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ElemCount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_10elem_count___get__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10elem_count___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":371
 *     @property
 *     def elem_count(self):
 *         return self._ptr.ElemCount             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_ptr->ElemCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":370
 * 
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ElemCount
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.elem_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_8_DrawCmd___reduce_cython__[] = "_DrawCmd.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd___reduce_cython__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_8_DrawCmd_2__setstate_cython__[] = "_DrawCmd.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_2__setstate_cython__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":382
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_5imgui_4core_9_DrawList_from_ptr(ImDrawList *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":383
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":384
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _DrawList()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":383
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "imgui/core.pyx":386
 *             return None
 * 
 *         instance = _DrawList()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__DrawList)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":387
 * 
 *         instance = _DrawList()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":388
 *         instance = _DrawList()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":382
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._DrawList.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":391
 * 
 *     @property
 *     def cmd_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_size___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":392
 *     @property
 *     def cmd_buffer_size(self):
 *         return self._ptr.CmdBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->CmdBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":391
 * 
 *     @property
 *     def cmd_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.cmd_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":395
 * 
 *     @property
 *     def cmd_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.CmdBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_data___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":396
 *     @property
 *     def cmd_buffer_data(self):
 *         return <uintptr_t>self._ptr.CmdBuffer.Data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->CmdBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":395
 * 
 *     @property
 *     def cmd_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.CmdBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.cmd_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":399
 * 
 *     @property
 *     def vtx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.VtxBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_size___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":400
 *     @property
 *     def vtx_buffer_size(self):
 *         return self._ptr.VtxBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->VtxBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":399
 * 
 *     @property
 *     def vtx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.VtxBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.vtx_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":403
 * 
 *     @property
 *     def vtx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.VtxBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_data___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":404
 *     @property
 *     def vtx_buffer_data(self):
 *         return <uintptr_t>self._ptr.VtxBuffer.Data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->VtxBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":403
 * 
 *     @property
 *     def vtx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.VtxBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.vtx_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":407
 * 
 *     @property
 *     def idx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IdxBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_size___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":408
 *     @property
 *     def idx_buffer_size(self):
 *         return self._ptr.IdxBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->IdxBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":407
 * 
 *     @property
 *     def idx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IdxBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.idx_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":411
 * 
 *     @property
 *     def idx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.IdxBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_data___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":412
 *     @property
 *     def idx_buffer_data(self):
 *         return <uintptr_t>self._ptr.IdxBuffer.Data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->IdxBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":411
 * 
 *     @property
 *     def idx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.IdxBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.idx_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":415
 * 
 * 
 *     def add_line(             # <<<<<<<<<<<<<<
 *             self,
 *             float start_x, float start_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_1add_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_add_line[] = "_DrawList.add_line(self, float start_x, float start_y, float end_x, float end_y, ImU32 col, float thickness=1.0)\nAdd a straight line to the draw list.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Line example\")\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_line(20, 35, 180, 80, imgui.get_color_u32_rgba(1,1,0,1), 3)\n            draw_list.add_line(180, 35, 20, 80, imgui.get_color_u32_rgba(1,0,0,1), 3)\n            imgui.end()\n\n        Args:\n            start_x (float): X coordinate of first point\n            start_y (float): Y coordinate of first point\n            end_x (float): X coordinate of second point\n            end_y (float): Y coordinate of second point\n            col (ImU32): RGBA color specification\n            thickness (float): Line thickness in pixels\n\n        .. wraps::\n            void ImDrawList::AddLine(\n                const ImVec2& a,\n                const ImVec2& b,\n                ImU32 col,\n                float thickness = 1.0f\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_1add_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_start_x;
  float __pyx_v_start_y;
  float __pyx_v_end_x;
  float __pyx_v_end_y;
  ImU32 __pyx_v_col;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_line (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_x,&__pyx_n_s_start_y,&__pyx_n_s_end_x,&__pyx_n_s_end_y,&__pyx_n_s_col,&__pyx_n_s_thickness,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 1); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 2); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 3); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 4); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_line") < 0)) __PYX_ERR(0, 415, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_start_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 417, __pyx_L3_error)
    __pyx_v_start_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_start_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 417, __pyx_L3_error)
    __pyx_v_end_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_end_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
    __pyx_v_end_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_end_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 415, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_add_line(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_start_x, __pyx_v_start_y, __pyx_v_end_x, __pyx_v_end_y, __pyx_v_col, __pyx_v_thickness);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_add_line(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_start_x, float __pyx_v_start_y, float __pyx_v_end_x, float __pyx_v_end_y, ImU32 __pyx_v_col, float __pyx_v_thickness) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_line", 0);

  /* "imgui/core.pyx":453
 *         """
 *         self._ptr.AddLine(
 *             _cast_args_ImVec2(start_x, start_y),             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(end_x, end_y),
 *             col,
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_start_x, __pyx_v_start_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)

  /* "imgui/core.pyx":454
 *         self._ptr.AddLine(
 *             _cast_args_ImVec2(start_x, start_y),
 *             _cast_args_ImVec2(end_x, end_y),             # <<<<<<<<<<<<<<
 *             col,
 *             thickness,
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_end_x, __pyx_v_end_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)

  /* "imgui/core.pyx":452
 *             )
 *         """
 *         self._ptr.AddLine(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(start_x, start_y),
 *             _cast_args_ImVec2(end_x, end_y),
 */
  try {
    __pyx_v_self->_ptr->AddLine(__pyx_t_1, __pyx_t_2, __pyx_v_col, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 452, __pyx_L1_error)
  }

  /* "imgui/core.pyx":415
 * 
 * 
 *     def add_line(             # <<<<<<<<<<<<<<
 *             self,
 *             float start_x, float start_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":459
 *         )
 * 
 *     def add_rect(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_3add_rect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_2add_rect[] = "_DrawList.add_rect(self, float upper_left_x, float upper_left_y, float lower_right_x, float lower_right_y, ImU32 col, float rounding=0.0, ImGuiWindowFlags rounding_corners_flags=0xF, float thickness=1.0)\nAdd a rectangle outline to the draw list.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Rect example\")\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_rect(20, 35, 90, 80, imgui.get_color_u32_rgba(1,1,0,1), thickness=3)\n            draw_list.add_rect(110, 35, 180, 80, imgui.get_color_u32_rgba(1,0,0,1), rounding=5, thickness=3)\n            imgui.end()\n\n        Args:\n            upper_left_x (float): X coordinate of top-left corner\n            upper_left_y (float): Y coordinate of top-left corner\n            lower_right_x (float): X coordinate of lower-right corner\n            lower_right_y (float): Y coordinate of lower-right corner\n            col (ImU32): RGBA color specification\n            rounding (float): Degree of rounding, defaults to 0.0\n            rounding_corners_flags (ImDrawCornerFlags): Draw flags, defaults to ImDrawCornerFlags_ALL\n            thickness (float): Line thickness, defaults to 1.0\n\n        .. wraps::\n            void ImDrawList::AddRect(\n                const ImVec2& a,\n                const ImVec2& b,\n                ImU32 col,\n                float rounding = 0.0f,\n                int rounding_corners_flags = ImDrawCornerFlags_All,\n                float thickness = 1.0f\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_3add_rect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_upper_left_x;
  float __pyx_v_upper_left_y;
  float __pyx_v_lower_right_x;
  float __pyx_v_lower_right_y;
  ImU32 __pyx_v_col;
  float __pyx_v_rounding;
  ImGuiWindowFlags __pyx_v_rounding_corners_flags;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upper_left_x,&__pyx_n_s_upper_left_y,&__pyx_n_s_lower_right_x,&__pyx_n_s_lower_right_y,&__pyx_n_s_col,&__pyx_n_s_rounding,&__pyx_n_s_rounding_corners_flags,&__pyx_n_s_thickness,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 1); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 2); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 3); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 4); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding_corners_flags);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_rect") < 0)) __PYX_ERR(0, 459, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_upper_left_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_upper_left_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 461, __pyx_L3_error)
    __pyx_v_upper_left_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_upper_left_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 461, __pyx_L3_error)
    __pyx_v_lower_right_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_lower_right_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L3_error)
    __pyx_v_lower_right_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_lower_right_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_rounding = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_rounding == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L3_error)
    } else {
      __pyx_v_rounding = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_rounding_corners_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[6]); if (unlikely((__pyx_v_rounding_corners_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L3_error)
    } else {
      __pyx_v_rounding_corners_flags = ((ImGuiWindowFlags)0xF);
    }
    if (values[7]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 459, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_2add_rect(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_upper_left_x, __pyx_v_upper_left_y, __pyx_v_lower_right_x, __pyx_v_lower_right_y, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags, __pyx_v_thickness);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_2add_rect(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags, float __pyx_v_thickness) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_rect", 0);

  /* "imgui/core.pyx":503
 *         """
 *         self._ptr.AddRect(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 *             col,
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_upper_left_x, __pyx_v_upper_left_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)

  /* "imgui/core.pyx":504
 *         self._ptr.AddRect(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),             # <<<<<<<<<<<<<<
 *             col,
 *             rounding,
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_lower_right_x, __pyx_v_lower_right_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L1_error)

  /* "imgui/core.pyx":502
 *             )
 *         """
 *         self._ptr.AddRect(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 */
  try {
    __pyx_v_self->_ptr->AddRect(__pyx_t_1, __pyx_t_2, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 502, __pyx_L1_error)
  }

  /* "imgui/core.pyx":459
 *         )
 * 
 *     def add_rect(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":511
 *         )
 * 
 *     def add_rect_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_5add_rect_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_4add_rect_filled[] = "_DrawList.add_rect_filled(self, float upper_left_x, float upper_left_y, float lower_right_x, float lower_right_y, ImU32 col, float rounding=0.0, ImGuiWindowFlags rounding_corners_flags=0xF)\nAdd a filled rectangle to the draw list.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Filled rect example\")\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_rect_filled(20, 35, 90, 80, imgui.get_color_u32_rgba(1,1,0,1))\n            draw_list.add_rect_filled(110, 35, 180, 80, imgui.get_color_u32_rgba(1,0,0,1), 5)\n            imgui.end()\n\n        Args:\n            upper_left_x (float): X coordinate of top-left corner\n            upper_left_y (float): Y coordinate of top-left corner\n            lower_right_x (float): X coordinate of lower-right corner\n            lower_right_y (float): Y coordinate of lower-right corner\n            col (ImU32): RGBA color specification\n            rounding (float): Degree of rounding, defaults to 0.0\n            rounding_corners_flags (ImDrawCornerFlags): Draw flags, defaults to ImDrawCornerFlags_ALL\n\n        .. wraps::\n            void ImDrawList::AddRectFilled(\n                const ImVec2& a,\n                const ImVec2& b,\n                ImU32 col,\n                float rounding = 0.0f,\n                int rounding_corners_flags = ImDrawCornerFlags_All\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_5add_rect_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_upper_left_x;
  float __pyx_v_upper_left_y;
  float __pyx_v_lower_right_x;
  float __pyx_v_lower_right_y;
  ImU32 __pyx_v_col;
  float __pyx_v_rounding;
  ImGuiWindowFlags __pyx_v_rounding_corners_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rect_filled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upper_left_x,&__pyx_n_s_upper_left_y,&__pyx_n_s_lower_right_x,&__pyx_n_s_lower_right_y,&__pyx_n_s_col,&__pyx_n_s_rounding,&__pyx_n_s_rounding_corners_flags,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 1); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 2); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 3); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 4); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding_corners_flags);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_rect_filled") < 0)) __PYX_ERR(0, 511, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_upper_left_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_upper_left_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L3_error)
    __pyx_v_upper_left_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_upper_left_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L3_error)
    __pyx_v_lower_right_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_lower_right_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L3_error)
    __pyx_v_lower_right_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_lower_right_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_rounding = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_rounding == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L3_error)
    } else {
      __pyx_v_rounding = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_rounding_corners_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[6]); if (unlikely((__pyx_v_rounding_corners_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    } else {
      __pyx_v_rounding_corners_flags = ((ImGuiWindowFlags)0xF);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 511, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_rect_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_4add_rect_filled(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_upper_left_x, __pyx_v_upper_left_y, __pyx_v_lower_right_x, __pyx_v_lower_right_y, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_4add_rect_filled(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_rect_filled", 0);

  /* "imgui/core.pyx":552
 *         """
 *         self._ptr.AddRectFilled(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 *             col,
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_upper_left_x, __pyx_v_upper_left_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L1_error)

  /* "imgui/core.pyx":553
 *         self._ptr.AddRectFilled(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),             # <<<<<<<<<<<<<<
 *             col,
 *             rounding,
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_lower_right_x, __pyx_v_lower_right_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L1_error)

  /* "imgui/core.pyx":551
 *             )
 *         """
 *         self._ptr.AddRectFilled(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 */
  try {
    __pyx_v_self->_ptr->AddRectFilled(__pyx_t_1, __pyx_t_2, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 551, __pyx_L1_error)
  }

  /* "imgui/core.pyx":511
 *         )
 * 
 *     def add_rect_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_rect_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":559
 *         )
 * 
 *     def add_circle(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_7add_circle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_6add_circle[] = "_DrawList.add_circle(self, float centre_x, float centre_y, float radius, ImU32 col, int num_segments=12, float thickness=1.0)\nAdd a circle to the draw list.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Circle example\")\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_circle(100, 60, 30, imgui.get_color_u32_rgba(1,1,0,1), thickness=3)\n            imgui.end()\n\n        Args:\n            centre_x (float): circle centre coordinates\n            centre_y (float): circle centre coordinates\n            radius (float): circle radius\n            col (ImU32): RGBA color specification\n            num_segments (ImU32): Number of segments, defaults to 12\n            thickness (float): Line thickness\n\n        .. wraps::\n            void ImDrawList::AddCircle(\n                const ImVec2& centre,\n                float radius,\n                ImU32 col,\n                int num_segments = 12,\n                float thickness = 1.0\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_7add_circle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_centre_x;
  float __pyx_v_centre_y;
  float __pyx_v_radius;
  ImU32 __pyx_v_col;
  int __pyx_v_num_segments;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_circle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_centre_x,&__pyx_n_s_centre_y,&__pyx_n_s_radius,&__pyx_n_s_col,&__pyx_n_s_num_segments,&__pyx_n_s_thickness,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, 1); __PYX_ERR(0, 559, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, 2); __PYX_ERR(0, 559, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, 3); __PYX_ERR(0, 559, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_segments);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_circle") < 0)) __PYX_ERR(0, 559, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_centre_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_centre_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L3_error)
    __pyx_v_centre_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_centre_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[3]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_num_segments = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_num_segments == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L3_error)
    } else {
      __pyx_v_num_segments = ((int)12);
    }
    if (values[5]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 559, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_6add_circle(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_centre_x, __pyx_v_centre_y, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments, __pyx_v_thickness);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_6add_circle(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, int __pyx_v_num_segments, float __pyx_v_thickness) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_circle", 0);

  /* "imgui/core.pyx":598
 *         """
 *         self._ptr.AddCircle(
 *             _cast_args_ImVec2(centre_x, centre_y),             # <<<<<<<<<<<<<<
 *             radius,
 *             col,
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_centre_x, __pyx_v_centre_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)

  /* "imgui/core.pyx":597
 *             )
 *         """
 *         self._ptr.AddCircle(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(centre_x, centre_y),
 *             radius,
 */
  try {
    __pyx_v_self->_ptr->AddCircle(__pyx_t_1, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 597, __pyx_L1_error)
  }

  /* "imgui/core.pyx":559
 *         )
 * 
 *     def add_circle(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":605
 *         )
 * 
 *     def add_circle_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_9add_circle_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_8add_circle_filled[] = "_DrawList.add_circle_filled(self, float centre_x, float centre_y, float radius, ImU32 col, ImU32 num_segments=12)\nAdd a filled circle to the draw list.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Filled circle example\")\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_circle_filled(100, 60, 30, imgui.get_color_u32_rgba(1,1,0,1))\n            imgui.end()\n\n        Args:\n            centre_x (float): circle centre coordinates\n            centre_y (float): circle centre coordinates\n            radius (float): circle radius\n            col (ImU32): RGBA color specification\n            num_segments (ImU32): Number of segments, defaults to 12\n\n        .. wraps::\n            void ImDrawList::AddCircleFilled(\n                const ImVec2& centre,\n                float radius,\n                ImU32 col,\n                int num_segments = 12\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_9add_circle_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_centre_x;
  float __pyx_v_centre_y;
  float __pyx_v_radius;
  ImU32 __pyx_v_col;
  ImU32 __pyx_v_num_segments;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_circle_filled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_centre_x,&__pyx_n_s_centre_y,&__pyx_n_s_radius,&__pyx_n_s_col,&__pyx_n_s_num_segments,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, 1); __PYX_ERR(0, 605, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, 2); __PYX_ERR(0, 605, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, 3); __PYX_ERR(0, 605, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_segments);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_circle_filled") < 0)) __PYX_ERR(0, 605, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_centre_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_centre_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
    __pyx_v_centre_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_centre_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[3]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_num_segments = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_num_segments == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
    } else {
      __pyx_v_num_segments = ((ImU32)12);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 605, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_circle_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_8add_circle_filled(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_centre_x, __pyx_v_centre_y, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_8add_circle_filled(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, ImU32 __pyx_v_num_segments) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_circle_filled", 0);

  /* "imgui/core.pyx":642
 *         """
 *         self._ptr.AddCircleFilled(
 *             _cast_args_ImVec2(centre_x, centre_y),             # <<<<<<<<<<<<<<
 *             radius,
 *             col,
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_centre_x, __pyx_v_centre_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 642, __pyx_L1_error)

  /* "imgui/core.pyx":641
 *             )
 *         """
 *         self._ptr.AddCircleFilled(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(centre_x, centre_y),
 *             radius,
 */
  try {
    __pyx_v_self->_ptr->AddCircleFilled(__pyx_t_1, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 641, __pyx_L1_error)
  }

  /* "imgui/core.pyx":605
 *         )
 * 
 *     def add_circle_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_circle_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":648
 *         )
 * 
 *     def add_text(             # <<<<<<<<<<<<<<
 *             self,
 *             float pos_x, float pos_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_11add_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_10add_text[] = "_DrawList.add_text(self, float pos_x, float pos_y, ImU32 col, str text)\nAdd text to the draw list.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Text example\")\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_text(20, 35, imgui.get_color_u32_rgba(1,1,0,1), \"Hello!\")\n            imgui.end()\n\n        Args:\n            pos_x (float): X coordinate of the text's upper-left corner\n            pos_y (float): Y coordinate of the text's upper-left corner\n            col (ImU32): RGBA color specification\n            text (str): text\n\n        .. wraps::\n            void ImDrawList::AddText(\n                const ImVec2& pos,\n                ImU32 col,\n                const char* text_begin,\n                const char* text_end = NULL\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_11add_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_pos_x;
  float __pyx_v_pos_y;
  ImU32 __pyx_v_col;
  PyObject *__pyx_v_text = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos_x,&__pyx_n_s_pos_y,&__pyx_n_s_col,&__pyx_n_s_text,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, 1); __PYX_ERR(0, 648, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, 2); __PYX_ERR(0, 648, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, 3); __PYX_ERR(0, 648, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_text") < 0)) __PYX_ERR(0, 648, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_pos_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_pos_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 650, __pyx_L3_error)
    __pyx_v_pos_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_pos_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 650, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[2]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L3_error)
    __pyx_v_text = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 648, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 652, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_10add_text(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_pos_x, __pyx_v_pos_y, __pyx_v_col, __pyx_v_text);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_10add_text(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, float __pyx_v_pos_x, float __pyx_v_pos_y, ImU32 __pyx_v_col, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_text", 0);

  /* "imgui/core.pyx":681
 *         """
 *         self._ptr.AddText(
 *             _cast_args_ImVec2(pos_x, pos_y),             # <<<<<<<<<<<<<<
 *             col,
 *             _bytes(text),
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_pos_x, __pyx_v_pos_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L1_error)

  /* "imgui/core.pyx":683
 *             _cast_args_ImVec2(pos_x, pos_y),
 *             col,
 *             _bytes(text),             # <<<<<<<<<<<<<<
 *             NULL
 *         )
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 683, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L1_error)

  /* "imgui/core.pyx":680
 *             )
 *         """
 *         self._ptr.AddText(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(pos_x, pos_y),
 *             col,
 */
  try {
    __pyx_v_self->_ptr->AddText(__pyx_t_1, __pyx_v_col, __pyx_t_3, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":648
 *         )
 * 
 *     def add_text(             # <<<<<<<<<<<<<<
 *             self,
 *             float pos_x, float pos_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._DrawList.add_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":687
 *         )
 * 
 *     def add_image(self,             # <<<<<<<<<<<<<<
 *         texture_id,
 *         tuple a,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_13add_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_12add_image[] = "_DrawList.add_image(self, texture_id, tuple a, tuple b, tuple uv_a=(0, 0), tuple uv_b=(1, 1), ImU32 col=0xffffffff)\nAdd image to the draw list. Aspect ratio is not preserved.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Image example\")\n            texture_id = imgui.get_io().fonts.texture_id\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_image(texture_id, (20, 35), (180, 80), col=imgui.get_color_u32_rgba(0.5,0.5,1,1))\n            imgui.end()\n\n        Args:\n            texture_id (object): ID of the texture to draw\n            a (tuple): top-left image corner coordinates,\n            b (tuple): bottom-right image corner coordinates,\n            uv_a (tuple): UV coordinates of the top-left corner, defaults to (0, 0)\n            uv_b (tuple): UV coordinates of the bottom-right corner, defaults to (1, 1)\n            col (ImU32): tint color, defaults to 0xffffffff (no tint)\n\n        .. wraps::\n            void ImDrawList::AddImage(\n                ImTextureID user_texture_id,\n                const ImVec2& a,\n                const ImVec2& b,\n                const ImVec2& uv_a = ImVec2(0,0),\n                const ImVec2& uv_b = ImVec2(1,1),\n                ImU32 col = 0xFFFFFFFF\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_13add_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_uv_a = 0;
  PyObject *__pyx_v_uv_b = 0;
  ImU32 __pyx_v_col;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_image (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_uv_a,&__pyx_n_s_uv_b,&__pyx_n_s_col,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "imgui/core.pyx":691
 *         tuple a,
 *         tuple b,
 *         tuple uv_a=(0,0),             # <<<<<<<<<<<<<<
 *         tuple uv_b=(1,1),
 *         cimgui.ImU32 col=0xffffffff):
 */
    values[3] = ((PyObject*)__pyx_tuple__8);

    /* "imgui/core.pyx":692
 *         tuple b,
 *         tuple uv_a=(0,0),
 *         tuple uv_b=(1,1),             # <<<<<<<<<<<<<<
 *         cimgui.ImU32 col=0xffffffff):
 *         """Add image to the draw list. Aspect ratio is not preserved.
 */
    values[4] = ((PyObject*)__pyx_tuple__9);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_image", 0, 3, 6, 1); __PYX_ERR(0, 687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_image", 0, 3, 6, 2); __PYX_ERR(0, 687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_a);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_b);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_image") < 0)) __PYX_ERR(0, 687, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_a = ((PyObject*)values[1]);
    __pyx_v_b = ((PyObject*)values[2]);
    __pyx_v_uv_a = ((PyObject*)values[3]);
    __pyx_v_uv_b = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_col = __Pyx_PyInt_As_ImU32(values[5]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    } else {
      __pyx_v_col = ((ImU32)0xffffffff);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_image", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 687, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyTuple_Type), 1, "a", 1))) __PYX_ERR(0, 689, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyTuple_Type), 1, "b", 1))) __PYX_ERR(0, 690, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv_a), (&PyTuple_Type), 1, "uv_a", 1))) __PYX_ERR(0, 691, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv_b), (&PyTuple_Type), 1, "uv_b", 1))) __PYX_ERR(0, 692, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_12add_image(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_texture_id, __pyx_v_a, __pyx_v_b, __pyx_v_uv_a, __pyx_v_uv_b, __pyx_v_col);

  /* "imgui/core.pyx":687
 *         )
 * 
 *     def add_image(self,             # <<<<<<<<<<<<<<
 *         texture_id,
 *         tuple a,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_12add_image(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_texture_id, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_uv_a, PyObject *__pyx_v_uv_b, ImU32 __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  ImVec2 __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_image", 0);

  /* "imgui/core.pyx":727
 *         self._ptr.AddImage(
 *             <void*>texture_id,
 *             _cast_tuple_ImVec2(a),             # <<<<<<<<<<<<<<
 *             _cast_tuple_ImVec2(b),
 *             _cast_tuple_ImVec2(uv_a),
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L1_error)

  /* "imgui/core.pyx":728
 *             <void*>texture_id,
 *             _cast_tuple_ImVec2(a),
 *             _cast_tuple_ImVec2(b),             # <<<<<<<<<<<<<<
 *             _cast_tuple_ImVec2(uv_a),
 *             _cast_tuple_ImVec2(uv_b),
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L1_error)

  /* "imgui/core.pyx":729
 *             _cast_tuple_ImVec2(a),
 *             _cast_tuple_ImVec2(b),
 *             _cast_tuple_ImVec2(uv_a),             # <<<<<<<<<<<<<<
 *             _cast_tuple_ImVec2(uv_b),
 *             col
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L1_error)

  /* "imgui/core.pyx":730
 *             _cast_tuple_ImVec2(b),
 *             _cast_tuple_ImVec2(uv_a),
 *             _cast_tuple_ImVec2(uv_b),             # <<<<<<<<<<<<<<
 *             col
 *         )
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 730, __pyx_L1_error)

  /* "imgui/core.pyx":725
 *             )
 *         """
 *         self._ptr.AddImage(             # <<<<<<<<<<<<<<
 *             <void*>texture_id,
 *             _cast_tuple_ImVec2(a),
 */
  try {
    __pyx_v_self->_ptr->AddImage(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_v_col);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 725, __pyx_L1_error)
  }

  /* "imgui/core.pyx":687
 *         )
 * 
 *     def add_image(self,             # <<<<<<<<<<<<<<
 *         texture_id,
 *         tuple a,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":734
 *         )
 * 
 *     def add_polyline(             # <<<<<<<<<<<<<<
 *             self,
 *             list points,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15add_polyline(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_14add_polyline[] = "_DrawList.add_polyline(self, list points, ImU32 col, bool closed=False, float thickness=1.0)\nAdd a optionally closed polyline to the draw list.\n\n        .. visual-example::\n            :auto_layout:\n            :width: 200\n            :height: 100\n\n            imgui.begin(\"Polyline example\")\n            draw_list = imgui.get_window_draw_list()\n            draw_list.add_polyline([(20, 35), (90, 35), (55, 80)], imgui.get_color_u32_rgba(1,1,0,1), closed=False, thickness=3)\n            draw_list.add_polyline([(110, 35), (180, 35), (145, 80)], imgui.get_color_u32_rgba(1,0,0,1), closed=True, thickness=3)\n            imgui.end()\n\n        Args:\n            points (list): list of points\n            col (float): RGBA color specification\n            closed (bool): close the polyline to form a polygon\n            thickness (float): line thickness\n\n        .. wraps::\n            void ImDrawList::AddPolyline(\n                const ImVec2* points,\n                int num_points,\n                ImU32 col,\n                bool closed,\n                float thickness\n            )\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15add_polyline(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  ImU32 __pyx_v_col;
  bool __pyx_v_closed;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_polyline (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_col,&__pyx_n_s_closed,&__pyx_n_s_thickness,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_polyline", 0, 2, 4, 1); __PYX_ERR(0, 734, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_polyline") < 0)) __PYX_ERR(0, 734, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = ((PyObject*)values[0]);
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[1]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 737, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_closed = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_closed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 738, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":738
 *             list points,
 *             cimgui.ImU32 col,
 *             bool closed=False,             # <<<<<<<<<<<<<<
 *             float thickness=1.0
 *         ):
 */
      __pyx_v_closed = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_polyline", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 734, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.add_polyline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), (&PyList_Type), 1, "points", 1))) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_14add_polyline(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), __pyx_v_points, __pyx_v_col, __pyx_v_closed, __pyx_v_thickness);

  /* "imgui/core.pyx":734
 *         )
 * 
 *     def add_polyline(             # <<<<<<<<<<<<<<
 *             self,
 *             list points,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_14add_polyline(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_points, ImU32 __pyx_v_col, bool __pyx_v_closed, float __pyx_v_thickness) {
  PyObject *__pyx_v_num_points = NULL;
  ImVec2 *__pyx_v_pts;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  float __pyx_t_7;
  float __pyx_t_8;
  ImVec2 __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_polyline", 0);

  /* "imgui/core.pyx":769
 *             )
 *         """
 *         num_points = len(points)             # <<<<<<<<<<<<<<
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 */
  if (unlikely(__pyx_v_points == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 769, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 769, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_num_points = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":771
 *         num_points = len(points)
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))             # <<<<<<<<<<<<<<
 *         for i in range(num_points):
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(ImVec2))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_num_points, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pts = ((ImVec2 *)malloc(__pyx_t_4));

  /* "imgui/core.pyx":772
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 *         for i in range(num_points):             # <<<<<<<<<<<<<<
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 *         self._ptr.AddPolyline(
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_num_points); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 772, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 772, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 772, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 772, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "imgui/core.pyx":773
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 *         for i in range(num_points):
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])             # <<<<<<<<<<<<<<
 *         self._ptr.AddPolyline(
 *             pts,
 */
    if (unlikely(__pyx_v_points == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 773, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v_points == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 773, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_7, __pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L1_error)
    (__pyx_v_pts[__pyx_t_10]) = __pyx_t_9;

    /* "imgui/core.pyx":772
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 *         for i in range(num_points):             # <<<<<<<<<<<<<<
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 *         self._ptr.AddPolyline(
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":776
 *         self._ptr.AddPolyline(
 *             pts,
 *             num_points,             # <<<<<<<<<<<<<<
 *             col,
 *             closed,
 */
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_num_points); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 776, __pyx_L1_error)

  /* "imgui/core.pyx":774
 *         for i in range(num_points):
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 *         self._ptr.AddPolyline(             # <<<<<<<<<<<<<<
 *             pts,
 *             num_points,
 */
  try {
    __pyx_v_self->_ptr->AddPolyline(__pyx_v_pts, __pyx_t_11, __pyx_v_col, __pyx_v_closed, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 774, __pyx_L1_error)
  }

  /* "imgui/core.pyx":781
 *             thickness
 *         )
 *         free(pts)             # <<<<<<<<<<<<<<
 * 
 *     # channels
 */
  free(__pyx_v_pts);

  /* "imgui/core.pyx":734
 *         )
 * 
 *     def add_polyline(             # <<<<<<<<<<<<<<
 *             self,
 *             list points,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core._DrawList.add_polyline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_num_points);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":785
 *     # channels
 * 
 *     def channels_split(self, int channels_count):             # <<<<<<<<<<<<<<
 *         """
 *         Warning - be careful with using channels as "layers".
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_17channels_split(PyObject *__pyx_v_self, PyObject *__pyx_arg_channels_count); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_16channels_split[] = "_DrawList.channels_split(self, int channels_count)\n\n        Warning - be careful with using channels as \"layers\".\n        Child windows are always drawn after their parent, so they will\n        paint over its channels.\n        To paint over child windows, use `OverlayDrawList`.\n        ";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_17channels_split(PyObject *__pyx_v_self, PyObject *__pyx_arg_channels_count) {
  int __pyx_v_channels_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("channels_split (wrapper)", 0);
  assert(__pyx_arg_channels_count); {
    __pyx_v_channels_count = __Pyx_PyInt_As_int(__pyx_arg_channels_count); if (unlikely((__pyx_v_channels_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.channels_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_16channels_split(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), ((int)__pyx_v_channels_count));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_16channels_split(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, int __pyx_v_channels_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("channels_split", 0);

  /* "imgui/core.pyx":793
 *         """
 *         # TODO: document
 *         self._ptr.ChannelsSplit(channels_count)             # <<<<<<<<<<<<<<
 * 
 *     def channels_set_current(self, int idx):
 */
  try {
    __pyx_v_self->_ptr->ChannelsSplit(__pyx_v_channels_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 793, __pyx_L1_error)
  }

  /* "imgui/core.pyx":785
 *     # channels
 * 
 *     def channels_split(self, int channels_count):             # <<<<<<<<<<<<<<
 *         """
 *         Warning - be careful with using channels as "layers".
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.channels_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":795
 *         self._ptr.ChannelsSplit(channels_count)
 * 
 *     def channels_set_current(self, int idx):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsSetCurrent(idx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_19channels_set_current(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_18channels_set_current[] = "_DrawList.channels_set_current(self, int idx)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_19channels_set_current(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  int __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("channels_set_current (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_int(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.channels_set_current", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_18channels_set_current(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), ((int)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_18channels_set_current(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, int __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("channels_set_current", 0);

  /* "imgui/core.pyx":797
 *     def channels_set_current(self, int idx):
 *         # TODO: document
 *         self._ptr.ChannelsSetCurrent(idx)             # <<<<<<<<<<<<<<
 * 
 *     def channels_merge(self):
 */
  try {
    __pyx_v_self->_ptr->ChannelsSetCurrent(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 797, __pyx_L1_error)
  }

  /* "imgui/core.pyx":795
 *         self._ptr.ChannelsSplit(channels_count)
 * 
 *     def channels_set_current(self, int idx):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsSetCurrent(idx)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.channels_set_current", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":799
 *         self._ptr.ChannelsSetCurrent(idx)
 * 
 *     def channels_merge(self):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsMerge()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_21channels_merge(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_20channels_merge[] = "_DrawList.channels_merge(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_21channels_merge(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("channels_merge (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_20channels_merge(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_20channels_merge(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("channels_merge", 0);

  /* "imgui/core.pyx":801
 *     def channels_merge(self):
 *         # TODO: document
 *         self._ptr.ChannelsMerge()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->_ptr->ChannelsMerge();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 801, __pyx_L1_error)
  }

  /* "imgui/core.pyx":799
 *         self._ptr.ChannelsSetCurrent(idx)
 * 
 *     def channels_merge(self):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsMerge()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._DrawList.channels_merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":804
 * 
 *     @property
 *     def commands(self):             # <<<<<<<<<<<<<<
 *         return [
 *             # todo: consider operator overloading in pxd file
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_8commands_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_8commands_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_8commands___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_8commands___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":805
 *     @property
 *     def commands(self):
 *         return [             # <<<<<<<<<<<<<<
 *             # todo: consider operator overloading in pxd file
 *             _DrawCmd.from_ptr(&self._ptr.CmdBuffer.Data[idx])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":810
 *             # perf: short-wiring instead of using property
 *             # note: add py3k compat
 *             for idx in xrange(self._ptr.CmdBuffer.Size)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_t_2 = __pyx_v_self->_ptr->CmdBuffer.Size;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "imgui/core.pyx":807
 *         return [
 *             # todo: consider operator overloading in pxd file
 *             _DrawCmd.from_ptr(&self._ptr.CmdBuffer.Data[idx])             # <<<<<<<<<<<<<<
 *             # perf: short-wiring instead of using property
 *             # note: add py3k compat
 */
    __pyx_t_5 = __pyx_f_5imgui_4core_8_DrawCmd_from_ptr((&(__pyx_v_self->_ptr->CmdBuffer.Data[__pyx_v_idx]))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":804
 * 
 *     @property
 *     def commands(self):             # <<<<<<<<<<<<<<
 *         return [
 *             # todo: consider operator overloading in pxd file
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core._DrawList.commands.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_22__reduce_cython__[] = "_DrawList.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_22__reduce_cython__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_24__setstate_cython__[] = "_DrawList.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_24__setstate_cython__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":817
 *     cdef GuiStyle _style
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._style = None
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_7_Colors_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_7_Colors_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_7_Colors___cinit__(((struct __pyx_obj_5imgui_4core__Colors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_7_Colors___cinit__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "imgui/core.pyx":818
 * 
 *     def __cinit__(self):
 *         self._style = None             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, GuiStyle gui_style):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_style);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_style));
  __pyx_v_self->_style = ((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None);

  /* "imgui/core.pyx":817
 *     cdef GuiStyle _style
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._style = None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":820
 *         self._style = None
 * 
 *     def __init__(self, GuiStyle gui_style):             # <<<<<<<<<<<<<<
 *         self._style = gui_style
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_7_Colors_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_7_Colors_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_gui_style = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gui_style,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gui_style)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 820, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_gui_style = ((struct __pyx_obj_5imgui_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 820, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._Colors.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gui_style), __pyx_ptype_5imgui_4core_GuiStyle, 1, "gui_style", 0))) __PYX_ERR(0, 820, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_7_Colors_2__init__(((struct __pyx_obj_5imgui_4core__Colors *)__pyx_v_self), __pyx_v_gui_style);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_7_Colors_2__init__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_gui_style) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "imgui/core.pyx":821
 * 
 *     def __init__(self, GuiStyle gui_style):
 *         self._style = gui_style             # <<<<<<<<<<<<<<
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_gui_style));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_gui_style));
  __Pyx_GOTREF(__pyx_v_self->_style);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_style));
  __pyx_v_self->_style = __pyx_v_gui_style;

  /* "imgui/core.pyx":820
 *         self._style = None
 * 
 *     def __init__(self, GuiStyle gui_style):             # <<<<<<<<<<<<<<
 *         self._style = gui_style
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":823
 *         self._style = gui_style
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

static CYTHON_INLINE PyObject *__pyx_f_5imgui_4core_7_Colors__check_color(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_color", 0);

  /* "imgui/core.pyx":824
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiCol_COUNT);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "imgui/core.pyx":825
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_ImGuiCol(__pyx_v_variable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 825, __pyx_L1_error)

    /* "imgui/core.pyx":824
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  }

  /* "imgui/core.pyx":823
 *         self._style = gui_style
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core._Colors._check_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":827
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_7_Colors_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_7_Colors_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable) {
  ImGuiCol __pyx_v_variable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_variable); {
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_variable); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._Colors.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_7_Colors_4__getitem__(((struct __pyx_obj_5imgui_4core__Colors *)__pyx_v_self), ((ImGuiCol)__pyx_v_variable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_7_Colors_4__getitem__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable) {
  int __pyx_v_ix;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "imgui/core.pyx":828
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):
 *         self._check_color(variable)             # <<<<<<<<<<<<<<
 *         self._style._check_ptr()
 *         cdef int ix = variable
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_7_Colors__check_color(__pyx_v_self, __pyx_v_variable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":829
 *     def __getitem__(self, cimgui.ImGuiCol variable):
 *         self._check_color(variable)
 *         self._style._check_ptr()             # <<<<<<<<<<<<<<
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self->_style); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":830
 *         self._check_color(variable)
 *         self._style._check_ptr()
 *         cdef int ix = variable             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 * 
 */
  __pyx_v_ix = __pyx_v_variable;

  /* "imgui/core.pyx":831
 *         self._style._check_ptr()
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec4_tuple((__pyx_v_self->_style->_ptr->Colors[__pyx_v_ix])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":827
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Colors.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":833
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_7_Colors_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_7_Colors_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable, PyObject *__pyx_v_value) {
  ImGuiCol __pyx_v_variable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_variable); {
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_variable); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 833, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._Colors.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_7_Colors_6__setitem__(((struct __pyx_obj_5imgui_4core__Colors *)__pyx_v_self), ((ImGuiCol)__pyx_v_variable), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_7_Colors_6__setitem__(struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable, PyObject *__pyx_v_value) {
  int __pyx_v_ix;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "imgui/core.pyx":834
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):
 *         self._check_color(variable)             # <<<<<<<<<<<<<<
 *         self._style._check_ptr()
 *         cdef int ix = variable
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_7_Colors__check_color(__pyx_v_self, __pyx_v_variable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":835
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):
 *         self._check_color(variable)
 *         self._style._check_ptr()             # <<<<<<<<<<<<<<
 *         cdef int ix = variable
 *         self._style._ptr.Colors[ix] = _cast_tuple_ImVec4(value)
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self->_style); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":836
 *         self._check_color(variable)
 *         self._style._check_ptr()
 *         cdef int ix = variable             # <<<<<<<<<<<<<<
 *         self._style._ptr.Colors[ix] = _cast_tuple_ImVec4(value)
 * 
 */
  __pyx_v_ix = __pyx_v_variable;

  /* "imgui/core.pyx":837
 *         self._style._check_ptr()
 *         cdef int ix = variable
 *         self._style._ptr.Colors[ix] = _cast_tuple_ImVec4(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_self->_style->_ptr->Colors[__pyx_v_ix]) = __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_value);

  /* "imgui/core.pyx":833
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Colors.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_7_Colors_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_7_Colors_8__reduce_cython__[] = "_Colors.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_7_Colors_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_7_Colors_8__reduce_cython__(((struct __pyx_obj_5imgui_4core__Colors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_7_Colors_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Colors.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_7_Colors_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_7_Colors_10__setstate_cython__[] = "_Colors.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_7_Colors_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_7_Colors_10__setstate_cython__(((struct __pyx_obj_5imgui_4core__Colors *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_7_Colors_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Colors *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Colors.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":849
 *     cdef _Colors _colors
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = NULL
 *         self._owner = False
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle___cinit__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle___cinit__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "imgui/core.pyx":850
 * 
 *     def __cinit__(self):
 *         self._ptr = NULL             # <<<<<<<<<<<<<<
 *         self._owner = False
 *         self._colors = None
 */
  __pyx_v_self->_ptr = NULL;

  /* "imgui/core.pyx":851
 *     def __cinit__(self):
 *         self._ptr = NULL
 *         self._owner = False             # <<<<<<<<<<<<<<
 *         self._colors = None
 * 
 */
  __pyx_v_self->_owner = 0;

  /* "imgui/core.pyx":852
 *         self._ptr = NULL
 *         self._owner = False
 *         self._colors = None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_colors);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_colors));
  __pyx_v_self->_colors = ((struct __pyx_obj_5imgui_4core__Colors *)Py_None);

  /* "imgui/core.pyx":849
 *     cdef _Colors _colors
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = NULL
 *         self._owner = False
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":854
 *         self._colors = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._owner:
 *             del self._ptr
 */

/* Python wrapper */
static void __pyx_pw_5imgui_4core_8GuiStyle_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5imgui_4core_8GuiStyle_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5imgui_4core_8GuiStyle_2__dealloc__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5imgui_4core_8GuiStyle_2__dealloc__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "imgui/core.pyx":855
 * 
 *     def __dealloc__(self):
 *         if self._owner:             # <<<<<<<<<<<<<<
 *             del self._ptr
 *             self._ptr = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_owner != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":856
 *     def __dealloc__(self):
 *         if self._owner:
 *             del self._ptr             # <<<<<<<<<<<<<<
 *             self._ptr = NULL
 * 
 */
    delete __pyx_v_self->_ptr;

    /* "imgui/core.pyx":857
 *         if self._owner:
 *             del self._ptr
 *             self._ptr = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->_ptr = NULL;

    /* "imgui/core.pyx":855
 * 
 *     def __dealloc__(self):
 *         if self._owner:             # <<<<<<<<<<<<<<
 *             del self._ptr
 *             self._ptr = NULL
 */
  }

  /* "imgui/core.pyx":854
 *         self._colors = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._owner:
 *             del self._ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "imgui/core.pyx":860
 * 
 * 
 *     cdef inline _check_ptr(self):             # <<<<<<<<<<<<<<
 *         if self._ptr is NULL:
 *             raise RuntimeError(
 */

static CYTHON_INLINE PyObject *__pyx_f_5imgui_4core_8GuiStyle__check_ptr(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_ptr", 0);

  /* "imgui/core.pyx":861
 * 
 *     cdef inline _check_ptr(self):
 *         if self._ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "Improperly initialized, use imgui.get_style() or "
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imgui/core.pyx":862
 *     cdef inline _check_ptr(self):
 *         if self._ptr is NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "Improperly initialized, use imgui.get_style() or "
 *                 "GuiStyle.created() to obtain style classes"
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 862, __pyx_L1_error)

    /* "imgui/core.pyx":861
 * 
 *     cdef inline _check_ptr(self):
 *         if self._ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "Improperly initialized, use imgui.get_style() or "
 */
  }

  /* "imgui/core.pyx":860
 * 
 * 
 *     cdef inline _check_ptr(self):             # <<<<<<<<<<<<<<
 *         if self._ptr is NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.GuiStyle._check_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":867
 *             )
 * 
 *     def __eq__(GuiStyle self, GuiStyle other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5imgui_4core_GuiStyle, 1, "other", 0))) __PYX_ERR(0, 867, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_4__eq__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_4__eq__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "imgui/core.pyx":868
 * 
 *     def __eq__(GuiStyle self, GuiStyle other):
 *         return other._ptr == self._ptr             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_other->_ptr == __pyx_v_self->_ptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":867
 *             )
 * 
 *     def __eq__(GuiStyle self, GuiStyle other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":871
 * 
 *     @staticmethod
 *     def create():             # <<<<<<<<<<<<<<
 *         return GuiStyle._create()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_7create(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_8GuiStyle_6create[] = "GuiStyle.create()";
static PyMethodDef __pyx_mdef_5imgui_4core_8GuiStyle_7create = {"create", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_8GuiStyle_7create, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_8GuiStyle_6create};
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_7create(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("create", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "create", 0))) return NULL;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_6create();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_6create(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "imgui/core.pyx":872
 *     @staticmethod
 *     def create():
 *         return GuiStyle._create()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5imgui_4core_8GuiStyle__create()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":871
 * 
 *     @staticmethod
 *     def create():             # <<<<<<<<<<<<<<
 *         return GuiStyle._create()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":875
 * 
 *     @staticmethod
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):             # <<<<<<<<<<<<<<
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref
 */

static struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_f_5imgui_4core_8GuiStyle_from_ref(ImGuiStyle &__pyx_v_ref) {
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_instance = 0;
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ref", 0);

  /* "imgui/core.pyx":876
 *     @staticmethod
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):
 *         cdef GuiStyle instance = GuiStyle()             # <<<<<<<<<<<<<<
 *         instance._ptr = &ref
 *         instance._colors = _Colors(instance)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core_GuiStyle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":877
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref             # <<<<<<<<<<<<<<
 *         instance._colors = _Colors(instance)
 *         return instance
 */
  __pyx_v_instance->_ptr = (&__pyx_v_ref);

  /* "imgui/core.pyx":878
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref
 *         instance._colors = _Colors(instance)             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5imgui_4core__Colors), ((PyObject *)__pyx_v_instance)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_instance->_colors);
  __Pyx_DECREF(((PyObject *)__pyx_v_instance->_colors));
  __pyx_v_instance->_colors = ((struct __pyx_obj_5imgui_4core__Colors *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":879
 *         instance._ptr = &ref
 *         instance._colors = _Colors(instance)
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = __pyx_v_instance;
  goto __pyx_L0;

  /* "imgui/core.pyx":875
 * 
 *     @staticmethod
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):             # <<<<<<<<<<<<<<
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.from_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":882
 * 
 *     @staticmethod
 *     cdef GuiStyle _create():             # <<<<<<<<<<<<<<
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 */

static struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_f_5imgui_4core_8GuiStyle__create(void) {
  ImGuiStyle *__pyx_v__ptr;
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_instance = 0;
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiStyle *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_create", 0);

  /* "imgui/core.pyx":883
 *     @staticmethod
 *     cdef GuiStyle _create():
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()             # <<<<<<<<<<<<<<
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 *         instance._owner = True
 */
  try {
    __pyx_t_1 = new ImGuiStyle();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 883, __pyx_L1_error)
  }
  __pyx_v__ptr = __pyx_t_1;

  /* "imgui/core.pyx":884
 *     cdef GuiStyle _create():
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))             # <<<<<<<<<<<<<<
 *         instance._owner = True
 *         instance._colors = _Colors(instance)
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_5imgui_4core_8GuiStyle_from_ref((*__pyx_v__ptr))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":885
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 *         instance._owner = True             # <<<<<<<<<<<<<<
 *         instance._colors = _Colors(instance)
 *         return instance
 */
  __pyx_v_instance->_owner = 1;

  /* "imgui/core.pyx":886
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 *         instance._owner = True
 *         instance._colors = _Colors(instance)             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5imgui_4core__Colors), ((PyObject *)__pyx_v_instance)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_instance->_colors);
  __Pyx_DECREF(((PyObject *)__pyx_v_instance->_colors));
  __pyx_v_instance->_colors = ((struct __pyx_obj_5imgui_4core__Colors *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":887
 *         instance._owner = True
 *         instance._colors = _Colors(instance)
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = __pyx_v_instance;
  goto __pyx_L0;

  /* "imgui/core.pyx":882
 * 
 *     @staticmethod
 *     cdef GuiStyle _create():             # <<<<<<<<<<<<<<
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.GuiStyle._create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":890
 * 
 *     @property
 *     def alpha(self):             # <<<<<<<<<<<<<<
 *         """Global alpha blending parameter for windows
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_5alpha___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_5alpha___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":896
 *             float
 *         """
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.Alpha
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":897
 *         """
 *         self._check_ptr()
 *         return self._ptr.Alpha             # <<<<<<<<<<<<<<
 * 
 *     @alpha.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->Alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":890
 * 
 *     @property
 *     def alpha(self):             # <<<<<<<<<<<<<<
 *         """Global alpha blending parameter for windows
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":900
 * 
 *     @alpha.setter
 *     def alpha(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.Alpha = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 900, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.alpha.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_5alpha_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_5alpha_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":901
 *     @alpha.setter
 *     def alpha(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.Alpha = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":902
 *     def alpha(self, float value):
 *         self._check_ptr()
 *         self._ptr.Alpha = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->Alpha = __pyx_v_value;

  /* "imgui/core.pyx":900
 * 
 *     @alpha.setter
 *     def alpha(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.Alpha = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.alpha.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":905
 * 
 *     @property
 *     def window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14window_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14window_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14window_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":906
 *     @property
 *     def window_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":907
 *     def window_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)             # <<<<<<<<<<<<<<
 * 
 *     @window_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->WindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":905
 * 
 *     @property
 *     def window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":910
 * 
 *     @window_padding.setter
 *     def window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14window_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":911
 *     @window_padding.setter
 *     def window_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":912
 *     def window_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L1_error)
  __pyx_v_self->_ptr->WindowPadding = __pyx_t_2;

  /* "imgui/core.pyx":910
 * 
 *     @window_padding.setter
 *     def window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":915
 * 
 *     @property
 *     def window_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":916
 *     @property
 *     def window_min_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":917
 *     def window_min_size(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)             # <<<<<<<<<<<<<<
 * 
 *     @window_min_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->WindowMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":915
 * 
 *     @property
 *     def window_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_min_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":920
 * 
 *     @window_min_size.setter
 *     def window_min_size(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":921
 *     @window_min_size.setter
 *     def window_min_size(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":922
 *     def window_min_size(self, value):
 *         self._check_ptr()
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L1_error)
  __pyx_v_self->_ptr->WindowMinSize = __pyx_t_2;

  /* "imgui/core.pyx":920
 * 
 *     @window_min_size.setter
 *     def window_min_size(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":925
 * 
 *     @property
 *     def window_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":926
 *     @property
 *     def window_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.WindowRounding
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":927
 *     def window_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.WindowRounding             # <<<<<<<<<<<<<<
 * 
 *     @window_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->WindowRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":925
 * 
 *     @property
 *     def window_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":930
 * 
 *     @window_rounding.setter
 *     def window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowRounding = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 930, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":931
 *     @window_rounding.setter
 *     def window_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":932
 *     def window_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.WindowRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->WindowRounding = __pyx_v_value;

  /* "imgui/core.pyx":930
 * 
 *     @window_rounding.setter
 *     def window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":935
 * 
 *     @property
 *     def window_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18window_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18window_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18window_border_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18window_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":936
 *     @property
 *     def window_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.WindowBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":937
 *     def window_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.WindowBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @window_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->WindowBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":935
 * 
 *     @property
 *     def window_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":940
 * 
 *     @window_border_size.setter
 *     def window_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18window_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18window_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18window_border_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18window_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":941
 *     @window_border_size.setter
 *     def window_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":942
 *     def window_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.WindowBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->WindowBorderSize = __pyx_v_value;

  /* "imgui/core.pyx":940
 * 
 *     @window_border_size.setter
 *     def window_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":945
 * 
 *     @property
 *     def child_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14child_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14child_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14child_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14child_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":946
 *     @property
 *     def child_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ChildRounding
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":947
 *     def child_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.ChildRounding             # <<<<<<<<<<<<<<
 * 
 *     @child_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ChildRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":945
 * 
 *     @property
 *     def child_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":950
 * 
 *     @child_rounding.setter
 *     def child_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildRounding = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14child_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14child_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14child_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14child_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":951
 *     @child_rounding.setter
 *     def child_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ChildRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":952
 *     def child_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.ChildRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ChildRounding = __pyx_v_value;

  /* "imgui/core.pyx":950
 * 
 *     @child_rounding.setter
 *     def child_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":955
 * 
 *     @property
 *     def child_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17child_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17child_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17child_border_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17child_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":956
 *     @property
 *     def child_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ChildBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":957
 *     def child_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.ChildBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @child_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ChildBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":955
 * 
 *     @property
 *     def child_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":960
 * 
 *     @child_border_size.setter
 *     def child_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_17child_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_17child_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17child_border_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_17child_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":961
 *     @child_border_size.setter
 *     def child_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ChildBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":962
 *     def child_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ChildBorderSize = __pyx_v_value;

  /* "imgui/core.pyx":960
 * 
 *     @child_border_size.setter
 *     def child_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":965
 * 
 *     @property
 *     def popup_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14popup_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14popup_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14popup_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14popup_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":966
 *     @property
 *     def popup_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.PopupRounding
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":967
 *     def popup_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.PopupRounding             # <<<<<<<<<<<<<<
 * 
 *     @popup_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->PopupRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":965
 * 
 *     @property
 *     def popup_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.popup_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":970
 * 
 *     @popup_rounding.setter
 *     def popup_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.PopupRounding = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14popup_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14popup_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.popup_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14popup_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14popup_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":971
 *     @popup_rounding.setter
 *     def popup_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.PopupRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":972
 *     def popup_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.PopupRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->PopupRounding = __pyx_v_value;

  /* "imgui/core.pyx":970
 * 
 *     @popup_rounding.setter
 *     def popup_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.PopupRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.popup_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":975
 * 
 *     @property
 *     def popup_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17popup_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17popup_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17popup_border_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17popup_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":976
 *     @property
 *     def popup_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.PopupBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":977
 *     def popup_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.PopupBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @popup_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->PopupBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":975
 * 
 *     @property
 *     def popup_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.popup_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":980
 * 
 *     @popup_border_size.setter
 *     def popup_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_17popup_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_17popup_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 980, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.popup_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17popup_border_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_17popup_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":981
 *     @popup_border_size.setter
 *     def popup_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ChildBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":982
 *     def popup_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ChildBorderSize = __pyx_v_value;

  /* "imgui/core.pyx":980
 * 
 *     @popup_border_size.setter
 *     def popup_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.popup_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":985
 * 
 *     @property
 *     def window_title_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18window_title_align_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18window_title_align_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18window_title_align___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18window_title_align___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":986
 *     @property
 *     def window_title_align(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":987
 *     def window_title_align(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)             # <<<<<<<<<<<<<<
 * 
 *     @window_title_align.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->WindowTitleAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":985
 * 
 *     @property
 *     def window_title_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_title_align.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":990
 * 
 *     @window_title_align.setter
 *     def window_title_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18window_title_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18window_title_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18window_title_align_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18window_title_align_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":991
 *     @window_title_align.setter
 *     def window_title_align(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":992
 *     def window_title_align(self, value):
 *         self._check_ptr()
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 992, __pyx_L1_error)
  __pyx_v_self->_ptr->WindowTitleAlign = __pyx_t_2;

  /* "imgui/core.pyx":990
 * 
 *     @window_title_align.setter
 *     def window_title_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_title_align.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":995
 * 
 *     @property
 *     def frame_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13frame_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":996
 *     @property
 *     def frame_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":997
 *     def frame_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)             # <<<<<<<<<<<<<<
 * 
 *     @frame_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->FramePadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":995
 * 
 *     @property
 *     def frame_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1000
 * 
 *     @frame_padding.setter
 *     def frame_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1001
 *     @frame_padding.setter
 *     def frame_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1002
 *     def frame_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1002, __pyx_L1_error)
  __pyx_v_self->_ptr->FramePadding = __pyx_t_2;

  /* "imgui/core.pyx":1000
 * 
 *     @frame_padding.setter
 *     def frame_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1005
 * 
 *     @property
 *     def frame_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1006
 *     @property
 *     def frame_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.FrameRounding
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1007
 *     def frame_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.FrameRounding             # <<<<<<<<<<<<<<
 * 
 *     @frame_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->FrameRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1005
 * 
 *     @property
 *     def frame_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1010
 * 
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameRounding = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1010, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1011
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.FrameRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1012
 *     def frame_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.FrameRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FrameRounding = __pyx_v_value;

  /* "imgui/core.pyx":1010
 * 
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1015
 * 
 *     @property
 *     def frame_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17frame_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17frame_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17frame_border_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17frame_border_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1016
 *     @property
 *     def frame_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.FrameBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1017
 *     def frame_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.FrameBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @frame_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->FrameBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1015
 * 
 *     @property
 *     def frame_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1020
 * 
 *     @frame_border_size.setter
 *     def frame_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_17frame_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_17frame_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17frame_border_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_17frame_border_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1021
 *     @frame_border_size.setter
 *     def frame_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.FrameBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1022
 *     def frame_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.FrameBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FrameBorderSize = __pyx_v_value;

  /* "imgui/core.pyx":1020
 * 
 *     @frame_border_size.setter
 *     def frame_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1025
 * 
 *     @property
 *     def item_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_12item_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1026
 *     @property
 *     def item_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1027
 *     def item_spacing(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)             # <<<<<<<<<<<<<<
 * 
 *     @item_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->ItemSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1025
 * 
 *     @property
 *     def item_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1030
 * 
 *     @item_spacing.setter
 *     def item_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1031
 *     @item_spacing.setter
 *     def item_spacing(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1032
 *     def item_spacing(self, value):
 *         self._check_ptr()
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L1_error)
  __pyx_v_self->_ptr->ItemSpacing = __pyx_t_2;

  /* "imgui/core.pyx":1030
 * 
 *     @item_spacing.setter
 *     def item_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1035
 * 
 *     @property
 *     def item_inner_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1036
 *     @property
 *     def item_inner_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1037
 *     def item_inner_spacing(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)             # <<<<<<<<<<<<<<
 * 
 *     @item_inner_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->ItemInnerSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1035
 * 
 *     @property
 *     def item_inner_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_inner_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1040
 * 
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1041
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1042
 *     def item_inner_spacing(self, value):
 *         self._check_ptr()
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L1_error)
  __pyx_v_self->_ptr->ItemInnerSpacing = __pyx_t_2;

  /* "imgui/core.pyx":1040
 * 
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_inner_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1045
 * 
 *     @property
 *     def touch_extra_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1046
 *     @property
 *     def touch_extra_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1047
 *     def touch_extra_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)             # <<<<<<<<<<<<<<
 * 
 *     @touch_extra_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->TouchExtraPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1045
 * 
 *     @property
 *     def touch_extra_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.touch_extra_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1050
 * 
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1051
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1052
 *     def touch_extra_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1052, __pyx_L1_error)
  __pyx_v_self->_ptr->TouchExtraPadding = __pyx_t_2;

  /* "imgui/core.pyx":1050
 * 
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.touch_extra_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1055
 * 
 *     @property
 *     def indent_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.IndentSpacing
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1056
 *     @property
 *     def indent_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.IndentSpacing
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1057
 *     def indent_spacing(self):
 *         self._check_ptr()
 *         return self._ptr.IndentSpacing             # <<<<<<<<<<<<<<
 * 
 *     @indent_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->IndentSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1055
 * 
 *     @property
 *     def indent_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.IndentSpacing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.indent_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1060
 * 
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.IndentSpacing = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1060, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.indent_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1061
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.IndentSpacing = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1062
 *     def indent_spacing(self, float value):
 *         self._check_ptr()
 *         self._ptr.IndentSpacing = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->IndentSpacing = __pyx_v_value;

  /* "imgui/core.pyx":1060
 * 
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.IndentSpacing = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.indent_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1065
 * 
 *     @property
 *     def columns_min_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ColumnsMinSpacing
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1066
 *     @property
 *     def columns_min_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ColumnsMinSpacing
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1067
 *     def columns_min_spacing(self):
 *         self._check_ptr()
 *         return self._ptr.ColumnsMinSpacing             # <<<<<<<<<<<<<<
 * 
 *     @columns_min_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ColumnsMinSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1065
 * 
 *     @property
 *     def columns_min_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ColumnsMinSpacing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.columns_min_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1070
 * 
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ColumnsMinSpacing = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.columns_min_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1071
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ColumnsMinSpacing = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1072
 *     def columns_min_spacing(self, float value):
 *         self._check_ptr()
 *         self._ptr.ColumnsMinSpacing = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ColumnsMinSpacing = __pyx_v_value;

  /* "imgui/core.pyx":1070
 * 
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ColumnsMinSpacing = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.columns_min_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1075
 * 
 *     @property
 *     def scrollbar_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1076
 *     @property
 *     def scrollbar_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ScrollbarSize
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1077
 *     def scrollbar_size(self):
 *         self._check_ptr()
 *         return self._ptr.ScrollbarSize             # <<<<<<<<<<<<<<
 * 
 *     @scrollbar_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ScrollbarSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1075
 * 
 *     @property
 *     def scrollbar_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1080
 * 
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarSize = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1081
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ScrollbarSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1082
 *     def scrollbar_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.ScrollbarSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ScrollbarSize = __pyx_v_value;

  /* "imgui/core.pyx":1080
 * 
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1085
 * 
 *     @property
 *     def scrollbar_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1086
 *     @property
 *     def scrollbar_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ScrollbarRounding
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1087
 *     def scrollbar_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.ScrollbarRounding             # <<<<<<<<<<<<<<
 * 
 *     @scrollbar_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ScrollbarRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1085
 * 
 *     @property
 *     def scrollbar_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1090
 * 
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarRounding = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1090, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1091
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ScrollbarRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1092
 *     def scrollbar_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.ScrollbarRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ScrollbarRounding = __pyx_v_value;

  /* "imgui/core.pyx":1090
 * 
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1095
 * 
 *     @property
 *     def grab_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabMinSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1096
 *     @property
 *     def grab_min_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.GrabMinSize
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1097
 *     def grab_min_size(self):
 *         self._check_ptr()
 *         return self._ptr.GrabMinSize             # <<<<<<<<<<<<<<
 * 
 *     @grab_min_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->GrabMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1095
 * 
 *     @property
 *     def grab_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabMinSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_min_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1100
 * 
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabMinSize = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1101
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.GrabMinSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1102
 *     def grab_min_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.GrabMinSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->GrabMinSize = __pyx_v_value;

  /* "imgui/core.pyx":1100
 * 
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabMinSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1105
 * 
 *     @property
 *     def grab_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1106
 *     @property
 *     def grab_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.GrabRounding
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1107
 *     def grab_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.GrabRounding             # <<<<<<<<<<<<<<
 * 
 *     @grab_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->GrabRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1105
 * 
 *     @property
 *     def grab_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1110
 * 
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabRounding = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1110, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1111
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.GrabRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1112
 *     def grab_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.GrabRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->GrabRounding = __pyx_v_value;

  /* "imgui/core.pyx":1110
 * 
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1115
 * 
 *     @property
 *     def button_text_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17button_text_align_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17button_text_align_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17button_text_align___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17button_text_align___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1116
 *     @property
 *     def button_text_align(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1117
 *     def button_text_align(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)             # <<<<<<<<<<<<<<
 * 
 *     @button_text_align.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->ButtonTextAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1115
 * 
 *     @property
 *     def button_text_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.button_text_align.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1120
 * 
 *     @button_text_align.setter
 *     def button_text_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_17button_text_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_17button_text_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17button_text_align_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_17button_text_align_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1121
 *     @button_text_align.setter
 *     def button_text_align(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1122
 *     def button_text_align(self, value):
 *         self._check_ptr()
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L1_error)
  __pyx_v_self->_ptr->ButtonTextAlign = __pyx_t_2;

  /* "imgui/core.pyx":1120
 * 
 *     @button_text_align.setter
 *     def button_text_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.button_text_align.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1125
 * 
 *     @property
 *     def display_window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1126
 *     @property
 *     def display_window_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1127
 *     def display_window_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)             # <<<<<<<<<<<<<<
 * 
 *     @display_window_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayWindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1125
 * 
 *     @property
 *     def display_window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_window_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1130
 * 
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1131
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1132
 *     def display_window_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1132, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayWindowPadding = __pyx_t_2;

  /* "imgui/core.pyx":1130
 * 
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_window_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1135
 * 
 *     @property
 *     def display_safe_area_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1136
 *     @property
 *     def display_safe_area_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1137
 *     def display_safe_area_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)             # <<<<<<<<<<<<<<
 * 
 *     @display_safe_area_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplaySafeAreaPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1135
 * 
 *     @property
 *     def display_safe_area_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_safe_area_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1140
 * 
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1141
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1142
 *     def display_safe_area_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplaySafeAreaPadding = __pyx_t_2;

  /* "imgui/core.pyx":1140
 * 
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_safe_area_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1145
 * 
 *     @property
 *     def mouse_cursor_scale(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.MouseCursorScale
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18mouse_cursor_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18mouse_cursor_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18mouse_cursor_scale___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18mouse_cursor_scale___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1146
 *     @property
 *     def mouse_cursor_scale(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseCursorScale
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1147
 *     def mouse_cursor_scale(self):
 *         self._check_ptr()
 *         return self._ptr.MouseCursorScale             # <<<<<<<<<<<<<<
 * 
 *     @mouse_cursor_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseCursorScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1145
 * 
 *     @property
 *     def mouse_cursor_scale(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.MouseCursorScale
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.mouse_cursor_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1150
 * 
 *     @mouse_cursor_scale.setter
 *     def mouse_cursor_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.MouseCursorScale = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18mouse_cursor_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18mouse_cursor_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18mouse_cursor_scale_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18mouse_cursor_scale_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1151
 *     @mouse_cursor_scale.setter
 *     def mouse_cursor_scale(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.MouseCursorScale = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1152
 *     def mouse_cursor_scale(self, value):
 *         self._check_ptr()
 *         self._ptr.MouseCursorScale = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1152, __pyx_L1_error)
  __pyx_v_self->_ptr->MouseCursorScale = __pyx_t_2;

  /* "imgui/core.pyx":1150
 * 
 *     @mouse_cursor_scale.setter
 *     def mouse_cursor_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.MouseCursorScale = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.mouse_cursor_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1155
 * 
 *     @property
 *     def anti_aliased_lines(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedLines
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1156
 *     @property
 *     def anti_aliased_lines(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.AntiAliasedLines
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1157
 *     def anti_aliased_lines(self):
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedLines             # <<<<<<<<<<<<<<
 * 
 *     @anti_aliased_lines.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->AntiAliasedLines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1155
 * 
 *     @property
 *     def anti_aliased_lines(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedLines
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_lines.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1160
 * 
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedLines = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1160, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_lines.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1161
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.AntiAliasedLines = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1162
 *     def anti_aliased_lines(self, cimgui.bool value):
 *         self._check_ptr()
 *         self._ptr.AntiAliasedLines = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->AntiAliasedLines = __pyx_v_value;

  /* "imgui/core.pyx":1160
 * 
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedLines = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_lines.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1165
 * 
 *     @property
 *     def anti_aliased_fill(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedFill
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17anti_aliased_fill_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_17anti_aliased_fill_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17anti_aliased_fill___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_17anti_aliased_fill___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1166
 *     @property
 *     def anti_aliased_fill(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.AntiAliasedFill
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1167
 *     def anti_aliased_fill(self):
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedFill             # <<<<<<<<<<<<<<
 * 
 *     @anti_aliased_fill.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->AntiAliasedFill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1165
 * 
 *     @property
 *     def anti_aliased_fill(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedFill
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_fill.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1170
 * 
 *     @anti_aliased_fill.setter
 *     def anti_aliased_fill(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedFill = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_17anti_aliased_fill_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_17anti_aliased_fill_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1170, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_fill.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_17anti_aliased_fill_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_17anti_aliased_fill_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1171
 *     @anti_aliased_fill.setter
 *     def anti_aliased_fill(self, cimgui.bool value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.AntiAliasedFill = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1172
 *     def anti_aliased_fill(self, cimgui.bool value):
 *         self._check_ptr()
 *         self._ptr.AntiAliasedFill = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->AntiAliasedFill = __pyx_v_value;

  /* "imgui/core.pyx":1170
 * 
 *     @anti_aliased_fill.setter
 *     def anti_aliased_fill(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedFill = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_fill.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1175
 * 
 *     @property
 *     def curve_tessellation_tolerance(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.CurveTessellationTol
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1176
 *     @property
 *     def curve_tessellation_tolerance(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.CurveTessellationTol
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1177
 *     def curve_tessellation_tolerance(self):
 *         self._check_ptr()
 *         return self._ptr.CurveTessellationTol             # <<<<<<<<<<<<<<
 * 
 *     @curve_tessellation_tolerance.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->CurveTessellationTol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1175
 * 
 *     @property
 *     def curve_tessellation_tolerance(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.CurveTessellationTol
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.curve_tessellation_tolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1180
 * 
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.CurveTessellationTol = value
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1180, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.curve_tessellation_tolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1181
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.CurveTessellationTol = value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1182
 *     def curve_tessellation_tolerance(self, float value):
 *         self._check_ptr()
 *         self._ptr.CurveTessellationTol = value             # <<<<<<<<<<<<<<
 * 
 *     def color(self, cimgui.ImGuiCol variable):
 */
  __pyx_v_self->_ptr->CurveTessellationTol = __pyx_v_value;

  /* "imgui/core.pyx":1180
 * 
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.CurveTessellationTol = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.curve_tessellation_tolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1184
 *         self._ptr.CurveTessellationTol = value
 * 
 *     def color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_9color(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable); /*proto*/
static char __pyx_doc_5imgui_4core_8GuiStyle_8color[] = "GuiStyle.color(self, ImGuiCol variable)";
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_9color(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable) {
  ImGuiCol __pyx_v_variable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color (wrapper)", 0);
  assert(__pyx_arg_variable); {
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_variable); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1184, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_8color(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((ImGuiCol)__pyx_v_variable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_8color(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, ImGuiCol __pyx_v_variable) {
  int __pyx_v_ix;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color", 0);

  /* "imgui/core.pyx":1185
 * 
 *     def color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiCol_COUNT);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "imgui/core.pyx":1186
 *     def color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 * 
 *         self._check_ptr()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_ImGuiCol(__pyx_v_variable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1186, __pyx_L1_error)

    /* "imgui/core.pyx":1185
 * 
 *     def color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  }

  /* "imgui/core.pyx":1188
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._ptr.Colors[ix])
 */
  __pyx_t_4 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "imgui/core.pyx":1189
 * 
 *         self._check_ptr()
 *         cdef int ix = variable             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.Colors[ix])
 * 
 */
  __pyx_v_ix = __pyx_v_variable;

  /* "imgui/core.pyx":1190
 *         self._check_ptr()
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._ptr.Colors[ix])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_f_5imgui_4core__cast_ImVec4_tuple((__pyx_v_self->_ptr->Colors[__pyx_v_ix])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1184
 *         self._ptr.CurveTessellationTol = value
 * 
 *     def color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.GuiStyle.color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1193
 * 
 *     @property
 *     def colors(self):             # <<<<<<<<<<<<<<
 *         """Retrieve and modify style colors through list-like interface.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_6colors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_6colors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_6colors___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_6colors___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1211
 *             imgui.end()
 *         """
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._colors
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1212
 *         """
 *         self._check_ptr()
 *         return self._colors             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_colors));
  __pyx_r = ((PyObject *)__pyx_v_self->_colors);
  goto __pyx_L0;

  /* "imgui/core.pyx":1193
 * 
 *     @property
 *     def colors(self):             # <<<<<<<<<<<<<<
 *         """Retrieve and modify style colors through list-like interface.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.colors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_8GuiStyle_10__reduce_cython__[] = "GuiStyle.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_10__reduce_cython__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_8GuiStyle_12__setstate_cython__[] = "GuiStyle.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_12__setstate_cython__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1218
 *     cdef cimgui.ImDrawData* _ptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_9_DrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_9_DrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData___init__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_9_DrawData___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1221
 *         pass
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_2_require_pointer[] = "_DrawData._require_pointer(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_pointer (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_2_require_pointer(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_2_require_pointer(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_require_pointer", 0);

  /* "imgui/core.pyx":1222
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imgui/core.pyx":1224
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s_improperly_initialized, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "imgui/core.pyx":1223
 *     def _require_pointer(self):
 *         if self._ptr == NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "%s improperly initialized" % self.__class__.__name__
 *             )
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1223, __pyx_L1_error)

    /* "imgui/core.pyx":1222
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  }

  /* "imgui/core.pyx":1221
 *         pass
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData._require_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1228
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_5imgui_4core_9_DrawData_from_ptr(ImDrawData *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":1229
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1230
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _DrawData()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":1229
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "imgui/core.pyx":1232
 *             return None
 * 
 *         instance = _DrawData()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__DrawData)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1233
 * 
 *         instance = _DrawData()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":1234
 *         instance = _DrawData()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def deindex_all_buffers(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":1228
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._DrawData.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1236
 *         return instance
 * 
 *     def deindex_all_buffers(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5deindex_all_buffers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_4deindex_all_buffers[] = "_DrawData.deindex_all_buffers(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5deindex_all_buffers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deindex_all_buffers (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_4deindex_all_buffers(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_4deindex_all_buffers(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deindex_all_buffers", 0);

  /* "imgui/core.pyx":1237
 * 
 *     def deindex_all_buffers(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         self._ptr.DeIndexAllBuffers()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1238
 *     def deindex_all_buffers(self):
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()             # <<<<<<<<<<<<<<
 * 
 *     def scale_clip_rects(self, width, height):
 */
  try {
    __pyx_v_self->_ptr->DeIndexAllBuffers();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1238, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1236
 *         return instance
 * 
 *     def deindex_all_buffers(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.deindex_all_buffers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1240
 *         self._ptr.DeIndexAllBuffers()
 * 
 *     def scale_clip_rects(self, width, height):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_7scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_6scale_clip_rects[] = "_DrawData.scale_clip_rects(self, width, height)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_7scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale_clip_rects (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale_clip_rects", 1, 2, 2, 1); __PYX_ERR(0, 1240, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scale_clip_rects") < 0)) __PYX_ERR(0, 1240, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale_clip_rects", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1240, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawData.scale_clip_rects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_6scale_clip_rects(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self), __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_6scale_clip_rects(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  float __pyx_t_5;
  ImVec2 __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale_clip_rects", 0);

  /* "imgui/core.pyx":1241
 * 
 *     def scale_clip_rects(self, width, height):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1242
 *     def scale_clip_rects(self, width, height):
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_4, __pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  try {
    __pyx_v_self->_ptr->ScaleClipRects(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1242, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1240
 *         self._ptr.DeIndexAllBuffers()
 * 
 *     def scale_clip_rects(self, width, height):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.scale_clip_rects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1245
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.Valid
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5valid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5valid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_5valid___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_5valid___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1246
 *     @property
 *     def valid(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.Valid
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1247
 *     def valid(self):
 *         self._require_pointer()
 *         return self._ptr.Valid             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->Valid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1245
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.Valid
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.valid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1250
 * 
 *     @property
 *     def cmd_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9cmd_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9cmd_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_9cmd_count___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_9cmd_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1251
 *     @property
 *     def cmd_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdListsCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1252
 *     def cmd_count(self):
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->CmdListsCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1250
 * 
 *     @property
 *     def cmd_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.cmd_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1255
 * 
 *     @property
 *     def total_vtx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_vtx_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_vtx_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_15total_vtx_count___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_vtx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1256
 *     @property
 *     def total_vtx_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.TotalVtxCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1257
 *     def total_vtx_count(self):
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->TotalVtxCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1255
 * 
 *     @property
 *     def total_vtx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.total_vtx_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1260
 * 
 *     @property
 *     def total_idx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_idx_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_idx_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_15total_idx_count___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_idx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1261
 *     @property
 *     def total_idx_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.TotalIdxCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1262
 *     def total_idx_count(self):
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->TotalIdxCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1260
 * 
 *     @property
 *     def total_idx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.total_idx_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1265
 * 
 *     @property
 *     def commands_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_14commands_lists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_14commands_lists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_14commands_lists___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_14commands_lists___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1266
 *     @property
 *     def commands_lists(self):
 *         return [             # <<<<<<<<<<<<<<
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 *             # perf: short-wiring instead of using property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":1269
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 *             # perf: short-wiring instead of using property
 *             for idx in xrange(self._ptr.CmdListsCount)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_t_2 = __pyx_v_self->_ptr->CmdListsCount;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "imgui/core.pyx":1267
 *     def commands_lists(self):
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])             # <<<<<<<<<<<<<<
 *             # perf: short-wiring instead of using property
 *             for idx in xrange(self._ptr.CmdListsCount)
 */
    __pyx_t_5 = __pyx_f_5imgui_4core_9_DrawList_from_ptr((__pyx_v_self->_ptr->CmdLists[__pyx_v_idx])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1265
 * 
 *     @property
 *     def commands_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core._DrawData.commands_lists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_8__reduce_cython__[] = "_DrawData.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_8__reduce_cython__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_10__setstate_cython__[] = "_DrawData.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_10__setstate_cython__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1277
 * 
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(ImWchar const *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":1278
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1279
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _StaticGlyphRanges()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":1278
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "imgui/core.pyx":1281
 *             return None
 * 
 *         instance = _StaticGlyphRanges()             # <<<<<<<<<<<<<<
 *         instance.ranges_ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__StaticGlyphRanges)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1282
 * 
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->ranges_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":1283
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":1277
 * 
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._StaticGlyphRanges.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_18_StaticGlyphRanges___reduce_cython__[] = "_StaticGlyphRanges.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_18_StaticGlyphRanges___reduce_cython__(((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._StaticGlyphRanges.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__[] = "_StaticGlyphRanges.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__(((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._StaticGlyphRanges.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1288
 * cdef class _Font(object):
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_5imgui_4core_5_Font_from_ptr(ImFont *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__Font *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":1289
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1290
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _Font()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":1289
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "imgui/core.pyx":1292
 *             return None
 * 
 *         instance = _Font()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__Font)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__Font *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1293
 * 
 *         instance = _Font()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":1294
 *         instance = _Font()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":1288
 * cdef class _Font(object):
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._Font.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_5_Font_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_5_Font___reduce_cython__[] = "_Font.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_5_Font_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_5_Font___reduce_cython__(((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_5_Font___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Font.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_5_Font_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_5_Font_2__setstate_cython__[] = "_Font.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_5_Font_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_5_Font_2__setstate_cython__(((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_5_Font_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Font.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1314
 *     cdef cimgui.ImFontAtlas* _ptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_10_FontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_10_FontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas___init__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_10_FontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1318
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_5imgui_4core_10_FontAtlas_from_ptr(ImFontAtlas *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":1319
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1320
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _FontAtlas()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":1319
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "imgui/core.pyx":1322
 *             return None
 * 
 *         instance = _FontAtlas()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__FontAtlas)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1323
 * 
 *         instance = _FontAtlas()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":1324
 *         instance = _FontAtlas()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def _require_pointer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":1318
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1326
 *         return instance
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_2_require_pointer[] = "_FontAtlas._require_pointer(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_pointer (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_2_require_pointer(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_2_require_pointer(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_require_pointer", 0);

  /* "imgui/core.pyx":1327
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imgui/core.pyx":1329
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s_improperly_initialized, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "imgui/core.pyx":1328
 *     def _require_pointer(self):
 *         if self._ptr == NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "%s improperly initialized" % self.__class__.__name__
 *             )
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1328, __pyx_L1_error)

    /* "imgui/core.pyx":1327
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  }

  /* "imgui/core.pyx":1332
 *             )
 * 
 *         return self._ptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def add_font_default(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->_ptr != NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1326
 *         return instance
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._FontAtlas._require_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1334
 *         return self._ptr != NULL
 * 
 *     def add_font_default(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_5add_font_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_4add_font_default[] = "_FontAtlas.add_font_default(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_5add_font_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_font_default (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_4add_font_default(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_4add_font_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  ImFont *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_font_default", 0);

  /* "imgui/core.pyx":1335
 * 
 *     def add_font_default(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1337
 *         self._require_pointer()
 * 
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))             # <<<<<<<<<<<<<<
 * 
 *     def add_font_from_file_ttf(
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->AddFontDefault(NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1337, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_5imgui_4core_5_Font_from_ptr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1334
 *         return self._ptr != NULL
 * 
 *     def add_font_default(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._FontAtlas.add_font_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1339
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_7add_font_from_file_ttf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf[] = "_FontAtlas.add_font_from_file_ttf(self, str filename, float size_pixels, _StaticGlyphRanges glyph_ranges=None)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_7add_font_from_file_ttf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  float __pyx_v_size_pixels;
  struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_glyph_ranges = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_font_from_file_ttf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_size_pixels,&__pyx_n_s_glyph_ranges,0};
    PyObject* values[3] = {0,0,0};

    /* "imgui/core.pyx":1341
 *     def add_font_from_file_ttf(
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,             # <<<<<<<<<<<<<<
 *     ):
 *         self._require_pointer()
 */
    values[2] = (PyObject *)((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size_pixels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_font_from_file_ttf", 0, 2, 3, 1); __PYX_ERR(0, 1339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_glyph_ranges);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_font_from_file_ttf") < 0)) __PYX_ERR(0, 1339, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_size_pixels = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_size_pixels == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1340, __pyx_L3_error)
    __pyx_v_glyph_ranges = ((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_font_from_file_ttf", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1339, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.add_font_from_file_ttf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 1340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_glyph_ranges), __pyx_ptype_5imgui_4core__StaticGlyphRanges, 1, "glyph_ranges", 0))) __PYX_ERR(0, 1341, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self), __pyx_v_filename, __pyx_v_size_pixels, __pyx_v_glyph_ranges);

  /* "imgui/core.pyx":1339
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_filename, float __pyx_v_size_pixels, struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_glyph_ranges) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  ImWchar const *__pyx_t_5;
  int __pyx_t_6;
  ImFont *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_font_from_file_ttf", 0);

  /* "imgui/core.pyx":1343
 *         _StaticGlyphRanges glyph_ranges=None,
 *     ):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         # note: cannot use cimgui.ImWchar here due to Cython bug
 *         # note: whole unicode
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1348
 *         cdef char* in_glyph_ranges
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(             # <<<<<<<<<<<<<<
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":1349
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(
 *             _bytes(filename), size_pixels,  NULL,             # <<<<<<<<<<<<<<
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 *         ))
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 1349, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 1349, __pyx_L1_error)

  /* "imgui/core.pyx":1350
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL             # <<<<<<<<<<<<<<
 *         ))
 * 
 */
  __pyx_t_6 = (((PyObject *)__pyx_v_glyph_ranges) != Py_None);
  if ((__pyx_t_6 != 0)) {
    __pyx_t_5 = __pyx_v_glyph_ranges->ranges_ptr;
  } else {
    __pyx_t_5 = NULL;
  }

  /* "imgui/core.pyx":1348
 *         cdef char* in_glyph_ranges
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(             # <<<<<<<<<<<<<<
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 */
  try {
    __pyx_t_7 = __pyx_v_self->_ptr->AddFontFromFileTTF(__pyx_t_4, __pyx_v_size_pixels, NULL, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1348, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_f_5imgui_4core_5_Font_from_ptr(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1339
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._FontAtlas.add_font_from_file_ttf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1353
 *         ))
 * 
 *     def clear_tex_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearTexData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_9clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_8clear_tex_data[] = "_FontAtlas.clear_tex_data(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_9clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_tex_data (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_8clear_tex_data(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_8clear_tex_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_tex_data", 0);

  /* "imgui/core.pyx":1354
 * 
 *     def clear_tex_data(self):
 *         self._ptr.ClearTexData()             # <<<<<<<<<<<<<<
 * 
 *     def clear_input_data(self):
 */
  try {
    __pyx_v_self->_ptr->ClearTexData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1354, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1353
 *         ))
 * 
 *     def clear_tex_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearTexData()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear_tex_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1356
 *         self._ptr.ClearTexData()
 * 
 *     def clear_input_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_11clear_input_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_10clear_input_data[] = "_FontAtlas.clear_input_data(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_11clear_input_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_input_data (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_10clear_input_data(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10clear_input_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_input_data", 0);

  /* "imgui/core.pyx":1357
 * 
 *     def clear_input_data(self):
 *         self._ptr.ClearInputData()             # <<<<<<<<<<<<<<
 * 
 *     def clear_fonts(self):
 */
  try {
    __pyx_v_self->_ptr->ClearInputData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1357, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1356
 *         self._ptr.ClearTexData()
 * 
 *     def clear_input_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputData()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear_input_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1359
 *         self._ptr.ClearInputData()
 * 
 *     def clear_fonts(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearFonts()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_13clear_fonts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_12clear_fonts[] = "_FontAtlas.clear_fonts(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_13clear_fonts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_fonts (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_12clear_fonts(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_12clear_fonts(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_fonts", 0);

  /* "imgui/core.pyx":1360
 * 
 *     def clear_fonts(self):
 *         self._ptr.ClearFonts()             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  try {
    __pyx_v_self->_ptr->ClearFonts();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1360, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1359
 *         self._ptr.ClearInputData()
 * 
 *     def clear_fonts(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearFonts()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear_fonts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1362
 *         self._ptr.ClearFonts()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._ptr.Clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_15clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_14clear[] = "_FontAtlas.clear(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_15clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_14clear(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_14clear(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "imgui/core.pyx":1363
 * 
 *     def clear(self):
 *         self._ptr.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_default(self):
 */
  try {
    __pyx_v_self->_ptr->Clear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1363, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1362
 *         self._ptr.ClearFonts()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._ptr.Clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1365
 *         self._ptr.Clear()
 * 
 *     def get_glyph_ranges_default(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_17get_glyph_ranges_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default[] = "_FontAtlas.get_glyph_ranges_default(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_17get_glyph_ranges_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_default (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_default", 0);

  /* "imgui/core.pyx":1366
 * 
 *     def get_glyph_ranges_default(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_korean(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesDefault();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1366, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1365
 *         self._ptr.Clear()
 * 
 *     def get_glyph_ranges_default(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1368
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 *     def get_glyph_ranges_korean(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_19get_glyph_ranges_korean(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean[] = "_FontAtlas.get_glyph_ranges_korean(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_19get_glyph_ranges_korean(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_korean (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_korean", 0);

  /* "imgui/core.pyx":1369
 * 
 *     def get_glyph_ranges_korean(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_japanese(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesKorean();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1369, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1368
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 *     def get_glyph_ranges_korean(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_korean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1371
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 *     def get_glyph_ranges_japanese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_21get_glyph_ranges_japanese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese[] = "_FontAtlas.get_glyph_ranges_japanese(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_21get_glyph_ranges_japanese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_japanese (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_japanese", 0);

  /* "imgui/core.pyx":1372
 * 
 *     def get_glyph_ranges_japanese(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_chinese_full(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesJapanese();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1372, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1371
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 *     def get_glyph_ranges_japanese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_japanese", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1374
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 *     def get_glyph_ranges_chinese_full(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_23get_glyph_ranges_chinese_full(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese_full[] = "_FontAtlas.get_glyph_ranges_chinese_full(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_23get_glyph_ranges_chinese_full(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese_full (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese_full(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese_full(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese_full", 0);

  /* "imgui/core.pyx":1375
 * 
 *     def get_glyph_ranges_chinese_full(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_chinese(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesChineseFull();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1375, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1374
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 *     def get_glyph_ranges_chinese_full(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_chinese_full", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1377
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 *     def get_glyph_ranges_chinese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_25get_glyph_ranges_chinese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_24get_glyph_ranges_chinese[] = "_FontAtlas.get_glyph_ranges_chinese(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_25get_glyph_ranges_chinese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_24get_glyph_ranges_chinese(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_24get_glyph_ranges_chinese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese", 0);

  /* "imgui/core.pyx":1378
 * 
 *     def get_glyph_ranges_chinese(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_cyrillic(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesChineseSimplifiedCommon();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1378, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1377
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 *     def get_glyph_ranges_chinese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_chinese", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1380
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 *     def get_glyph_ranges_cyrillic(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_27get_glyph_ranges_cyrillic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_26get_glyph_ranges_cyrillic[] = "_FontAtlas.get_glyph_ranges_cyrillic(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_27get_glyph_ranges_cyrillic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_cyrillic (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_26get_glyph_ranges_cyrillic(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_26get_glyph_ranges_cyrillic(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_cyrillic", 0);

  /* "imgui/core.pyx":1381
 * 
 *     def get_glyph_ranges_cyrillic(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_latin(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesCyrillic();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1381, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1380
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 *     def get_glyph_ranges_cyrillic(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_cyrillic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1383
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 *     def get_glyph_ranges_latin(self):             # <<<<<<<<<<<<<<
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_29get_glyph_ranges_latin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_28get_glyph_ranges_latin[] = "_FontAtlas.get_glyph_ranges_latin(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_29get_glyph_ranges_latin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_latin (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_28get_glyph_ranges_latin(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_28get_glyph_ranges_latin(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_latin", 0);

  /* "imgui/core.pyx":1385
 *     def get_glyph_ranges_latin(self):
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)             # <<<<<<<<<<<<<<
 * 
 *     def get_tex_data_as_alpha8(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_v_5imgui_4core__LATIN_ALL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1383
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 *     def get_glyph_ranges_latin(self):             # <<<<<<<<<<<<<<
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_latin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1387
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 * 
 *     def get_tex_data_as_alpha8(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_31get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_30get_tex_data_as_alpha8[] = "_FontAtlas.get_tex_data_as_alpha8(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_31get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8 (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_30get_tex_data_as_alpha8(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_30get_tex_data_as_alpha8(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  int __pyx_v_width;
  int __pyx_v_height;
  unsigned char *__pyx_v_pixels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8", 0);

  /* "imgui/core.pyx":1388
 * 
 *     def get_tex_data_as_alpha8(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         cdef int width
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1394
 *         cdef unsigned char* pixels
 * 
 *         self._ptr.GetTexDataAsAlpha8(&pixels, &width, &height)             # <<<<<<<<<<<<<<
 * 
 *         return width, height, bytes(pixels[:width*height])
 */
  try {
    __pyx_v_self->_ptr->GetTexDataAsAlpha8((&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1394, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1396
 *         self._ptr.GetTexDataAsAlpha8(&pixels, &width, &height)
 * 
 *         return width, height, bytes(pixels[:width*height])             # <<<<<<<<<<<<<<
 * 
 *     def get_tex_data_as_rgba32(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, (__pyx_v_width * __pyx_v_height) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1387
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 * 
 *     def get_tex_data_as_alpha8(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_tex_data_as_alpha8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1398
 *         return width, height, bytes(pixels[:width*height])
 * 
 *     def get_tex_data_as_rgba32(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_33get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_32get_tex_data_as_rgba32[] = "_FontAtlas.get_tex_data_as_rgba32(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_33get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32 (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_32get_tex_data_as_rgba32(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_32get_tex_data_as_rgba32(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  int __pyx_v_width;
  int __pyx_v_height;
  unsigned char *__pyx_v_pixels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32", 0);

  /* "imgui/core.pyx":1399
 * 
 *     def get_tex_data_as_rgba32(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         cdef int width
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1404
 *         cdef int height
 *         cdef unsigned char* pixels
 *         self._ptr.GetTexDataAsRGBA32(&pixels, &width, &height)             # <<<<<<<<<<<<<<
 * 
 *         return width, height, bytes(pixels[:width*height*4])
 */
  try {
    __pyx_v_self->_ptr->GetTexDataAsRGBA32((&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1404, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1406
 *         self._ptr.GetTexDataAsRGBA32(&pixels, &width, &height)
 * 
 *         return width, height, bytes(pixels[:width*height*4])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, ((__pyx_v_width * __pyx_v_height) * 4) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1398
 *         return width, height, bytes(pixels[:width*height])
 * 
 *     def get_tex_data_as_rgba32(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_tex_data_as_rgba32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1409
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Note: difference in mapping (maps actual TexID and not TextureID)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id___get__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10texture_id___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1417
 * 
 *         """
 *         return <object>self._ptr.TexID             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_ptr->TexID));
  __pyx_r = ((PyObject *)__pyx_v_self->_ptr->TexID);
  goto __pyx_L0;

  /* "imgui/core.pyx":1409
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Note: difference in mapping (maps actual TexID and not TextureID)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1430
 * 
 *     @texture_id.setter
 *     def texture_id(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.TexID = <void *> value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id_2__set__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id_2__set__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1431
 *     @texture_id.setter
 *     def texture_id(self, value):
 *         self._ptr.TexID = <void *> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_ptr->TexID = ((void *)__pyx_v_value);

  /* "imgui/core.pyx":1430
 * 
 *     @texture_id.setter
 *     def texture_id(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.TexID = <void *> value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1421
 * 
 *     @property
 *     def texture_width(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexWidth
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_13texture_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_13texture_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_13texture_width___get__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_13texture_width___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1422
 *     @property
 *     def texture_width(self):
 *         return <int>self._ptr.TexWidth             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_self->_ptr->TexWidth)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1421
 * 
 *     @property
 *     def texture_width(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexWidth
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.texture_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1425
 * 
 *     @property
 *     def texture_height(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexHeight
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_14texture_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_14texture_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_14texture_height___get__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_14texture_height___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1426
 *     @property
 *     def texture_height(self):
 *         return <int>self._ptr.TexHeight             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_self->_ptr->TexHeight)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1425
 * 
 *     @property
 *     def texture_height(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexHeight
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.texture_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_34__reduce_cython__[] = "_FontAtlas.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_34__reduce_cython__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_36__setstate_cython__[] = "_FontAtlas.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_36__setstate_cython__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1453
 *     cdef object _set_clipboard_text_fn
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO___init__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO___init__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<ImGuiIO> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "imgui/core.pyx":1454
 * 
 *     def __init__(self):
 *         self._ptr = &cimgui.GetIO()             # <<<<<<<<<<<<<<
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 *         self._get_clipboard_text_fn = None
 */
  try {
    __pyx_t_1 = ImGui::GetIO();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1454, __pyx_L1_error)
  }
  __pyx_v_self->_ptr = (&__pyx_t_1);

  /* "imgui/core.pyx":1455
 *     def __init__(self):
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)             # <<<<<<<<<<<<<<
 *         self._get_clipboard_text_fn = None
 *         self._set_clipboard_text_fn = None
 */
  __pyx_t_2 = __pyx_f_5imgui_4core_10_FontAtlas_from_ptr(__pyx_v_self->_ptr->Fonts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fonts);
  __Pyx_DECREF(__pyx_v_self->_fonts);
  __pyx_v_self->_fonts = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1456
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 *         self._get_clipboard_text_fn = None             # <<<<<<<<<<<<<<
 *         self._set_clipboard_text_fn = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_get_clipboard_text_fn);
  __Pyx_DECREF(__pyx_v_self->_get_clipboard_text_fn);
  __pyx_v_self->_get_clipboard_text_fn = Py_None;

  /* "imgui/core.pyx":1457
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 *         self._get_clipboard_text_fn = None
 *         self._set_clipboard_text_fn = None             # <<<<<<<<<<<<<<
 * 
 *     # ... maping of input properties ...
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_set_clipboard_text_fn);
  __Pyx_DECREF(__pyx_v_self->_set_clipboard_text_fn);
  __pyx_v_self->_set_clipboard_text_fn = Py_None;

  /* "imgui/core.pyx":1453
 *     cdef object _set_clipboard_text_fn
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._IO.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1461
 *     # ... maping of input properties ...
 *     @property
 *     def config_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigFlags
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_12config_flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_12config_flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_12config_flags___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_12config_flags___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1462
 *     @property
 *     def config_flags(self):
 *         return self._ptr.ConfigFlags             # <<<<<<<<<<<<<<
 * 
 *     @config_flags.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags(__pyx_v_self->_ptr->ConfigFlags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1461
 *     # ... maping of input properties ...
 *     @property
 *     def config_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigFlags
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.config_flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1465
 * 
 *     @config_flags.setter
 *     def config_flags(self, cimgui.ImGuiConfigFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigFlags = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_12config_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_12config_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  ImGuiConfigFlags __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_ImGuiConfigFlags(__pyx_arg_value); if (unlikely((__pyx_v_value == ((ImGuiConfigFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1465, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.config_flags.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_12config_flags_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((ImGuiConfigFlags)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_12config_flags_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImGuiConfigFlags __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1466
 *     @config_flags.setter
 *     def config_flags(self, cimgui.ImGuiConfigFlags value):
 *         self._ptr.ConfigFlags = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ConfigFlags = __pyx_v_value;

  /* "imgui/core.pyx":1465
 * 
 *     @config_flags.setter
 *     def config_flags(self, cimgui.ImGuiConfigFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigFlags = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1469
 * 
 *     @property
 *     def backend_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.BackendFlags
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_13backend_flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_13backend_flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13backend_flags___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_13backend_flags___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1470
 *     @property
 *     def backend_flags(self):
 *         return self._ptr.BackendFlags             # <<<<<<<<<<<<<<
 * 
 *     @backend_flags.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags(__pyx_v_self->_ptr->BackendFlags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1469
 * 
 *     @property
 *     def backend_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.BackendFlags
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.backend_flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1473
 * 
 *     @backend_flags.setter
 *     def backend_flags(self, cimgui.ImGuiBackendFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.BackendFlags = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_13backend_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_13backend_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  ImGuiBackendFlags __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_ImGuiBackendFlags(__pyx_arg_value); if (unlikely((__pyx_v_value == ((ImGuiBackendFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.backend_flags.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13backend_flags_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((ImGuiBackendFlags)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_13backend_flags_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImGuiBackendFlags __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1474
 *     @backend_flags.setter
 *     def backend_flags(self, cimgui.ImGuiBackendFlags value):
 *         self._ptr.BackendFlags = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->BackendFlags = __pyx_v_value;

  /* "imgui/core.pyx":1473
 * 
 *     @backend_flags.setter
 *     def backend_flags(self, cimgui.ImGuiBackendFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.BackendFlags = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1477
 * 
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_12display_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_12display_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_12display_size___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_12display_size___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1478
 *     @property
 *     def display_size(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)             # <<<<<<<<<<<<<<
 * 
 *     @display_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplaySize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1477
 * 
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1481
 * 
 *     @display_size.setter
 *     def display_size(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_12display_size_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_12display_size_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1482
 *     @display_size.setter
 *     def display_size(self, value):
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1482, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplaySize = __pyx_t_1;

  /* "imgui/core.pyx":1481
 * 
 *     @display_size.setter
 *     def display_size(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1485
 * 
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.DeltaTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_10delta_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_10delta_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10delta_time___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_10delta_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1486
 *     @property
 *     def delta_time(self):
 *         return self._ptr.DeltaTime             # <<<<<<<<<<<<<<
 * 
 *     @delta_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->DeltaTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1485
 * 
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.DeltaTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.delta_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1489
 * 
 *     @delta_time.setter
 *     def delta_time(self, float time):             # <<<<<<<<<<<<<<
 *         self._ptr.DeltaTime = time
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_time); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_time) {
  float __pyx_v_time;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_time); {
    __pyx_v_time = __pyx_PyFloat_AsFloat(__pyx_arg_time); if (unlikely((__pyx_v_time == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.delta_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10delta_time_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_10delta_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_time) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1490
 *     @delta_time.setter
 *     def delta_time(self, float time):
 *         self._ptr.DeltaTime = time             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->DeltaTime = __pyx_v_time;

  /* "imgui/core.pyx":1489
 * 
 *     @delta_time.setter
 *     def delta_time(self, float time):             # <<<<<<<<<<<<<<
 *         self._ptr.DeltaTime = time
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1493
 * 
 *     @property
 *     def ini_saving_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniSavingRate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_15ini_saving_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1494
 *     @property
 *     def ini_saving_rate(self):
 *         return self._ptr.IniSavingRate             # <<<<<<<<<<<<<<
 * 
 *     @ini_saving_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->IniSavingRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1493
 * 
 *     @property
 *     def ini_saving_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniSavingRate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.ini_saving_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1497
 * 
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniSavingRate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1497, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.ini_saving_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1498
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):
 *         self._ptr.IniSavingRate = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->IniSavingRate = __pyx_v_value;

  /* "imgui/core.pyx":1497
 * 
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniSavingRate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1501
 * 
 *     @property
 *     def log_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.LogFilename
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_13log_file_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_13log_file_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13log_file_name___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_13log_file_name___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1502
 *     @property
 *     def log_file_name(self):
 *         return self._ptr.LogFilename             # <<<<<<<<<<<<<<
 * 
 *     @log_file_name.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->_ptr->LogFilename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1501
 * 
 *     @property
 *     def log_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.LogFilename
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.log_file_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1505
 * 
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._ptr.LogFilename = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_13log_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_13log_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsWritableString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 1505, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.log_file_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13log_file_name_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_13log_file_name_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, char *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1506
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):
 *         self._ptr.LogFilename = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->LogFilename = __pyx_v_value;

  /* "imgui/core.pyx":1505
 * 
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._ptr.LogFilename = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1509
 * 
 *     @property
 *     def ini_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniFilename
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_13ini_file_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_13ini_file_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13ini_file_name___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_13ini_file_name___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1510
 *     @property
 *     def ini_file_name(self):
 *         return self._ptr.IniFilename             # <<<<<<<<<<<<<<
 * 
 *     @ini_file_name.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->_ptr->IniFilename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1509
 * 
 *     @property
 *     def ini_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniFilename
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.ini_file_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1513
 * 
 *     @ini_file_name.setter
 *     def ini_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniFilename = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_13ini_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_13ini_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsWritableString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 1513, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.ini_file_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13ini_file_name_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_13ini_file_name_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, char *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1514
 *     @ini_file_name.setter
 *     def ini_file_name(self, char* value):
 *         self._ptr.IniFilename = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->IniFilename = __pyx_v_value;

  /* "imgui/core.pyx":1513
 * 
 *     @ini_file_name.setter
 *     def ini_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniFilename = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1517
 * 
 *     @property
 *     def mouse_double_click_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1518
 *     @property
 *     def mouse_double_click_time(self):
 *         return self._ptr.MouseDoubleClickTime             # <<<<<<<<<<<<<<
 * 
 *     @mouse_double_click_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDoubleClickTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1517
 * 
 *     @property
 *     def mouse_double_click_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1521
 * 
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickTime = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1521, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1522
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):
 *         self._ptr.MouseDoubleClickTime = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDoubleClickTime = __pyx_v_value;

  /* "imgui/core.pyx":1521
 * 
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickTime = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1525
 * 
 *     @property
 *     def mouse_double_click_max_distance(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickMaxDist
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1526
 *     @property
 *     def mouse_double_click_max_distance(self):
 *         return self._ptr.MouseDoubleClickMaxDist             # <<<<<<<<<<<<<<
 * 
 *     @mouse_double_click_max_distance.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDoubleClickMaxDist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1525
 * 
 *     @property
 *     def mouse_double_click_max_distance(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickMaxDist
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_max_distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1529
 * 
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickMaxDist = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1529, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_max_distance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1530
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):
 *         self._ptr.MouseDoubleClickMaxDist = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDoubleClickMaxDist = __pyx_v_value;

  /* "imgui/core.pyx":1529
 * 
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickMaxDist = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1533
 * 
 *     @property
 *     def mouse_drag_threshold(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDragThreshold
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1534
 *     @property
 *     def mouse_drag_threshold(self):
 *         return self._ptr.MouseDragThreshold             # <<<<<<<<<<<<<<
 * 
 *     @mouse_drag_threshold.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDragThreshold); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1533
 * 
 *     @property
 *     def mouse_drag_threshold(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDragThreshold
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_drag_threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1537
 * 
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDragThreshold = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1537, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_drag_threshold.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1538
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):
 *         self._ptr.MouseDragThreshold = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDragThreshold = __pyx_v_value;

  /* "imgui/core.pyx":1537
 * 
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDragThreshold = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1541
 * 
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_map_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_7key_map___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_map___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_key_map = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1543
 *     def key_map(self):
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),             # <<<<<<<<<<<<<<
 *             format='i',
 *             itemsize=sizeof(int),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_COUNT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_i) < 0) __PYX_ERR(0, 1543, __pyx_L1_error)

  /* "imgui/core.pyx":1545
 *             shape=(enums.ImGuiKey_COUNT,),
 *             format='i',
 *             itemsize=sizeof(int),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imgui/core.pyx":1546
 *             format='i',
 *             itemsize=sizeof(int),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 1543, __pyx_L1_error)

  /* "imgui/core.pyx":1542
 *     @property
 *     def key_map(self):
 *         cdef cvarray key_map = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(enums.ImGuiKey_COUNT,),
 *             format='i',
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_key_map = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "imgui/core.pyx":1548
 *             allocate_buffer=False
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap             # <<<<<<<<<<<<<<
 *         return key_map
 * 
 */
  __pyx_v_key_map->data = ((char *)__pyx_v_self->_ptr->KeyMap);

  /* "imgui/core.pyx":1549
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap
 *         return key_map             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_key_map));
  __pyx_r = ((PyObject *)__pyx_v_key_map);
  goto __pyx_L0;

  /* "imgui/core.pyx":1541
 * 
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._IO.key_map.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_key_map);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1552
 * 
 *     @property
 *     def key_repeat_delay(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatDelay
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_16key_repeat_delay___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1553
 *     @property
 *     def key_repeat_delay(self):
 *         return self._ptr.KeyRepeatDelay             # <<<<<<<<<<<<<<
 * 
 *     @key_repeat_delay.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->KeyRepeatDelay); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1552
 * 
 *     @property
 *     def key_repeat_delay(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatDelay
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_delay.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1556
 * 
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatDelay = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_delay.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1557
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):
 *         self._ptr.KeyRepeatDelay = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyRepeatDelay = __pyx_v_value;

  /* "imgui/core.pyx":1556
 * 
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatDelay = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1560
 * 
 *     @property
 *     def key_repeat_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatRate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_15key_repeat_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1561
 *     @property
 *     def key_repeat_rate(self):
 *         return self._ptr.KeyRepeatRate             # <<<<<<<<<<<<<<
 * 
 *     @key_repeat_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->KeyRepeatRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1560
 * 
 *     @property
 *     def key_repeat_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatRate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1564
 * 
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatRate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1564, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1565
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):
 *         self._ptr.KeyRepeatRate = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyRepeatRate = __pyx_v_value;

  /* "imgui/core.pyx":1564
 * 
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatRate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1568
 * 
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         return self._fonts
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_5fonts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_5fonts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_5fonts___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_5fonts___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1569
 *     @property
 *     def fonts(self):
 *         return self._fonts             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_fonts);
  __pyx_r = __pyx_v_self->_fonts;
  goto __pyx_L0;

  /* "imgui/core.pyx":1568
 * 
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         return self._fonts
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1572
 * 
 *     @property
 *     def font_global_scale(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontGlobalScale
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_17font_global_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_17font_global_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17font_global_scale___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_17font_global_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1573
 *     @property
 *     def font_global_scale(self):
 *         return self._ptr.FontGlobalScale             # <<<<<<<<<<<<<<
 * 
 *     @font_global_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->FontGlobalScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1572
 * 
 *     @property
 *     def font_global_scale(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontGlobalScale
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.font_global_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1576
 * 
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontGlobalScale = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_17font_global_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_17font_global_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1576, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.font_global_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17font_global_scale_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_17font_global_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1577
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):
 *         self._ptr.FontGlobalScale = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FontGlobalScale = __pyx_v_value;

  /* "imgui/core.pyx":1576
 * 
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontGlobalScale = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1580
 * 
 *     @property
 *     def font_allow_user_scaling(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontAllowUserScaling
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1581
 *     @property
 *     def font_allow_user_scaling(self):
 *         return self._ptr.FontAllowUserScaling             # <<<<<<<<<<<<<<
 * 
 *     @font_allow_user_scaling.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->FontAllowUserScaling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1580
 * 
 *     @property
 *     def font_allow_user_scaling(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontAllowUserScaling
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.font_allow_user_scaling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1584
 * 
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontAllowUserScaling = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1584, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.font_allow_user_scaling.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1585
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):
 *         self._ptr.FontAllowUserScaling = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FontAllowUserScaling = __pyx_v_value;

  /* "imgui/core.pyx":1584
 * 
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontAllowUserScaling = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1588
 * 
 *     @property
 *     def display_fb_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_16display_fb_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_16display_fb_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16display_fb_scale___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_16display_fb_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1589
 *     @property
 *     def display_fb_scale(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)             # <<<<<<<<<<<<<<
 * 
 *     @display_fb_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayFramebufferScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1588
 * 
 *     @property
 *     def display_fb_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_fb_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1592
 * 
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16display_fb_scale_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_16display_fb_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1593
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1593, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayFramebufferScale = __pyx_t_1;

  /* "imgui/core.pyx":1592
 * 
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_fb_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1596
 * 
 *     @property
 *     def display_visible_min(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_min_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_min___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_min___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1597
 *     @property
 *     def display_visible_min(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)             # <<<<<<<<<<<<<<
 * 
 *     @display_visible_min.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayVisibleMin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1596
 * 
 *     @property
 *     def display_visible_min(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_visible_min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1600
 * 
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_min_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_19display_visible_min_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1601
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1601, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayVisibleMin = __pyx_t_1;

  /* "imgui/core.pyx":1600
 * 
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_visible_min.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1604
 * 
 *     @property
 *     def display_visible_max(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_max___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_max___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1605
 *     @property
 *     def display_visible_max(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)             # <<<<<<<<<<<<<<
 * 
 *     @display_visible_max.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayVisibleMax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1604
 * 
 *     @property
 *     def display_visible_max(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_visible_max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1608
 * 
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_max_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_19display_visible_max_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1609
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1609, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayVisibleMax = __pyx_t_1;

  /* "imgui/core.pyx":1608
 * 
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_visible_max.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1612
 * 
 *     @property
 *     def config_mac_osx_behaviors(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigMacOSXBehaviors
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_24config_mac_osx_behaviors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_24config_mac_osx_behaviors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_24config_mac_osx_behaviors___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_24config_mac_osx_behaviors___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1613
 *     @property
 *     def config_mac_osx_behaviors(self):
 *         return self._ptr.ConfigMacOSXBehaviors             # <<<<<<<<<<<<<<
 * 
 *     @config_mac_osx_behaviors.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->ConfigMacOSXBehaviors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1612
 * 
 *     @property
 *     def config_mac_osx_behaviors(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigMacOSXBehaviors
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.config_mac_osx_behaviors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1616
 * 
 *     @config_mac_osx_behaviors.setter
 *     def config_mac_osx_behaviors(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigMacOSXBehaviors = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_24config_mac_osx_behaviors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_24config_mac_osx_behaviors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1616, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.config_mac_osx_behaviors.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_24config_mac_osx_behaviors_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_24config_mac_osx_behaviors_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1617
 *     @config_mac_osx_behaviors.setter
 *     def config_mac_osx_behaviors(self, cimgui.bool value):
 *         self._ptr.ConfigMacOSXBehaviors = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ConfigMacOSXBehaviors = __pyx_v_value;

  /* "imgui/core.pyx":1616
 * 
 *     @config_mac_osx_behaviors.setter
 *     def config_mac_osx_behaviors(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigMacOSXBehaviors = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1620
 * 
 *     @property
 *     def config_cursor_blink(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigInputTextCursorBlink
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_19config_cursor_blink_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_19config_cursor_blink_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19config_cursor_blink___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_19config_cursor_blink___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1621
 *     @property
 *     def config_cursor_blink(self):
 *         return self._ptr.ConfigInputTextCursorBlink             # <<<<<<<<<<<<<<
 * 
 *     @config_cursor_blink.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->ConfigInputTextCursorBlink); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1620
 * 
 *     @property
 *     def config_cursor_blink(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigInputTextCursorBlink
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.config_cursor_blink.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1624
 * 
 *     @config_cursor_blink.setter
 *     def config_cursor_blink(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigInputTextCursorBlink = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_19config_cursor_blink_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_19config_cursor_blink_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.config_cursor_blink.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19config_cursor_blink_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_19config_cursor_blink_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1625
 *     @config_cursor_blink.setter
 *     def config_cursor_blink(self, cimgui.bool value):
 *         self._ptr.ConfigInputTextCursorBlink = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ConfigInputTextCursorBlink = __pyx_v_value;

  /* "imgui/core.pyx":1624
 * 
 *     @config_cursor_blink.setter
 *     def config_cursor_blink(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigInputTextCursorBlink = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1628
 * 
 *     @property
 *     def config_resize_windows_from_edges(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigResizeWindowsFromEdges
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_32config_resize_windows_from_edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_32config_resize_windows_from_edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_32config_resize_windows_from_edges___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_32config_resize_windows_from_edges___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1629
 *     @property
 *     def config_resize_windows_from_edges(self):
 *         return self._ptr.ConfigResizeWindowsFromEdges             # <<<<<<<<<<<<<<
 * 
 *     @config_resize_windows_from_edges.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->ConfigResizeWindowsFromEdges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1628
 * 
 *     @property
 *     def config_resize_windows_from_edges(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigResizeWindowsFromEdges
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.config_resize_windows_from_edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1632
 * 
 *     @config_resize_windows_from_edges.setter
 *     def config_resize_windows_from_edges(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigResizeWindowsFromEdges = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_32config_resize_windows_from_edges_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_32config_resize_windows_from_edges_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1632, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.config_resize_windows_from_edges.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_32config_resize_windows_from_edges_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_32config_resize_windows_from_edges_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1633
 *     @config_resize_windows_from_edges.setter
 *     def config_resize_windows_from_edges(self, cimgui.bool value):
 *         self._ptr.ConfigResizeWindowsFromEdges = value             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->_ptr->ConfigResizeWindowsFromEdges = __pyx_v_value;

  /* "imgui/core.pyx":1632
 * 
 *     @config_resize_windows_from_edges.setter
 *     def config_resize_windows_from_edges(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigResizeWindowsFromEdges = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1636
 * 
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):             # <<<<<<<<<<<<<<
 *         text = _io.get_clipboard_text_fn()
 *         if type(text) is bytes:
 */

static char const *__pyx_f_5imgui_4core_3_IO__get_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data) {
  PyObject *__pyx_v_text = NULL;
  char const *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_clipboard_text", 0);

  /* "imgui/core.pyx":1637
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io.get_clipboard_text_fn()             # <<<<<<<<<<<<<<
 *         if type(text) is bytes:
 *             return text
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_io); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_clipboard_text_fn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_text = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":1638
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io.get_clipboard_text_fn()
 *         if type(text) is bytes:             # <<<<<<<<<<<<<<
 *             return text
 *         return _bytes(text)
 */
  __pyx_t_4 = (((PyObject *)Py_TYPE(__pyx_v_text)) == ((PyObject *)(&PyBytes_Type)));
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "imgui/core.pyx":1639
 *         text = _io.get_clipboard_text_fn()
 *         if type(text) is bytes:
 *             return text             # <<<<<<<<<<<<<<
 *         return _bytes(text)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_text); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 1639, __pyx_L1_error)
    __pyx_r = __pyx_t_6;
    goto __pyx_L0;

    /* "imgui/core.pyx":1638
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io.get_clipboard_text_fn()
 *         if type(text) is bytes:             # <<<<<<<<<<<<<<
 *             return text
 *         return _bytes(text)
 */
  }

  /* "imgui/core.pyx":1640
 *         if type(text) is bytes:
 *             return text
 *         return _bytes(text)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (!(likely(PyString_CheckExact(__pyx_v_text))||((__pyx_v_text) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_text)->tp_name), 0))) __PYX_ERR(0, 1640, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(((PyObject*)__pyx_v_text)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 1640, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 1640, __pyx_L1_error)
  __pyx_r = __pyx_t_6;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1636
 * 
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):             # <<<<<<<<<<<<<<
 *         text = _io.get_clipboard_text_fn()
 *         if type(text) is bytes:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("imgui.core._IO._get_clipboard_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1643
 * 
 *     @property
 *     def get_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return self._get_clipboard_text_fn
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_21get_clipboard_text_fn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_21get_clipboard_text_fn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_21get_clipboard_text_fn___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_21get_clipboard_text_fn___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1644
 *     @property
 *     def get_clipboard_text_fn(self):
 *         return self._get_clipboard_text_fn             # <<<<<<<<<<<<<<
 * 
 *     @get_clipboard_text_fn.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_get_clipboard_text_fn);
  __pyx_r = __pyx_v_self->_get_clipboard_text_fn;
  goto __pyx_L0;

  /* "imgui/core.pyx":1643
 * 
 *     @property
 *     def get_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return self._get_clipboard_text_fn
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1647
 * 
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             self._get_clipboard_text_fn = func
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_21get_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_21get_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_21get_clipboard_text_fn_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_21get_clipboard_text_fn_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  char const *(*__pyx_t_3)(void *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1648
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             self._get_clipboard_text_fn = func
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 */
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_func); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1648, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "imgui/core.pyx":1649
 *     def get_clipboard_text_fn(self, func):
 *         if callable(func):
 *             self._get_clipboard_text_fn = func             # <<<<<<<<<<<<<<
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 *         else:
 */
    __Pyx_INCREF(__pyx_v_func);
    __Pyx_GIVEREF(__pyx_v_func);
    __Pyx_GOTREF(__pyx_v_self->_get_clipboard_text_fn);
    __Pyx_DECREF(__pyx_v_self->_get_clipboard_text_fn);
    __pyx_v_self->_get_clipboard_text_fn = __pyx_v_func;

    /* "imgui/core.pyx":1650
 *         if callable(func):
 *             self._get_clipboard_text_fn = func
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_5imgui_4core__IO *)__pyx_v_self->__pyx_vtab)->_get_clipboard_text;
    __pyx_v_self->_ptr->GetClipboardTextFn = __pyx_t_3;

    /* "imgui/core.pyx":1648
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             self._get_clipboard_text_fn = func
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1652
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_func); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_func_is_not_a_callable_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1652, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1647
 * 
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             self._get_clipboard_text_fn = func
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core._IO.get_clipboard_text_fn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1655
 * 
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):             # <<<<<<<<<<<<<<
 *         _io.set_clipboard_text_fn(_from_bytes(text))
 * 
 */

static void __pyx_f_5imgui_4core_3_IO__set_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data, char const *__pyx_v_text) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_clipboard_text", 0);

  /* "imgui/core.pyx":1656
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):
 *         _io.set_clipboard_text_fn(_from_bytes(text))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_io); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_set_clipboard_text_fn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_f_5imgui_4core__from_bytes(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1655
 * 
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):             # <<<<<<<<<<<<<<
 *         _io.set_clipboard_text_fn(_from_bytes(text))
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("imgui.core._IO._set_clipboard_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "imgui/core.pyx":1659
 * 
 *     @property
 *     def set_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return self._set_clipboard_text_fn
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_21set_clipboard_text_fn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_21set_clipboard_text_fn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_21set_clipboard_text_fn___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_21set_clipboard_text_fn___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1660
 *     @property
 *     def set_clipboard_text_fn(self):
 *         return self._set_clipboard_text_fn             # <<<<<<<<<<<<<<
 * 
 *     @set_clipboard_text_fn.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_set_clipboard_text_fn);
  __pyx_r = __pyx_v_self->_set_clipboard_text_fn;
  goto __pyx_L0;

  /* "imgui/core.pyx":1659
 * 
 *     @property
 *     def set_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return self._set_clipboard_text_fn
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1663
 * 
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             self._set_clipboard_text_fn = func
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_21set_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_21set_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_21set_clipboard_text_fn_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_21set_clipboard_text_fn_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  void (*__pyx_t_3)(void *, char const *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1664
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             self._set_clipboard_text_fn = func
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 */
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_func); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1664, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "imgui/core.pyx":1665
 *     def set_clipboard_text_fn(self, func):
 *         if callable(func):
 *             self._set_clipboard_text_fn = func             # <<<<<<<<<<<<<<
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 *         else:
 */
    __Pyx_INCREF(__pyx_v_func);
    __Pyx_GIVEREF(__pyx_v_func);
    __Pyx_GOTREF(__pyx_v_self->_set_clipboard_text_fn);
    __Pyx_DECREF(__pyx_v_self->_set_clipboard_text_fn);
    __pyx_v_self->_set_clipboard_text_fn = __pyx_v_func;

    /* "imgui/core.pyx":1666
 *         if callable(func):
 *             self._set_clipboard_text_fn = func
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_5imgui_4core__IO *)__pyx_v_self->__pyx_vtab)->_set_clipboard_text;
    __pyx_v_self->_ptr->SetClipboardTextFn = __pyx_t_3;

    /* "imgui/core.pyx":1664
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             self._set_clipboard_text_fn = func
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1668
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_func); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_func_is_not_a_callable_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1668, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1663
 * 
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             self._set_clipboard_text_fn = func
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core._IO.set_clipboard_text_fn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1671
 * 
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9mouse_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9mouse_pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9mouse_pos___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9mouse_pos___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1672
 *     @property
 *     def mouse_pos(self):
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)             # <<<<<<<<<<<<<<
 * 
 *     @mouse_pos.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->MousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1671
 * 
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1675
 * 
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9mouse_pos_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_9mouse_pos_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1676
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1676, __pyx_L1_error)
  __pyx_v_self->_ptr->MousePos = __pyx_t_1;

  /* "imgui/core.pyx":1675
 * 
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1679
 * 
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_10mouse_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_10mouse_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10mouse_down___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_10mouse_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_mouse_down = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1683
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(
 *             shape=(5,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__25) < 0) __PYX_ERR(0, 1683, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_b) < 0) __PYX_ERR(0, 1683, __pyx_L1_error)

  /* "imgui/core.pyx":1685
 *             shape=(5,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":1686
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 1683, __pyx_L1_error)

  /* "imgui/core.pyx":1682
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(5,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mouse_down = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1688
 *             allocate_buffer=False
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown             # <<<<<<<<<<<<<<
 *         return mouse_down
 * 
 */
  __pyx_v_mouse_down->data = ((char *)__pyx_v_self->_ptr->MouseDown);

  /* "imgui/core.pyx":1689
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown
 *         return mouse_down             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mouse_down));
  __pyx_r = ((PyObject *)__pyx_v_mouse_down);
  goto __pyx_L0;

  /* "imgui/core.pyx":1679
 * 
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._IO.mouse_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mouse_down);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1692
 * 
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheel
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_11mouse_wheel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_11mouse_wheel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_11mouse_wheel___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_11mouse_wheel___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1693
 *     @property
 *     def mouse_wheel(self):
 *         return self._ptr.MouseWheel             # <<<<<<<<<<<<<<
 * 
 *     @mouse_wheel.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseWheel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1692
 * 
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheel
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_wheel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1696
 * 
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheel = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1696, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_wheel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_11mouse_wheel_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_11mouse_wheel_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1697
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):
 *         self._ptr.MouseWheel = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseWheel = __pyx_v_value;

  /* "imgui/core.pyx":1696
 * 
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheel = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1700
 * 
 *     @property
 *     def mouse_wheel_horizontal(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheelH
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_22mouse_wheel_horizontal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_22mouse_wheel_horizontal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_22mouse_wheel_horizontal___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_22mouse_wheel_horizontal___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1701
 *     @property
 *     def mouse_wheel_horizontal(self):
 *         return self._ptr.MouseWheelH             # <<<<<<<<<<<<<<
 * 
 *     @mouse_wheel_horizontal.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseWheelH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1700
 * 
 *     @property
 *     def mouse_wheel_horizontal(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheelH
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_wheel_horizontal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1704
 * 
 *     @mouse_wheel_horizontal.setter
 *     def mouse_wheel_horizontal(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheelH = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_22mouse_wheel_horizontal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_22mouse_wheel_horizontal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1704, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_wheel_horizontal.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_22mouse_wheel_horizontal_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_22mouse_wheel_horizontal_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1705
 *     @mouse_wheel_horizontal.setter
 *     def mouse_wheel_horizontal(self, float value):
 *         self._ptr.MouseWheelH = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseWheelH = __pyx_v_value;

  /* "imgui/core.pyx":1704
 * 
 *     @mouse_wheel_horizontal.setter
 *     def mouse_wheel_horizontal(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheelH = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1708
 * 
 *     @property
 *     def mouse_draw_cursor(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDrawCursor
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1709
 *     @property
 *     def mouse_draw_cursor(self):
 *         return self._ptr.MouseDrawCursor             # <<<<<<<<<<<<<<
 * 
 *     @mouse_draw_cursor.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->MouseDrawCursor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1708
 * 
 *     @property
 *     def mouse_draw_cursor(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDrawCursor
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_draw_cursor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1712
 * 
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDrawCursor = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1712, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_draw_cursor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1713
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):
 *         self._ptr.MouseDrawCursor = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDrawCursor = __pyx_v_value;

  /* "imgui/core.pyx":1712
 * 
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDrawCursor = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1716
 * 
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyCtrl
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_8key_ctrl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_8key_ctrl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_8key_ctrl___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_8key_ctrl___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1717
 *     @property
 *     def key_ctrl(self):
 *         return self._ptr.KeyCtrl             # <<<<<<<<<<<<<<
 * 
 *     @key_ctrl.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyCtrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1716
 * 
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyCtrl
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_ctrl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1720
 * 
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyCtrl = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1720, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_ctrl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_8key_ctrl_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_8key_ctrl_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1721
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):
 *         self._ptr.KeyCtrl = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyCtrl = __pyx_v_value;

  /* "imgui/core.pyx":1720
 * 
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyCtrl = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1724
 * 
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyShift
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_shift_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_shift_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_shift___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_shift___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1725
 *     @property
 *     def key_shift(self):
 *         return self._ptr.KeyShift             # <<<<<<<<<<<<<<
 * 
 *     @key_shift.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyShift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1724
 * 
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyShift
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_shift.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1728
 * 
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyShift = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_shift.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_shift_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_9key_shift_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1729
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):
 *         self._ptr.KeyShift = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyShift = __pyx_v_value;

  /* "imgui/core.pyx":1728
 * 
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyShift = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1732
 * 
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyAlt
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_alt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_alt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_7key_alt___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_alt___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1733
 *     @property
 *     def key_alt(self):
 *         return self._ptr.KeyAlt             # <<<<<<<<<<<<<<
 * 
 *     @key_alt.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyAlt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1732
 * 
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyAlt
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_alt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1736
 * 
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyAlt = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1736, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_alt.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_7key_alt_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_7key_alt_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1737
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):
 *         self._ptr.KeyAlt = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyAlt = __pyx_v_value;

  /* "imgui/core.pyx":1736
 * 
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyAlt = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1740
 * 
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeySuper
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_super_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_super_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_super___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_super___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1741
 *     @property
 *     def key_super(self):
 *         return self._ptr.KeySuper             # <<<<<<<<<<<<<<
 * 
 *     @key_super.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeySuper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1740
 * 
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeySuper
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_super.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1744
 * 
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeySuper = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1744, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_super.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_super_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_9key_super_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":1745
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):
 *         self._ptr.KeySuper = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeySuper = __pyx_v_value;

  /* "imgui/core.pyx":1744
 * 
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeySuper = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1748
 * 
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9keys_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9keys_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9keys_down___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9keys_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_keys_down = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1752
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(
 *             shape=(512,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__26) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_b) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)

  /* "imgui/core.pyx":1754
 *             shape=(512,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":1755
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)

  /* "imgui/core.pyx":1751
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(512,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_keys_down = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1757
 *             allocate_buffer=False
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown             # <<<<<<<<<<<<<<
 *         return keys_down
 * 
 */
  __pyx_v_keys_down->data = ((char *)__pyx_v_self->_ptr->KeysDown);

  /* "imgui/core.pyx":1758
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown
 *         return keys_down             # <<<<<<<<<<<<<<
 * 
 *     def add_input_character(self, cimgui.ImWchar c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_keys_down));
  __pyx_r = ((PyObject *)__pyx_v_keys_down);
  goto __pyx_L0;

  /* "imgui/core.pyx":1748
 * 
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._IO.keys_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_keys_down);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1760
 *         return keys_down
 * 
 *     def add_input_character(self, cimgui.ImWchar c):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharacter(c)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_arg_c); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_2add_input_character[] = "_IO.add_input_character(self, ImWchar c)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_arg_c) {
  ImWchar __pyx_v_c;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_input_character (wrapper)", 0);
  assert(__pyx_arg_c); {
    __pyx_v_c = __Pyx_PyInt_As_ImWchar(__pyx_arg_c); if (unlikely((__pyx_v_c == ((ImWchar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1760, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.add_input_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_2add_input_character(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((ImWchar)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_2add_input_character(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImWchar __pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_input_character", 0);

  /* "imgui/core.pyx":1761
 * 
 *     def add_input_character(self, cimgui.ImWchar c):
 *         self._ptr.AddInputCharacter(c)             # <<<<<<<<<<<<<<
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):
 */
  try {
    __pyx_v_self->_ptr->AddInputCharacter(__pyx_v_c);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1761, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1760
 *         return keys_down
 * 
 *     def add_input_character(self, cimgui.ImWchar c):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharacter(c)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.add_input_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1763
 *         self._ptr.AddInputCharacter(c)
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_5add_input_characters_utf8(PyObject *__pyx_v_self, PyObject *__pyx_v_utf8_chars); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_4add_input_characters_utf8[] = "_IO.add_input_characters_utf8(self, str utf8_chars)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_5add_input_characters_utf8(PyObject *__pyx_v_self, PyObject *__pyx_v_utf8_chars) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_input_characters_utf8 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_utf8_chars), (&PyString_Type), 1, "utf8_chars", 1))) __PYX_ERR(0, 1763, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_4add_input_characters_utf8(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject*)__pyx_v_utf8_chars));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_4add_input_characters_utf8(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_utf8_chars) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_input_characters_utf8", 0);

  /* "imgui/core.pyx":1764
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))             # <<<<<<<<<<<<<<
 * 
 *     def clear_input_characters(self):
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_utf8_chars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 1764, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1764, __pyx_L1_error)
  try {
    __pyx_v_self->_ptr->AddInputCharactersUTF8(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1764, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1763
 *         self._ptr.AddInputCharacter(c)
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.add_input_characters_utf8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1766
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 *     def clear_input_characters(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputCharacters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_7clear_input_characters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_6clear_input_characters[] = "_IO.clear_input_characters(self)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_7clear_input_characters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_input_characters (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_6clear_input_characters(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_6clear_input_characters(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_input_characters", 0);

  /* "imgui/core.pyx":1767
 * 
 *     def clear_input_characters(self):
 *         self._ptr.ClearInputCharacters()             # <<<<<<<<<<<<<<
 * 
 *     # ... mapping of output properties ...
 */
  try {
    __pyx_v_self->_ptr->ClearInputCharacters();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1767, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1766
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 *     def clear_input_characters(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputCharacters()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.clear_input_characters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1771
 *     # ... mapping of output properties ...
 *     @property
 *     def want_capture_mouse(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureMouse
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_18want_capture_mouse_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_18want_capture_mouse_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_18want_capture_mouse___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_18want_capture_mouse___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1772
 *     @property
 *     def want_capture_mouse(self):
 *         return self._ptr.WantCaptureMouse             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantCaptureMouse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1771
 *     # ... mapping of output properties ...
 *     @property
 *     def want_capture_mouse(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureMouse
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_capture_mouse.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1775
 * 
 *     @property
 *     def want_capture_keyboard(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureKeyboard
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_21want_capture_keyboard_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_21want_capture_keyboard_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_21want_capture_keyboard___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_21want_capture_keyboard___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1776
 *     @property
 *     def want_capture_keyboard(self):
 *         return self._ptr.WantCaptureKeyboard             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantCaptureKeyboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1775
 * 
 *     @property
 *     def want_capture_keyboard(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureKeyboard
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_capture_keyboard.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1779
 * 
 *     @property
 *     def want_text_input(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantTextInput
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_15want_text_input_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_15want_text_input_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15want_text_input___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_15want_text_input___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1780
 *     @property
 *     def want_text_input(self):
 *         return self._ptr.WantTextInput             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantTextInput); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1779
 * 
 *     @property
 *     def want_text_input(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantTextInput
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_text_input.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1783
 * 
 *     @property
 *     def want_set_mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSetMousePos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_18want_set_mouse_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_18want_set_mouse_pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_18want_set_mouse_pos___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_18want_set_mouse_pos___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1784
 *     @property
 *     def want_set_mouse_pos(self):
 *         return self._ptr.WantSetMousePos             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantSetMousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1783
 * 
 *     @property
 *     def want_set_mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSetMousePos
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_set_mouse_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1787
 * 
 *     @property
 *     def want_save_ini_setting(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSaveIniSettings
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_21want_save_ini_setting_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_21want_save_ini_setting_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_21want_save_ini_setting___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_21want_save_ini_setting___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1788
 *     @property
 *     def want_save_ini_setting(self):
 *         return self._ptr.WantSaveIniSettings             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantSaveIniSettings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1787
 * 
 *     @property
 *     def want_save_ini_setting(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSaveIniSettings
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_save_ini_setting.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1791
 * 
 *     @property
 *     def nav_active(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavActive
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_10nav_active_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_10nav_active_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10nav_active___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_10nav_active___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1792
 *     @property
 *     def nav_active(self):
 *         return self._ptr.NavActive             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->NavActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1791
 * 
 *     @property
 *     def nav_active(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavActive
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.nav_active.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1795
 * 
 *     @property
 *     def nav_visible(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavVisible
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_11nav_visible_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_11nav_visible_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_11nav_visible___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_11nav_visible___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1796
 *     @property
 *     def nav_visible(self):
 *         return self._ptr.NavVisible             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->NavVisible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1795
 * 
 *     @property
 *     def nav_visible(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavVisible
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.nav_visible.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1799
 * 
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.Framerate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9framerate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9framerate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9framerate___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9framerate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1800
 *     @property
 *     def framerate(self):
 *         return self._ptr.Framerate             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->Framerate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1799
 * 
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.Framerate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.framerate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1803
 * 
 *     @property
 *     def metrics_render_vertices(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsRenderVertices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_23metrics_render_vertices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_23metrics_render_vertices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23metrics_render_vertices___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_23metrics_render_vertices___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1804
 *     @property
 *     def metrics_render_vertices(self):
 *         return self._ptr.MetricsRenderVertices             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->MetricsRenderVertices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1803
 * 
 *     @property
 *     def metrics_render_vertices(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsRenderVertices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.metrics_render_vertices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1807
 * 
 *     @property
 *     def metrics_active_windows(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsActiveWindows
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_22metrics_active_windows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_22metrics_active_windows_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_22metrics_active_windows___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_22metrics_active_windows___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1808
 *     @property
 *     def metrics_active_windows(self):
 *         return self._ptr.MetricsActiveWindows             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->MetricsActiveWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1807
 * 
 *     @property
 *     def metrics_active_windows(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsActiveWindows
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.metrics_active_windows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1811
 * 
 *     @property
 *     def mouse_delta(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MouseDelta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_11mouse_delta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_11mouse_delta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_11mouse_delta___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_11mouse_delta___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":1812
 *     @property
 *     def mouse_delta(self):
 *         return _cast_ImVec2_tuple(self._ptr.MouseDelta)             # <<<<<<<<<<<<<<
 * 
 * _io = None
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->MouseDelta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1811
 * 
 *     @property
 *     def mouse_delta(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MouseDelta)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_delta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_8__reduce_cython__[] = "_IO.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_8__reduce_cython__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_10__setstate_cython__[] = "_IO.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10__setstate_cython__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1815
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_1get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_get_io[] = "get_io()";
static PyMethodDef __pyx_mdef_5imgui_4core_1get_io = {"get_io", (PyCFunction)__pyx_pw_5imgui_4core_1get_io, METH_NOARGS, __pyx_doc_5imgui_4core_get_io};
static PyObject *__pyx_pw_5imgui_4core_1get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_io (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_get_io(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_get_io(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_io", 0);

  /* "imgui/core.pyx":1818
 *     global _io
 * 
 *     if not _io:             # <<<<<<<<<<<<<<
 *         _io = _IO()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_io); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "imgui/core.pyx":1819
 * 
 *     if not _io:
 *         _io = _IO()             # <<<<<<<<<<<<<<
 * 
 *     return _io
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5imgui_4core__IO)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_io, __pyx_t_1) < 0) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "imgui/core.pyx":1818
 *     global _io
 * 
 *     if not _io:             # <<<<<<<<<<<<<<
 *         _io = _IO()
 * 
 */
  }

  /* "imgui/core.pyx":1821
 *         _io = _IO()
 * 
 *     return _io             # <<<<<<<<<<<<<<
 * 
 * def get_style():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_io); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1815
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1823
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     return GuiStyle.from_ref(cimgui.GetStyle())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3get_style(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_2get_style[] = "get_style()";
static PyMethodDef __pyx_mdef_5imgui_4core_3get_style = {"get_style", (PyCFunction)__pyx_pw_5imgui_4core_3get_style, METH_NOARGS, __pyx_doc_5imgui_4core_2get_style};
static PyObject *__pyx_pw_5imgui_4core_3get_style(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_2get_style(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_2get_style(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<ImGuiStyle> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style", 0);

  /* "imgui/core.pyx":1824
 * 
 * def get_style():
 *     return GuiStyle.from_ref(cimgui.GetStyle())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetStyle();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1824, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_5imgui_4core_8GuiStyle_from_ref(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1823
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     return GuiStyle.from_ref(cimgui.GetStyle())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_style", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1827
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_5new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_4new_frame[] = "new_frame()\nStart a new frame.\n\n    After calling this you can submit any command from this point until\n    next :any:`new_frame()` or :any:`render()`.\n\n    .. wraps::\n        void NewFrame()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_5new_frame = {"new_frame", (PyCFunction)__pyx_pw_5imgui_4core_5new_frame, METH_NOARGS, __pyx_doc_5imgui_4core_4new_frame};
static PyObject *__pyx_pw_5imgui_4core_5new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_frame (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_4new_frame(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_4new_frame(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_frame", 0);

  /* "imgui/core.pyx":1836
 *         void NewFrame()
 *     """
 *     cimgui.NewFrame()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NewFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1836, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1827
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.new_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1839
 * 
 * 
 * def end_frame():             # <<<<<<<<<<<<<<
 *     """End a frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_7end_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_6end_frame[] = "end_frame()\nEnd a frame.\n\n    ends the ImGui frame. automatically called by Render(), so most likely\n    don't need to ever call that yourself directly. If you don't need to\n    render you may call end_frame() but you'll have wasted CPU already.\n    If you don't need to render, better to not create any imgui windows\n    instead!\n\n    .. wraps::\n        void EndFrame()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_7end_frame = {"end_frame", (PyCFunction)__pyx_pw_5imgui_4core_7end_frame, METH_NOARGS, __pyx_doc_5imgui_4core_6end_frame};
static PyObject *__pyx_pw_5imgui_4core_7end_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_frame (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_6end_frame(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_6end_frame(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_frame", 0);

  /* "imgui/core.pyx":1851
 *         void EndFrame()
 *     """
 *     cimgui.EndFrame()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1851, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1839
 * 
 * 
 * def end_frame():             # <<<<<<<<<<<<<<
 *     """End a frame.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1854
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_8render[] = "render()\nFinalize frame, set rendering data, and run render callback (if set).\n\n    .. wraps::\n        void Render()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_9render = {"render", (PyCFunction)__pyx_pw_5imgui_4core_9render, METH_NOARGS, __pyx_doc_5imgui_4core_8render};
static PyObject *__pyx_pw_5imgui_4core_9render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8render(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8render(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("render", 0);

  /* "imgui/core.pyx":1860
 *         void Render()
 *     """
 *     cimgui.Render()             # <<<<<<<<<<<<<<
 * 
 * def show_user_guide():
 */
  try {
    ImGui::Render();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1860, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1854
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1862
 *     cimgui.Render()
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_11show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10show_user_guide[] = "show_user_guide()\nShow ImGui user guide editor.\n\n    .. visual-example::\n        :width: 700\n        :height: 500\n        :auto_layout:\n\n        imgui.begin(\"Example: user guide\")\n        imgui.show_user_guide()\n        imgui.end()\n\n\n    .. wraps::\n        void ShowUserGuide()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_11show_user_guide = {"show_user_guide", (PyCFunction)__pyx_pw_5imgui_4core_11show_user_guide, METH_NOARGS, __pyx_doc_5imgui_4core_10show_user_guide};
static PyObject *__pyx_pw_5imgui_4core_11show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_user_guide (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10show_user_guide(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10show_user_guide(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_user_guide", 0);

  /* "imgui/core.pyx":1878
 *         void ShowUserGuide()
 *     """
 *     cimgui.ShowUserGuide()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ShowUserGuide();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1878, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1862
 *     cimgui.Render()
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.show_user_guide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1881
 * 
 * 
 * def get_version():             # <<<<<<<<<<<<<<
 *     """Get the version of Dear ImGui.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_13get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_12get_version[] = "get_version()\nGet the version of Dear ImGui.\n\n    .. wraps::\n        void GetVersion()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_13get_version = {"get_version", (PyCFunction)__pyx_pw_5imgui_4core_13get_version, METH_NOARGS, __pyx_doc_5imgui_4core_12get_version};
static PyObject *__pyx_pw_5imgui_4core_13get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_version (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_12get_version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_12get_version(CYTHON_UNUSED PyObject *__pyx_self) {
  char const *__pyx_v_c_string;
  CYTHON_UNUSED PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_version", 0);

  /* "imgui/core.pyx":1887
 *         void GetVersion()
 *     """
 *     cdef const char* c_string = cimgui.GetVersion()             # <<<<<<<<<<<<<<
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")
 */
  try {
    __pyx_t_1 = ImGui::GetVersion();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1887, __pyx_L1_error)
  }
  __pyx_v_c_string = __pyx_t_1;

  /* "imgui/core.pyx":1888
 *     """
 *     cdef const char* c_string = cimgui.GetVersion()
 *     cdef bytes py_string = c_string             # <<<<<<<<<<<<<<
 *     return c_string.decode("utf-8")
 * 
 */
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_string = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":1889
 *     cdef const char* c_string = cimgui.GetVersion()
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1881
 * 
 * 
 * def get_version():             # <<<<<<<<<<<<<<
 *     """Get the version of Dear ImGui.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1892
 * 
 * 
 * def style_colors_dark(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Dark.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_15style_colors_dark(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_14style_colors_dark[] = "style_colors_dark(GuiStyle dst=None)\nSet the style to Dark.\n\n       new, recommended style (default)\n\n    .. wraps::\n        void StyleColorsDark(ImGuiStyle* dst = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_15style_colors_dark = {"style_colors_dark", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_15style_colors_dark, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_14style_colors_dark};
static PyObject *__pyx_pw_5imgui_4core_15style_colors_dark(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("style_colors_dark (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dst,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "style_colors_dark") < 0)) __PYX_ERR(0, 1892, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dst = ((struct __pyx_obj_5imgui_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("style_colors_dark", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1892, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.style_colors_dark", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dst), __pyx_ptype_5imgui_4core_GuiStyle, 1, "dst", 0))) __PYX_ERR(0, 1892, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_14style_colors_dark(__pyx_self, __pyx_v_dst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_14style_colors_dark(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("style_colors_dark", 0);

  /* "imgui/core.pyx":1900
 *         void StyleColorsDark(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsDark(dst._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_dst)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1901
 *     """
 *     if dst:
 *         cimgui.StyleColorsDark(dst._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.StyleColorsDark(NULL)
 */
    try {
      ImGui::StyleColorsDark(__pyx_v_dst->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1901, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1900
 *         void StyleColorsDark(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsDark(dst._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1903
 *         cimgui.StyleColorsDark(dst._ptr)
 *     else:
 *         cimgui.StyleColorsDark(NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::StyleColorsDark(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1903, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1892
 * 
 * 
 * def style_colors_dark(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Dark.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.style_colors_dark", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1906
 * 
 * 
 * def style_colors_classic(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Classic.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_17style_colors_classic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_16style_colors_classic[] = "style_colors_classic(GuiStyle dst=None)\nSet the style to Classic.\n\n       classic imgui style.\n\n    .. wraps::\n        void StyleColorsClassic(ImGuiStyle* dst = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_17style_colors_classic = {"style_colors_classic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_17style_colors_classic, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_16style_colors_classic};
static PyObject *__pyx_pw_5imgui_4core_17style_colors_classic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("style_colors_classic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dst,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "style_colors_classic") < 0)) __PYX_ERR(0, 1906, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dst = ((struct __pyx_obj_5imgui_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("style_colors_classic", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1906, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.style_colors_classic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dst), __pyx_ptype_5imgui_4core_GuiStyle, 1, "dst", 0))) __PYX_ERR(0, 1906, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_16style_colors_classic(__pyx_self, __pyx_v_dst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_16style_colors_classic(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("style_colors_classic", 0);

  /* "imgui/core.pyx":1914
 *         void StyleColorsClassic(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsClassic(dst._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_dst)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1914, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1915
 *     """
 *     if dst:
 *         cimgui.StyleColorsClassic(dst._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.StyleColorsClassic(NULL)
 */
    try {
      ImGui::StyleColorsClassic(__pyx_v_dst->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1915, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1914
 *         void StyleColorsClassic(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsClassic(dst._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1917
 *         cimgui.StyleColorsClassic(dst._ptr)
 *     else:
 *         cimgui.StyleColorsClassic(NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::StyleColorsClassic(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1917, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1906
 * 
 * 
 * def style_colors_classic(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Classic.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.style_colors_classic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1921
 * 
 * 
 * def style_colors_light(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Light.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_19style_colors_light(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_18style_colors_light[] = "style_colors_light(GuiStyle dst=None)\nSet the style to Light.\n\n       best used with borders and a custom, thicker font\n\n    .. wraps::\n        void StyleColorsLight(ImGuiStyle* dst = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_19style_colors_light = {"style_colors_light", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_19style_colors_light, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_18style_colors_light};
static PyObject *__pyx_pw_5imgui_4core_19style_colors_light(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("style_colors_light (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dst,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "style_colors_light") < 0)) __PYX_ERR(0, 1921, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dst = ((struct __pyx_obj_5imgui_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("style_colors_light", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1921, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.style_colors_light", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dst), __pyx_ptype_5imgui_4core_GuiStyle, 1, "dst", 0))) __PYX_ERR(0, 1921, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_18style_colors_light(__pyx_self, __pyx_v_dst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_18style_colors_light(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_dst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("style_colors_light", 0);

  /* "imgui/core.pyx":1929
 *         void StyleColorsLight(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsLight(dst._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_dst)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1929, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1930
 *     """
 *     if dst:
 *         cimgui.StyleColorsLight(dst._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.StyleColorsLight(NULL)
 */
    try {
      ImGui::StyleColorsLight(__pyx_v_dst->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1930, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1929
 *         void StyleColorsLight(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsLight(dst._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1932
 *         cimgui.StyleColorsLight(dst._ptr)
 *     else:
 *         cimgui.StyleColorsLight(NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::StyleColorsLight(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1932, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1921
 * 
 * 
 * def style_colors_light(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Light.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.style_colors_light", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1935
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_21show_style_editor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_20show_style_editor[] = "show_style_editor(GuiStyle style=None)\nShow ImGui style editor.\n\n    .. visual-example::\n        :width: 300\n        :height: 300\n        :auto_layout:\n\n        imgui.begin(\"Example: my style editor\")\n        imgui.show_style_editor()\n        imgui.end()\n\n    Args:\n        style (GuiStyle): style editor state container.\n\n    .. wraps::\n        void ShowStyleEditor(ImGuiStyle* ref = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_21show_style_editor = {"show_style_editor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_21show_style_editor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_20show_style_editor};
static PyObject *__pyx_pw_5imgui_4core_21show_style_editor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_style = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_style_editor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_style,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_style);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_style_editor") < 0)) __PYX_ERR(0, 1935, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_style = ((struct __pyx_obj_5imgui_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_style_editor", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1935, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.show_style_editor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_style), __pyx_ptype_5imgui_4core_GuiStyle, 1, "style", 0))) __PYX_ERR(0, 1935, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_20show_style_editor(__pyx_self, __pyx_v_style);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_20show_style_editor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_style) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_style_editor", 0);

  /* "imgui/core.pyx":1953
 *         void ShowStyleEditor(ImGuiStyle* ref = NULL)
 *     """
 *     if style:             # <<<<<<<<<<<<<<
 *         cimgui.ShowStyleEditor(style._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_style)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1953, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1954
 *     """
 *     if style:
 *         cimgui.ShowStyleEditor(style._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowStyleEditor()
 */
    try {
      ImGui::ShowStyleEditor(__pyx_v_style->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1954, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1953
 *         void ShowStyleEditor(ImGuiStyle* ref = NULL)
 *     """
 *     if style:             # <<<<<<<<<<<<<<
 *         cimgui.ShowStyleEditor(style._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1956
 *         cimgui.ShowStyleEditor(style._ptr)
 *     else:
 *         cimgui.ShowStyleEditor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::ShowStyleEditor();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1956, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1935
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.show_style_editor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1959
 * 
 * 
 * def show_demo_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_23show_demo_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_22show_demo_window[] = "show_demo_window(closable=False)\nShow ImGui demo window.\n\n    .. visual-example::\n        :width: 700\n        :height: 600\n        :auto_layout:\n\n        imgui.show_demo_window()\n\n    Args:\n        closable (bool): define if window is closable.\n\n    Returns:\n        bool: True if window is not closed (False trigerred by close button).\n\n    .. wraps::\n        void ShowDemoWindow(bool* p_open = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_23show_demo_window = {"show_demo_window", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_23show_demo_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_22show_demo_window};
static PyObject *__pyx_pw_5imgui_4core_23show_demo_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_closable = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_demo_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_closable,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_demo_window") < 0)) __PYX_ERR(0, 1959, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_closable = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_demo_window", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1959, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.show_demo_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_22show_demo_window(__pyx_self, __pyx_v_closable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_22show_demo_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_demo_window", 0);

  /* "imgui/core.pyx":1978
 *         void ShowDemoWindow(bool* p_open = NULL)
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     if closable:
 */
  __pyx_v_opened = 1;

  /* "imgui/core.pyx":1980
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowDemoWindow(&opened)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1980, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1981
 * 
 *     if closable:
 *         cimgui.ShowDemoWindow(&opened)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowDemoWindow()
 */
    try {
      ImGui::ShowDemoWindow((&__pyx_v_opened));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1981, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1980
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowDemoWindow(&opened)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1983
 *         cimgui.ShowDemoWindow(&opened)
 *     else:
 *         cimgui.ShowDemoWindow()             # <<<<<<<<<<<<<<
 * 
 *     return opened
 */
  /*else*/ {
    try {
      ImGui::ShowDemoWindow();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1983, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1985
 *         cimgui.ShowDemoWindow()
 * 
 *     return opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1959
 * 
 * 
 * def show_demo_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.show_demo_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1988
 * 
 * 
 * def show_test_window():             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_25show_test_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_24show_test_window[] = "show_test_window()\nShow ImGui demo window.\n\n    .. visual-example::\n        :width: 700\n        :height: 600\n        :auto_layout:\n\n        imgui.show_test_window()\n\n    .. wraps::\n        void ShowDemoWindow()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_25show_test_window = {"show_test_window", (PyCFunction)__pyx_pw_5imgui_4core_25show_test_window, METH_NOARGS, __pyx_doc_5imgui_4core_24show_test_window};
static PyObject *__pyx_pw_5imgui_4core_25show_test_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_test_window (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_24show_test_window(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_24show_test_window(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_test_window", 0);

  /* "imgui/core.pyx":2001
 *         void ShowDemoWindow()
 *     """
 *     cimgui.ShowDemoWindow()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ShowDemoWindow();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2001, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1988
 * 
 * 
 * def show_test_window():             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.show_test_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2005
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_27show_metrics_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_26show_metrics_window[] = "show_metrics_window(closable=False)\nShow ImGui metrics window.\n\n    .. visual-example::\n        :width: 700\n        :height: 200\n        :auto_layout:\n\n        imgui.show_metrics_window()\n\n    Args:\n        closable (bool): define if window is closable.\n\n    Returns:\n        bool: True if window is not closed (False trigerred by close button).\n\n    .. wraps::\n        void ShowMetricsWindow(bool* p_open = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_27show_metrics_window = {"show_metrics_window", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_27show_metrics_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_26show_metrics_window};
static PyObject *__pyx_pw_5imgui_4core_27show_metrics_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_closable = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_metrics_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_closable,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_metrics_window") < 0)) __PYX_ERR(0, 2005, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_closable = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_metrics_window", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2005, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.show_metrics_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_26show_metrics_window(__pyx_self, __pyx_v_closable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_26show_metrics_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_metrics_window", 0);

  /* "imgui/core.pyx":2024
 *         void ShowMetricsWindow(bool* p_open = NULL)
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     if closable:
 */
  __pyx_v_opened = 1;

  /* "imgui/core.pyx":2026
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2026, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":2027
 * 
 *     if closable:
 *         cimgui.ShowMetricsWindow(&opened)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowMetricsWindow()
 */
    try {
      ImGui::ShowMetricsWindow((&__pyx_v_opened));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2027, __pyx_L1_error)
    }

    /* "imgui/core.pyx":2026
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":2029
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 *         cimgui.ShowMetricsWindow()             # <<<<<<<<<<<<<<
 * 
 *     return opened
 */
  /*else*/ {
    try {
      ImGui::ShowMetricsWindow();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2029, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":2031
 *         cimgui.ShowMetricsWindow()
 * 
 *     return opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2005
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.show_metrics_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2034
 * 
 * 
 * def show_style_selector(str label):             # <<<<<<<<<<<<<<
 *     return cimgui.ShowStyleSelector(label)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_29show_style_selector(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static char __pyx_doc_5imgui_4core_28show_style_selector[] = "show_style_selector(str label)";
static PyMethodDef __pyx_mdef_5imgui_4core_29show_style_selector = {"show_style_selector", (PyCFunction)__pyx_pw_5imgui_4core_29show_style_selector, METH_O, __pyx_doc_5imgui_4core_28show_style_selector};
static PyObject *__pyx_pw_5imgui_4core_29show_style_selector(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_style_selector (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_28show_style_selector(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_28show_style_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_style_selector", 0);

  /* "imgui/core.pyx":2035
 * 
 * def show_style_selector(str label):
 *     return cimgui.ShowStyleSelector(label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_label); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 2035, __pyx_L1_error)
  try {
    __pyx_t_2 = ImGui::ShowStyleSelector(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2035, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2034
 * 
 * 
 * def show_style_selector(str label):             # <<<<<<<<<<<<<<
 *     return cimgui.ShowStyleSelector(label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.show_style_selector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2038
 * 
 * 
 * def show_font_selector(str label):             # <<<<<<<<<<<<<<
 *     cimgui.ShowStyleSelector(label)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_31show_font_selector(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static char __pyx_doc_5imgui_4core_30show_font_selector[] = "show_font_selector(str label)";
static PyMethodDef __pyx_mdef_5imgui_4core_31show_font_selector = {"show_font_selector", (PyCFunction)__pyx_pw_5imgui_4core_31show_font_selector, METH_O, __pyx_doc_5imgui_4core_30show_font_selector};
static PyObject *__pyx_pw_5imgui_4core_31show_font_selector(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_font_selector (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_30show_font_selector(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_30show_font_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_font_selector", 0);

  /* "imgui/core.pyx":2039
 * 
 * def show_font_selector(str label):
 *     cimgui.ShowStyleSelector(label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_label); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 2039, __pyx_L1_error)
  try {
    ImGui::ShowStyleSelector(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2039, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2038
 * 
 * 
 * def show_font_selector(str label):             # <<<<<<<<<<<<<<
 *     cimgui.ShowStyleSelector(label)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.show_font_selector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2042
 * 
 * 
 * def begin(str label, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_33begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_32begin[] = "begin(str label, closable=False, ImGuiWindowFlags flags=0)\nBegin a window.\n\n    .. visual-example::\n        :auto_layout:\n\n        imgui.begin(\"Example: empty window\")\n        imgui.end()\n\n    Args:\n        label (str): label of the window.\n        closable (bool): define if window is closable.\n        flags: Window flags. See:\n            :ref:`list of available flags <window-flag-options>`.\n\n    Returns:\n        tuple: ``(expanded, opened)`` tuple of bools. If window is collapsed\n        ``expanded==True``. The value of ``opened`` is always True for\n        non-closable and open windows but changes state to False on close\n        button click for closable windows.\n\n    .. wraps::\n        Begin(\n            const char* name,\n            bool* p_open = NULL,\n            ImGuiWindowFlags flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_33begin = {"begin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_33begin, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_32begin};
static PyObject *__pyx_pw_5imgui_4core_33begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_closable = 0;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_closable,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin") < 0)) __PYX_ERR(0, 2042, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_closable = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2042, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2042, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2042, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_32begin(__pyx_self, __pyx_v_label, __pyx_v_closable, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_32begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_closable, ImGuiWindowFlags __pyx_v_flags) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool *__pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin", 0);

  /* "imgui/core.pyx":2070
 *         )
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.Begin(_bytes(label), &opened if closable else NULL, flags), opened
 */
  __pyx_v_opened = 1;

  /* "imgui/core.pyx":2072
 *     cdef cimgui.bool opened = True
 * 
 *     return cimgui.Begin(_bytes(label), &opened if closable else NULL, flags), opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2072, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2072, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2072, __pyx_L1_error)
  if (__pyx_t_4) {
    __pyx_t_3 = (&__pyx_v_opened);
  } else {
    __pyx_t_3 = NULL;
  }
  try {
    __pyx_t_5 = ImGui::Begin(__pyx_t_2, __pyx_t_3, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2072, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2042
 * 
 * 
 * def begin(str label, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2075
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_35get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_34get_draw_data[] = "get_draw_data()\nGet draw data.\n\n    valid after :any:`render()` and until the next call\n    to :any:`new_frame()`.  This is what you have to render.\n\n    Returns:\n        _DrawData: draw data for all draw calls required to display gui\n\n    .. wraps::\n        ImDrawData* GetDrawData()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_35get_draw_data = {"get_draw_data", (PyCFunction)__pyx_pw_5imgui_4core_35get_draw_data, METH_NOARGS, __pyx_doc_5imgui_4core_34get_draw_data};
static PyObject *__pyx_pw_5imgui_4core_35get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_draw_data (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_34get_draw_data(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_34get_draw_data(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawData *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_draw_data", 0);

  /* "imgui/core.pyx":2087
 *         ImDrawData* GetDrawData()
 *     """
 *     return _DrawData.from_ptr(cimgui.GetDrawData())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetDrawData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2087, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_9_DrawData_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2075
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_draw_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2090
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_37end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_36end[] = "end()\nEnd a window.\n\n    This finishes appending to current window, and pops it off the window\n    stack. See: :any:`begin()`.\n\n    .. wraps::\n        void End()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_37end = {"end", (PyCFunction)__pyx_pw_5imgui_4core_37end, METH_NOARGS, __pyx_doc_5imgui_4core_36end};
static PyObject *__pyx_pw_5imgui_4core_37end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_36end(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_36end(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end", 0);

  /* "imgui/core.pyx":2099
 *         void End()
 *     """
 *     cimgui.End()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::End();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2099, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2090
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2107
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_39begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_38begin_child[] = "begin_child(signatures, args, kwargs, defaults)\nBegin a scrolling region.\n\n    **Note:** sizing of child region allows for three modes:\n    * ``0.0`` - use remaining window size\n    * ``>0.0`` - fixed size\n    * ``<0.0`` - use remaining window size minus abs(size)\n\n    .. visual-example::\n        :width: 200\n        :height: 200\n        :auto_layout:\n\n        imgui.begin(\"Example: child region\")\n\n        imgui.begin_child(\"region\", 150, -50, border=True)\n        imgui.text(\"inside region\")\n        imgui.end_child()\n\n        imgui.text(\"outside region\")\n        imgui.end()\n\n    Args:\n        label (str or int): Child region identifier.\n        width (float): Region width. See note about sizing.\n        height (float): Region height. See note about sizing.\n        border (bool): True if should display border. Defaults to False.\n        flags: Window flags. See:\n            :ref:`list of available flags <window-flag-options>`.\n\n    Returns:\n        bool: True if region is visible\n\n    .. wraps::\n        bool BeginChild(\n            const char* str_id,\n            const ImVec2& size = ImVec2(0,0),\n            bool border = false,\n            ImGuiWindowFlags flags = 0\n        )\n\n        bool BeginChild(\n            ImGuiID id,\n            const ImVec2& size = ImVec2(0,0),\n            bool border = false,\n            ImGuiWindowFlags flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_39begin_child = {"begin_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_39begin_child, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_38begin_child};
static PyObject *__pyx_pw_5imgui_4core_39begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_signatures = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_signatures,&__pyx_n_s_args,&__pyx_n_s_kwargs,&__pyx_n_s_defaults,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = __pyx_k__29;
    values[2] = __pyx_k__30;
    values[3] = __pyx_k__31;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_signatures)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kwargs);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_defaults);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_fused_cpdef") < 0)) __PYX_ERR(0, 2107, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_signatures = values[0];
    __pyx_v_args = values[1];
    __pyx_v_kwargs = values[2];
    __pyx_v_defaults = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_38begin_child(__pyx_self, __pyx_v_signatures, __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_38begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults) {
  PyObject *__pyx_v_dest_sig = NULL;
  Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED PyTypeObject *__pyx_v_ndarray = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_v_sig = NULL;
  int __pyx_v_match_found;
  PyObject *__pyx_v_src_sig = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_child", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_None);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_4) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  __pyx_t_1 = ((PyObject *)__Pyx_ImportNumPyArrayTypeIfAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ndarray = ((PyTypeObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_itemsize = -1L;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 2107, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2107, __pyx_L1_error)
  __pyx_t_2 = ((0 < __pyx_t_5) != 0);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2107, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_args), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2107, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_label, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2107, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2107, __pyx_L1_error)
    }
    __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2107, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_1);
    __Pyx_INCREF(__pyx_kp_s__32);
    __Pyx_GIVEREF(__pyx_kp_s__32);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__32);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2107, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_3 = PyInt_Check(__pyx_v_arg); 
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_4 = PyLong_Check(__pyx_v_arg); 
    __pyx_t_3 = (__pyx_t_4 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L12_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
      if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_ImGuiID, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    __pyx_t_3 = PyString_Check(__pyx_v_arg); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
      if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_str, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_candidates = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_signatures == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2107, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __pyx_t_6 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_6, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_match_found = 0;
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_sig, __pyx_n_s_strip); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_12, __pyx_kp_s__33) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s__33);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_kp_s__34) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s__34);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_src_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_13 = PyList_GET_SIZE(__pyx_v_dest_sig); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2107, __pyx_L1_error)
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_i = __pyx_t_15;
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_dest_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = (__pyx_v_dst_type != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_src_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = PyObject_RichCompare(__pyx_t_1, __pyx_v_dst_type, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2107, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (__pyx_t_3) {
          __pyx_v_match_found = 1;
          goto __pyx_L20;
        }
        /*else*/ {
          __pyx_v_match_found = 0;
          goto __pyx_L18_break;
        }
        __pyx_L20:;
      }
    }
    __pyx_L18_break:;
    __pyx_t_3 = (__pyx_v_match_found != 0);
    if (__pyx_t_3) {
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_candidates, __pyx_v_sig); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 2107, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = (PyList_GET_SIZE(__pyx_v_candidates) != 0);
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2107, __pyx_L1_error)
  }
  __pyx_t_7 = PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2107, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_7 > 1) != 0);
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2107, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_signatures == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2107, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_candidates, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("imgui.core.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF(__pyx_v_ndarray);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_src_sig);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_501__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_border); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_ImGuiWindowFlags(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_5imgui_4core_492begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_5imgui_4core_492begin_child = {"__pyx_fuse_0begin_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_5imgui_4core_492begin_child, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_38begin_child};
static PyObject *__pyx_fuse_0__pyx_pw_5imgui_4core_492begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  bool __pyx_v_border;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_border,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults2 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_child") < 0)) __PYX_ERR(0, 2107, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L3_error)
    } else {
      __pyx_v_width = __pyx_dynamic_args->__pyx_arg_width;
    }
    if (values[2]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L3_error)
    } else {
      __pyx_v_height = __pyx_dynamic_args->__pyx_arg_height;
    }
    if (values[3]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L3_error)
    } else {
      __pyx_v_border = __pyx_dynamic_args->__pyx_arg_border;
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2109, __pyx_L3_error)
    } else {
      __pyx_v_flags = __pyx_dynamic_args->__pyx_arg_flags;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_child", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2108, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_491begin_child(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_border, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_491begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0begin_child", 0);

  /* "imgui/core.pyx":2160
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2161
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2161, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2161, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2161, __pyx_L1_error)

  /* "imgui/core.pyx":2160
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  try {
    __pyx_t_4 = ImGui::BeginChild(__pyx_t_2, __pyx_t_3, __pyx_v_border, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2160, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2107
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_503__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_border); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_ImGuiWindowFlags(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_5imgui_4core_494begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_5imgui_4core_494begin_child = {"__pyx_fuse_1begin_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_5imgui_4core_494begin_child, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_38begin_child};
static PyObject *__pyx_fuse_1__pyx_pw_5imgui_4core_494begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiID __pyx_v_label;
  float __pyx_v_width;
  float __pyx_v_height;
  bool __pyx_v_border;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_border,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults3 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_child") < 0)) __PYX_ERR(0, 2107, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = __Pyx_PyInt_As_ImGuiID(values[0]); if (unlikely((__pyx_v_label == ((ImGuiID)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L3_error)
    } else {
      __pyx_v_width = __pyx_dynamic_args->__pyx_arg_width;
    }
    if (values[2]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L3_error)
    } else {
      __pyx_v_height = __pyx_dynamic_args->__pyx_arg_height;
    }
    if (values[3]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L3_error)
    } else {
      __pyx_v_border = __pyx_dynamic_args->__pyx_arg_border;
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2109, __pyx_L3_error)
    } else {
      __pyx_v_flags = __pyx_dynamic_args->__pyx_arg_flags;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_child", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_493begin_child(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_border, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_493begin_child(CYTHON_UNUSED PyObject *__pyx_self, ImGuiID __pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  ImVec2 __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1begin_child", 0);

  /* "imgui/core.pyx":2160
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2161
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiID(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 2161, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2161, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 2161, __pyx_L1_error)
  __pyx_t_4 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2161, __pyx_L1_error)

  /* "imgui/core.pyx":2160
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  try {
    __pyx_t_5 = ImGui::BeginChild(__pyx_t_3, __pyx_t_4, __pyx_v_border, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2160, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2107
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2164
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_41end_child(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_40end_child[] = "end_child()\nEnd scrolling region.\n\n    .. wraps::\n        void EndChild()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_41end_child = {"end_child", (PyCFunction)__pyx_pw_5imgui_4core_41end_child, METH_NOARGS, __pyx_doc_5imgui_4core_40end_child};
static PyObject *__pyx_pw_5imgui_4core_41end_child(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_child (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_40end_child(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_40end_child(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_child", 0);

  /* "imgui/core.pyx":2170
 *         void EndChild()
 *     """
 *     cimgui.EndChild()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndChild();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2170, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2164
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2173
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_43get_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_42get_content_region_max[] = "get_content_region_max()\nGet current content boundaries in window coordinates.\n\n    Typically window boundaries include scrolling, or current\n    column boundaries.\n\n    Returns:\n        Vec2: content boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetContentRegionMax()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_43get_content_region_max = {"get_content_region_max", (PyCFunction)__pyx_pw_5imgui_4core_43get_content_region_max, METH_NOARGS, __pyx_doc_5imgui_4core_42get_content_region_max};
static PyObject *__pyx_pw_5imgui_4core_43get_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_max (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_42get_content_region_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_42get_content_region_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_content_region_max", 0);

  /* "imgui/core.pyx":2185
 *         ImVec2 GetContentRegionMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetContentRegionMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2185, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2173
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_content_region_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2188
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_45get_content_region_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_44get_content_region_available[] = "get_content_region_available()\nGet available content region.\n\n    It is shortcut for:\n\n    .. code-block: python\n        imgui.get_content_region_max() - imgui.get_cursor_position()\n\n    Returns:\n        Vec2: available content region size two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetContentRegionMax()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_45get_content_region_available = {"get_content_region_available", (PyCFunction)__pyx_pw_5imgui_4core_45get_content_region_available, METH_NOARGS, __pyx_doc_5imgui_4core_44get_content_region_available};
static PyObject *__pyx_pw_5imgui_4core_45get_content_region_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_available (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_44get_content_region_available(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_44get_content_region_available(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_content_region_available", 0);

  /* "imgui/core.pyx":2202
 *         ImVec2 GetContentRegionMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetContentRegionAvail())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionAvail();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2202, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2188
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_content_region_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2205
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_47get_content_region_available_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_46get_content_region_available_width[] = "get_content_region_available_width()\nGet available content region width.\n\n    Returns:\n        float: available content region width.\n\n    .. wraps::\n        float GetContentRegionAvailWidth()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_47get_content_region_available_width = {"get_content_region_available_width", (PyCFunction)__pyx_pw_5imgui_4core_47get_content_region_available_width, METH_NOARGS, __pyx_doc_5imgui_4core_46get_content_region_available_width};
static PyObject *__pyx_pw_5imgui_4core_47get_content_region_available_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_available_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_46get_content_region_available_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_46get_content_region_available_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_content_region_available_width", 0);

  /* "imgui/core.pyx":2214
 *         float GetContentRegionAvailWidth()
 *     """
 *     return cimgui.GetContentRegionAvailWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionAvailWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2214, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2205
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_content_region_available_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2217
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_49get_window_content_region_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_48get_window_content_region_min[] = "get_window_content_region_min()\nGet minimal current window content boundaries in window coordinates.\n\n    It translates roughly to: ``(0, 0) - Scroll``\n\n    Returns:\n        Vec2: content boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetWindowContentRegionMin()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_49get_window_content_region_min = {"get_window_content_region_min", (PyCFunction)__pyx_pw_5imgui_4core_49get_window_content_region_min, METH_NOARGS, __pyx_doc_5imgui_4core_48get_window_content_region_min};
static PyObject *__pyx_pw_5imgui_4core_49get_window_content_region_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_min (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_48get_window_content_region_min(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_48get_window_content_region_min(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_content_region_min", 0);

  /* "imgui/core.pyx":2228
 *         ImVec2 GetWindowContentRegionMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowContentRegionMin())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionMin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2228, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2217
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_content_region_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2231
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_51get_window_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_50get_window_content_region_max[] = "get_window_content_region_max()\nGet maximal current window content boundaries in window coordinates.\n\n    It translates roughly to: ``(0, 0) + Size - Scroll``\n\n    Returns:\n        Vec2: content boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetWindowContentRegionMin()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_51get_window_content_region_max = {"get_window_content_region_max", (PyCFunction)__pyx_pw_5imgui_4core_51get_window_content_region_max, METH_NOARGS, __pyx_doc_5imgui_4core_50get_window_content_region_max};
static PyObject *__pyx_pw_5imgui_4core_51get_window_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_max (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_50get_window_content_region_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_50get_window_content_region_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_content_region_max", 0);

  /* "imgui/core.pyx":2242
 *         ImVec2 GetWindowContentRegionMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowContentRegionMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2242, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2231
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_content_region_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2245
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_53get_window_content_region_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_52get_window_content_region_width[] = "get_window_content_region_width()\nGet available current window content region width.\n\n    Returns:\n        float: available content region width.\n\n    .. wraps::\n        float GetWindowContentRegionWidth()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_53get_window_content_region_width = {"get_window_content_region_width", (PyCFunction)__pyx_pw_5imgui_4core_53get_window_content_region_width, METH_NOARGS, __pyx_doc_5imgui_4core_52get_window_content_region_width};
static PyObject *__pyx_pw_5imgui_4core_53get_window_content_region_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_52get_window_content_region_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_52get_window_content_region_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_content_region_width", 0);

  /* "imgui/core.pyx":2254
 *         float GetWindowContentRegionWidth()
 *     """
 *     return cimgui.GetWindowContentRegionWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2254, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2245
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_content_region_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2257
 * 
 * 
 * def set_window_focus():             # <<<<<<<<<<<<<<
 *     """Set window to be focused
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_55set_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_54set_window_focus[] = "set_window_focus()\nSet window to be focused\n\n    Call inside :func:`begin()`.\n\n    .. visual-example::\n        :title: Window focus\n        :height: 100\n\n        imgui.begin(\"Window 1\")\n        imgui.end()\n\n        imgui.begin(\"Window 2\")\n        imgui.set_window_focus()\n        imgui.end()\n\n    .. wraps::\n        void SetWindowFocus()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_55set_window_focus = {"set_window_focus", (PyCFunction)__pyx_pw_5imgui_4core_55set_window_focus, METH_NOARGS, __pyx_doc_5imgui_4core_54set_window_focus};
static PyObject *__pyx_pw_5imgui_4core_55set_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_54set_window_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_54set_window_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_focus", 0);

  /* "imgui/core.pyx":2276
 *         void SetWindowFocus()
 *     """
 *     cimgui.SetWindowFocus()             # <<<<<<<<<<<<<<
 * 
 * def set_window_focus_labeled(str label):
 */
  try {
    ImGui::SetWindowFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2276, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2257
 * 
 * 
 * def set_window_focus():             # <<<<<<<<<<<<<<
 *     """Set window to be focused
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_window_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2278
 *     cimgui.SetWindowFocus()
 * 
 * def set_window_focus_labeled(str label):             # <<<<<<<<<<<<<<
 *     """Set focus to the window named label
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_57set_window_focus_labeled(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static char __pyx_doc_5imgui_4core_56set_window_focus_labeled[] = "set_window_focus_labeled(str label)\nSet focus to the window named label\n\n    Args:\n        label(string): the name of the window that will be focused\n\n    .. visual-example::\n        :title: Window focus\n        :height: 100\n\n        imgui.set_window_focus_labeled(\"Window 2\")\n\n        imgui.begin(\"Window 1\", True)\n        imgui.text(\"Apples\")\n        imgui.end()\n\n        imgui.begin(\"Window 2\", True)\n        imgui.text(\"Orange\")\n        imgui.end()\n\n        imgui.begin(\"Window 3\", True)\n        imgui.text(\"Mango\")\n        imgui.end()\n\n    .. wraps::\n        void SetWindowFocus(\n            const char* name\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_57set_window_focus_labeled = {"set_window_focus_labeled", (PyCFunction)__pyx_pw_5imgui_4core_57set_window_focus_labeled, METH_O, __pyx_doc_5imgui_4core_56set_window_focus_labeled};
static PyObject *__pyx_pw_5imgui_4core_57set_window_focus_labeled(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_focus_labeled (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2278, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_56set_window_focus_labeled(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_56set_window_focus_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_focus_labeled", 0);

  /* "imgui/core.pyx":2307
 *         )
 *     """
 *     cimgui.SetWindowFocus(_bytes(label))             # <<<<<<<<<<<<<<
 * 
 * def set_window_size(
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2307, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2307, __pyx_L1_error)
  try {
    ImGui::SetWindowFocus(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2307, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2278
 *     cimgui.SetWindowFocus()
 * 
 * def set_window_focus_labeled(str label):             # <<<<<<<<<<<<<<
 *     """Set focus to the window named label
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_window_focus_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2309
 *     cimgui.SetWindowFocus(_bytes(label))
 * 
 * def set_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ONCE):
 *     """Set window size
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_59set_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_58set_window_size[] = "set_window_size(float width, float height, ImGuiCond condition=ONCE)\nSet window size\n\n    Call inside :func:`begin()`.\n\n    **Note:** usage of this function is not recommended. prefer using\n    :func:`set_next_window_size()` as this may incur tearing and minor\n    side-effects.\n\n    Args:\n        width (float): window width. Value 0.0 enables autofit.\n        height (float): window height. Value 0.0 enables autofit.\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ONCE`.\n\n    .. visual-example::\n        :title: window sizing\n        :height: 200\n\n        imgui.begin(\"Window size\")\n        imgui.set_window_size(80, 180)\n        imgui.end()\n\n    .. wraps::\n        void SetWindowSize(\n            const ImVec2& size,\n            ImGuiCond cond = 0,\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_59set_window_size = {"set_window_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_59set_window_size, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_58set_window_size};
static PyObject *__pyx_pw_5imgui_4core_59set_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_size", 0, 2, 3, 1); __PYX_ERR(0, 2309, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_size") < 0)) __PYX_ERR(0, 2309, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2310, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2310, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2310, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__37;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_size", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2309, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_58set_window_size(__pyx_self, __pyx_v_width, __pyx_v_height, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_58set_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_size", 0);

  /* "imgui/core.pyx":2339
 *         )
 *     """
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)             # <<<<<<<<<<<<<<
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2339, __pyx_L1_error)
  try {
    ImGui::SetWindowSize(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2339, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2309
 *     cimgui.SetWindowFocus(_bytes(label))
 * 
 * def set_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ONCE):
 *     """Set window size
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2341
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):             # <<<<<<<<<<<<<<
 *     """Set the window with label to some size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_61set_window_size_named(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_60set_window_size_named[] = "set_window_size_named(str label, float width, float height, ImGuiCond condition=ONCE)\nSet the window with label to some size\n\n    Args:\n        label(string): name of the window\n        width(float): new width of the window\n        height(float): new height of the window\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ONCE`.\n\n    .. visual-example::\n        :title: Window size\n        :height: 200\n\n        imgui.set_window_size_named(\"Window 1\",100,100)\n        imgui.set_window_size_named(\"Window 2\",100,200)\n\n        imgui.begin(\"Window 1\")\n        imgui.end()\n\n        imgui.begin(\"Window 2\")\n        imgui.end()\n\n    .. wraps::\n        void SetWindowSize(\n            const char* name,\n            const ImVec2& size,\n             ImGuiCond cond\n    )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_61set_window_size_named = {"set_window_size_named", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_61set_window_size_named, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_60set_window_size_named};
static PyObject *__pyx_pw_5imgui_4core_61set_window_size_named(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_size_named (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_condition,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_size_named", 0, 3, 4, 1); __PYX_ERR(0, 2341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_size_named", 0, 3, 4, 2); __PYX_ERR(0, 2341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_size_named") < 0)) __PYX_ERR(0, 2341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2341, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2341, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[3]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2341, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__38;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_size_named", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_size_named", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2341, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_60set_window_size_named(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_60set_window_size_named(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_size_named", 0);

  /* "imgui/core.pyx":2372
 *     """
 *     cimgui.SetWindowSize(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height),
 *         condition
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2372, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2372, __pyx_L1_error)

  /* "imgui/core.pyx":2373
 *     cimgui.SetWindowSize(
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         condition
 *     )
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2373, __pyx_L1_error)

  /* "imgui/core.pyx":2371
 *     )
 *     """
 *     cimgui.SetWindowSize(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height),
 */
  try {
    ImGui::SetWindowSize(__pyx_t_2, __pyx_t_3, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2371, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2341
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):             # <<<<<<<<<<<<<<
 *     """Set the window with label to some size
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_window_size_named", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2377
 *     )
 * 
 * def get_scroll_x():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxX()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_63get_scroll_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_62get_scroll_x[] = "get_scroll_x()\nget scrolling amount [0..GetScrollMaxX()]\n\n    Returns:\n        float: the current scroll X value\n\n    .. wraps::\n        int GetScrollX()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_63get_scroll_x = {"get_scroll_x", (PyCFunction)__pyx_pw_5imgui_4core_63get_scroll_x, METH_NOARGS, __pyx_doc_5imgui_4core_62get_scroll_x};
static PyObject *__pyx_pw_5imgui_4core_63get_scroll_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_x (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_62get_scroll_x(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_62get_scroll_x(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_x", 0);

  /* "imgui/core.pyx":2386
 *         int GetScrollX()
 *     """
 *     return cimgui.GetScrollX()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollX();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2386, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2377
 *     )
 * 
 * def get_scroll_x():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxX()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_scroll_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2389
 * 
 * 
 * def get_scroll_y():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxY()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_65get_scroll_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_64get_scroll_y[] = "get_scroll_y()\nget scrolling amount [0..GetScrollMaxY()]\n\n    Returns:\n        float: the current scroll Y value\n\n    .. wraps::\n        int GetScrollY()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_65get_scroll_y = {"get_scroll_y", (PyCFunction)__pyx_pw_5imgui_4core_65get_scroll_y, METH_NOARGS, __pyx_doc_5imgui_4core_64get_scroll_y};
static PyObject *__pyx_pw_5imgui_4core_65get_scroll_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_y (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_64get_scroll_y(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_64get_scroll_y(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_y", 0);

  /* "imgui/core.pyx":2398
 *         int GetScrollY()
 *     """
 *     return cimgui.GetScrollY()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollY();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2398, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2389
 * 
 * 
 * def get_scroll_y():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxY()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_scroll_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2401
 * 
 * 
 * def get_scroll_max_x():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_67get_scroll_max_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_66get_scroll_max_x[] = "get_scroll_max_x()\nget maximum scrolling amount ~~ ContentSize.X - WindowSize.X\n\n    Returns:\n        float: the maximum scroll X amount\n\n    .. wraps::\n        int GetScrollMaxX()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_67get_scroll_max_x = {"get_scroll_max_x", (PyCFunction)__pyx_pw_5imgui_4core_67get_scroll_max_x, METH_NOARGS, __pyx_doc_5imgui_4core_66get_scroll_max_x};
static PyObject *__pyx_pw_5imgui_4core_67get_scroll_max_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_max_x (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_66get_scroll_max_x(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_66get_scroll_max_x(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_max_x", 0);

  /* "imgui/core.pyx":2410
 *         int GetScrollMaxX()
 *     """
 *     return cimgui.GetScrollMaxX()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollMaxX();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2410, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2401
 * 
 * 
 * def get_scroll_max_x():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_scroll_max_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2413
 * 
 * 
 * def get_scroll_max_y():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_69get_scroll_max_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_68get_scroll_max_y[] = "get_scroll_max_y()\nget maximum scrolling amount ~~ ContentSize.X - WindowSize.X\n\n    Returns:\n        float: the maximum scroll Y amount\n\n    .. wraps::\n        int GetScrollMaxY()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_69get_scroll_max_y = {"get_scroll_max_y", (PyCFunction)__pyx_pw_5imgui_4core_69get_scroll_max_y, METH_NOARGS, __pyx_doc_5imgui_4core_68get_scroll_max_y};
static PyObject *__pyx_pw_5imgui_4core_69get_scroll_max_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_max_y (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_68get_scroll_max_y(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_68get_scroll_max_y(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_max_y", 0);

  /* "imgui/core.pyx":2422
 *         int GetScrollMaxY()
 *     """
 *     return cimgui.GetScrollMaxY()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollMaxY();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2422, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2413
 * 
 * 
 * def get_scroll_max_y():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_scroll_max_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2425
 * 
 * 
 * def set_scroll_x(float scroll_x):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxX()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_71set_scroll_x(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_x); /*proto*/
static char __pyx_doc_5imgui_4core_70set_scroll_x[] = "set_scroll_x(float scroll_x)\nset scrolling amount [0..SetScrollMaxX()]\n\n    .. wraps::\n        int SetScrollX(float)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_71set_scroll_x = {"set_scroll_x", (PyCFunction)__pyx_pw_5imgui_4core_71set_scroll_x, METH_O, __pyx_doc_5imgui_4core_70set_scroll_x};
static PyObject *__pyx_pw_5imgui_4core_71set_scroll_x(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_x) {
  float __pyx_v_scroll_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_x (wrapper)", 0);
  assert(__pyx_arg_scroll_x); {
    __pyx_v_scroll_x = __pyx_PyFloat_AsFloat(__pyx_arg_scroll_x); if (unlikely((__pyx_v_scroll_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2425, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_scroll_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_70set_scroll_x(__pyx_self, ((float)__pyx_v_scroll_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_70set_scroll_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_x", 0);

  /* "imgui/core.pyx":2431
 *         int SetScrollX(float)
 *     """
 *     cimgui.SetScrollX(scroll_x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetScrollX(__pyx_v_scroll_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2431, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2425
 * 
 * 
 * def set_scroll_x(float scroll_x):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxX()]
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_scroll_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2434
 * 
 * 
 * def set_scroll_y(float scroll_y):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxY()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_73set_scroll_y(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_y); /*proto*/
static char __pyx_doc_5imgui_4core_72set_scroll_y[] = "set_scroll_y(float scroll_y)\nset scrolling amount [0..SetScrollMaxY()]\n\n    .. wraps::\n        int SetScrollY(flot)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_73set_scroll_y = {"set_scroll_y", (PyCFunction)__pyx_pw_5imgui_4core_73set_scroll_y, METH_O, __pyx_doc_5imgui_4core_72set_scroll_y};
static PyObject *__pyx_pw_5imgui_4core_73set_scroll_y(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_y) {
  float __pyx_v_scroll_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_y (wrapper)", 0);
  assert(__pyx_arg_scroll_y); {
    __pyx_v_scroll_y = __pyx_PyFloat_AsFloat(__pyx_arg_scroll_y); if (unlikely((__pyx_v_scroll_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2434, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_scroll_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_72set_scroll_y(__pyx_self, ((float)__pyx_v_scroll_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_72set_scroll_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_y", 0);

  /* "imgui/core.pyx":2440
 *         int SetScrollY(flot)
 *     """
 *     return cimgui.SetScrollY(scroll_y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetScrollY(__pyx_v_scroll_y);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2440, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2434
 * 
 * 
 * def set_scroll_y(float scroll_y):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxY()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_scroll_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2443
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_75set_window_font_scale(PyObject *__pyx_self, PyObject *__pyx_arg_scale); /*proto*/
static char __pyx_doc_5imgui_4core_74set_window_font_scale[] = "set_window_font_scale(float scale)\nAdjust per-window font scale for current window.\n\n    Function should be called inside window context so after calling\n    :any:`begin()`.\n\n    Note: use ``get_io().font_global_scale`` if you want to scale all windows.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: font scale\")\n        imgui.set_window_font_scale(2.0)\n        imgui.text(\"Bigger font\")\n        imgui.end()\n\n    Args:\n        scale (float): font scale\n\n    .. wraps::\n        void SetWindowFontScale(float scale)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_75set_window_font_scale = {"set_window_font_scale", (PyCFunction)__pyx_pw_5imgui_4core_75set_window_font_scale, METH_O, __pyx_doc_5imgui_4core_74set_window_font_scale};
static PyObject *__pyx_pw_5imgui_4core_75set_window_font_scale(PyObject *__pyx_self, PyObject *__pyx_arg_scale) {
  float __pyx_v_scale;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_font_scale (wrapper)", 0);
  assert(__pyx_arg_scale); {
    __pyx_v_scale = __pyx_PyFloat_AsFloat(__pyx_arg_scale); if (unlikely((__pyx_v_scale == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2443, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_74set_window_font_scale(__pyx_self, ((float)__pyx_v_scale));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_74set_window_font_scale(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scale) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_font_scale", 0);

  /* "imgui/core.pyx":2466
 *         void SetWindowFontScale(float scale)
 *     """
 *     cimgui.SetWindowFontScale(scale)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetWindowFontScale(__pyx_v_scale);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2466, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2443
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_window_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2469
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_77set_next_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_76set_next_window_collapsed[] = "set_next_window_collapsed(bool collapsed, ImGuiCond condition=ALWAYS)\nSet next window collapsed state.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 60\n        :width: 400\n\n        imgui.set_next_window_collapsed(True)\n        imgui.begin(\"Example: collapsed window\")\n        imgui.end()\n\n\n    Args:\n        collapsed (bool): set to True if window has to be collapsed.\n        condition (:ref:`condition flag <condition-options>`): defines on\n            which condition value should be set. Defaults to\n            :any:`imgui.ALWAYS`.\n\n    .. wraps::\n         void SetNextWindowCollapsed(\n             bool collapsed, ImGuiCond cond = 0\n         )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_77set_next_window_collapsed = {"set_next_window_collapsed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_77set_next_window_collapsed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_76set_next_window_collapsed};
static PyObject *__pyx_pw_5imgui_4core_77set_next_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_collapsed;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_collapsed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_collapsed,&__pyx_n_s_condition,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_collapsed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_collapsed") < 0)) __PYX_ERR(0, 2469, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_collapsed = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_collapsed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2470, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[1]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2470, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__39;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_collapsed", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2469, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_76set_next_window_collapsed(__pyx_self, __pyx_v_collapsed, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_76set_next_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_collapsed", 0);

  /* "imgui/core.pyx":2496
 * 
 *     """
 *     cimgui.SetNextWindowCollapsed(collapsed, condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowCollapsed(__pyx_v_collapsed, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2496, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2469
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2499
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_79set_next_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_78set_next_window_focus[] = "set_next_window_focus()\nSet next window to be focused (most front).\n\n    .. wraps::\n        void SetNextWindowFocus()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_79set_next_window_focus = {"set_next_window_focus", (PyCFunction)__pyx_pw_5imgui_4core_79set_next_window_focus, METH_NOARGS, __pyx_doc_5imgui_4core_78set_next_window_focus};
static PyObject *__pyx_pw_5imgui_4core_79set_next_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_78set_next_window_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_78set_next_window_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_focus", 0);

  /* "imgui/core.pyx":2505
 *         void SetNextWindowFocus()
 *     """
 *     cimgui.SetNextWindowFocus()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2505, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2499
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2508
 * 
 * 
 * def set_next_window_bg_alpha(float alpha):             # <<<<<<<<<<<<<<
 *     """set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_81set_next_window_bg_alpha(PyObject *__pyx_self, PyObject *__pyx_arg_alpha); /*proto*/
static char __pyx_doc_5imgui_4core_80set_next_window_bg_alpha[] = "set_next_window_bg_alpha(float alpha)\nset next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.\n\n    .. wraps::\n        void SetNextWindowBgAlpha(float)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_81set_next_window_bg_alpha = {"set_next_window_bg_alpha", (PyCFunction)__pyx_pw_5imgui_4core_81set_next_window_bg_alpha, METH_O, __pyx_doc_5imgui_4core_80set_next_window_bg_alpha};
static PyObject *__pyx_pw_5imgui_4core_81set_next_window_bg_alpha(PyObject *__pyx_self, PyObject *__pyx_arg_alpha) {
  float __pyx_v_alpha;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_bg_alpha (wrapper)", 0);
  assert(__pyx_arg_alpha); {
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(__pyx_arg_alpha); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2508, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_bg_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_80set_next_window_bg_alpha(__pyx_self, ((float)__pyx_v_alpha));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_80set_next_window_bg_alpha(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_alpha) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_bg_alpha", 0);

  /* "imgui/core.pyx":2514
 *         void SetNextWindowBgAlpha(float)
 *     """
 *     cimgui.SetNextWindowBgAlpha(alpha)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowBgAlpha(__pyx_v_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2514, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2508
 * 
 * 
 * def set_next_window_bg_alpha(float alpha):             # <<<<<<<<<<<<<<
 *     """set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_bg_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2517
 * 
 * 
 * def get_window_draw_list():             # <<<<<<<<<<<<<<
 *     """Get the draw list associated with the window, to append your own drawing primitives
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_83get_window_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_82get_window_draw_list[] = "get_window_draw_list()\nGet the draw list associated with the window, to append your own drawing primitives\n\n    It may be useful if you want to do your own drawing via the :class:`_DrawList`\n    API.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 10 10\n\n\n        pos_x = 10\n        pos_y = 10\n        sz = 20\n\n        draw_list = imgui.get_window_draw_list()\n\n        for i in range(0, imgui.COLOR_COUNT):\n            name = imgui.get_style_color_name(i);\n            draw_list.add_rect_filled(pos_x, pos_y, pos_x+sz, pos_y+sz, imgui.get_color_u32_idx(i));\n            imgui.dummy(sz, sz);\n            imgui.same_line();\n\n        rgba_color = imgui.get_color_u32_rgba(1, 1, 0, 1);\n        draw_list.add_rect_filled(pos_x, pos_y, pos_x+sz, pos_y+sz, rgba_color);\n\n\n    Returns:\n        ImDrawList*\n\n    .. wraps::\n        ImDrawList* GetWindowDrawList()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_83get_window_draw_list = {"get_window_draw_list", (PyCFunction)__pyx_pw_5imgui_4core_83get_window_draw_list, METH_NOARGS, __pyx_doc_5imgui_4core_82get_window_draw_list};
static PyObject *__pyx_pw_5imgui_4core_83get_window_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_draw_list (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_82get_window_draw_list(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_82get_window_draw_list(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawList *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_draw_list", 0);

  /* "imgui/core.pyx":2552
 *         ImDrawList* GetWindowDrawList()
 *     """
 *     return _DrawList.from_ptr(cimgui.GetWindowDrawList())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowDrawList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2552, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_9_DrawList_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2517
 * 
 * 
 * def get_window_draw_list():             # <<<<<<<<<<<<<<
 *     """Get the draw list associated with the window, to append your own drawing primitives
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_draw_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2555
 * 
 * 
 * def get_overlay_draw_list():             # <<<<<<<<<<<<<<
 *     """Get a special draw list that will be drawn last (over all windows).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_85get_overlay_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_84get_overlay_draw_list[] = "get_overlay_draw_list()\nGet a special draw list that will be drawn last (over all windows).\n\n    Useful for drawing overlays.\n\n    Returns:\n        ImDrawList*\n\n    .. wraps::\n        ImDrawList* GetWindowDrawList()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_85get_overlay_draw_list = {"get_overlay_draw_list", (PyCFunction)__pyx_pw_5imgui_4core_85get_overlay_draw_list, METH_NOARGS, __pyx_doc_5imgui_4core_84get_overlay_draw_list};
static PyObject *__pyx_pw_5imgui_4core_85get_overlay_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_overlay_draw_list (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_84get_overlay_draw_list(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_84get_overlay_draw_list(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawList *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_overlay_draw_list", 0);

  /* "imgui/core.pyx":2566
 *         ImDrawList* GetWindowDrawList()
 *     """
 *     return _DrawList.from_ptr(cimgui.GetOverlayDrawList())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetOverlayDrawList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2566, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_9_DrawList_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2555
 * 
 * 
 * def get_overlay_draw_list():             # <<<<<<<<<<<<<<
 *     """Get a special draw list that will be drawn last (over all windows).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_overlay_draw_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2569
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_87get_window_position(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_86get_window_position[] = "get_window_position()\nGet current window position.\n\n    It may be useful if you want to do your own drawing via the DrawList\n    api.\n\n    Returns:\n        Vec2: two-tuple of window coordinates in screen space.\n\n    .. wraps::\n        ImVec2 GetWindowPos()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_87get_window_position = {"get_window_position", (PyCFunction)__pyx_pw_5imgui_4core_87get_window_position, METH_NOARGS, __pyx_doc_5imgui_4core_86get_window_position};
static PyObject *__pyx_pw_5imgui_4core_87get_window_position(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_position (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_86get_window_position(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_86get_window_position(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_position", 0);

  /* "imgui/core.pyx":2581
 *         ImVec2 GetWindowPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2581, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2569
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2584
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_89get_window_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_88get_window_size[] = "get_window_size()\nGet current window size.\n\n    Returns:\n        Vec2: two-tuple of window dimensions.\n\n    .. wraps::\n        ImVec2 GetWindowSize()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_89get_window_size = {"get_window_size", (PyCFunction)__pyx_pw_5imgui_4core_89get_window_size, METH_NOARGS, __pyx_doc_5imgui_4core_88get_window_size};
static PyObject *__pyx_pw_5imgui_4core_89get_window_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_88get_window_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_88get_window_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_size", 0);

  /* "imgui/core.pyx":2593
 *         ImVec2 GetWindowSize()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowSize())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2593, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2584
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2596
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_91get_window_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_90get_window_width[] = "get_window_width()\nGet current window width.\n\n    Returns:\n        float: width of current window.\n\n    .. wraps::\n        float GetWindowWidth()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_91get_window_width = {"get_window_width", (PyCFunction)__pyx_pw_5imgui_4core_91get_window_width, METH_NOARGS, __pyx_doc_5imgui_4core_90get_window_width};
static PyObject *__pyx_pw_5imgui_4core_91get_window_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_90get_window_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_90get_window_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_width", 0);

  /* "imgui/core.pyx":2605
 *         float GetWindowWidth()
 *     """
 *     return cimgui.GetWindowWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2605, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2596
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2608
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_93get_window_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_92get_window_height[] = "get_window_height()\nGet current window height.\n\n    Returns:\n        float: height of current window.\n\n    .. wraps::\n        float GetWindowHeight()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_93get_window_height = {"get_window_height", (PyCFunction)__pyx_pw_5imgui_4core_93get_window_height, METH_NOARGS, __pyx_doc_5imgui_4core_92get_window_height};
static PyObject *__pyx_pw_5imgui_4core_93get_window_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_height (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_92get_window_height(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_92get_window_height(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_height", 0);

  /* "imgui/core.pyx":2617
 *         float GetWindowHeight()
 *     """
 *     return cimgui.GetWindowHeight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowHeight();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2617, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2608
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2620
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_95set_next_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_94set_next_window_position[] = "set_next_window_position(float x, float y, ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0)\nSet next window position.\n\n    Call before :func:`begin()`.\n\n    Args:\n        x (float): x window coordinate\n        y (float): y window coordinate\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n        pivot_x (float): pivot x window coordinate\n        pivot_y (float): pivot y window coordinate\n\n    .. visual-example::\n        :title: window positioning\n        :height: 50\n\n        imgui.set_next_window_size(20, 20)\n\n        for index in range(5):\n            imgui.set_next_window_position(index * 40, 5)\n            imgui.begin(str(index))\n            imgui.end()\n\n    .. wraps::\n        void SetNextWindowPos(\n            const ImVec2& pos,\n            ImGuiCond cond = 0,\n            const ImVec2& pivot = ImVec2(0,0)\n        )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_95set_next_window_position = {"set_next_window_position", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_95set_next_window_position, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_94set_next_window_position};
static PyObject *__pyx_pw_5imgui_4core_95set_next_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_x;
  float __pyx_v_y;
  ImGuiCond __pyx_v_condition;
  float __pyx_v_pivot_x;
  float __pyx_v_pivot_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_position (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_condition,&__pyx_n_s_pivot_x,&__pyx_n_s_pivot_y,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_position", 0, 2, 5, 1); __PYX_ERR(0, 2620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pivot_x);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pivot_y);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_position") < 0)) __PYX_ERR(0, 2620, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2621, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2621, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2621, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__40;
    }
    if (values[3]) {
      __pyx_v_pivot_x = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_pivot_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2621, __pyx_L3_error)
    } else {
      __pyx_v_pivot_x = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_pivot_y = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_pivot_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2621, __pyx_L3_error)
    } else {
      __pyx_v_pivot_y = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_position", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2620, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_94set_next_window_position(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_condition, __pyx_v_pivot_x, __pyx_v_pivot_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_94set_next_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition, float __pyx_v_pivot_x, float __pyx_v_pivot_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_position", 0);

  /* "imgui/core.pyx":2654
 * 
 *     """
 *     cimgui.SetNextWindowPos(_cast_args_ImVec2(x, y), condition, _cast_args_ImVec2(pivot_x, pivot_y))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_x, __pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2654, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_pivot_x, __pyx_v_pivot_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2654, __pyx_L1_error)
  try {
    ImGui::SetNextWindowPos(__pyx_t_1, __pyx_v_condition, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2654, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2620
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2657
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_97set_next_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_96set_next_window_size[] = "set_next_window_size(float width, float height, ImGuiCond condition=ALWAYS)\nSet next window size.\n\n    Call before :func:`begin()`.\n\n    Args:\n        width (float): window width. Value 0.0 enables autofit.\n        height (float): window height. Value 0.0 enables autofit.\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: window sizing\n        :height: 200\n\n        imgui.set_next_window_position(io.display_size.x * 0.5, io.display_size.y * 0.5, 1, pivot_x = 0.5, pivot_y = 0.5)\n\n        imgui.set_next_window_size(80, 180)\n        imgui.begin(\"High\")\n        imgui.end()\n\n\n    .. wraps::\n        void SetNextWindowSize(\n            const ImVec2& size, ImGuiCond cond = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_97set_next_window_size = {"set_next_window_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_97set_next_window_size, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_96set_next_window_size};
static PyObject *__pyx_pw_5imgui_4core_97set_next_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_size", 0, 2, 3, 1); __PYX_ERR(0, 2657, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_size") < 0)) __PYX_ERR(0, 2657, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2658, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2658, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2658, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__41;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_size", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2657, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_96set_next_window_size(__pyx_self, __pyx_v_width, __pyx_v_height, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_96set_next_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_size", 0);

  /* "imgui/core.pyx":2686
 *         )
 *     """
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)             # <<<<<<<<<<<<<<
 * 
 * def set_next_window_content_size(float width, float height):
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2686, __pyx_L1_error)
  try {
    ImGui::SetNextWindowSize(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2686, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2657
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2688
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_next_window_content_size(float width, float height):             # <<<<<<<<<<<<<<
 *     """Set content size of the next window. Show scrollbars
 *        if content doesn't fit in the window
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_99set_next_window_content_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_98set_next_window_content_size[] = "set_next_window_content_size(float width, float height)\nSet content size of the next window. Show scrollbars\n       if content doesn't fit in the window\n\n    Call before :func:`begin()`.\n\n    Args:\n        width(float): width of the content area\n        height(float): height of the content area\n\n    .. visual-example::\n        :title: Content Size Demo\n        :height: 30\n\n        imgui.set_window_size(20,20)\n        imgui.set_next_window_content_size(100,100)\n\n        imgui.begin(\"Window\", True)\n        imgui.text(\"Some example text\")\n        imgui.end()\n\n    .. wraps::\n        void SetNextWindowContentSize(\n            const ImVec2& size\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_99set_next_window_content_size = {"set_next_window_content_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_99set_next_window_content_size, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_98set_next_window_content_size};
static PyObject *__pyx_pw_5imgui_4core_99set_next_window_content_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  float __pyx_v_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_content_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_content_size", 1, 2, 2, 1); __PYX_ERR(0, 2688, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_content_size") < 0)) __PYX_ERR(0, 2688, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2688, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2688, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_content_size", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2688, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_content_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_98set_next_window_content_size(__pyx_self, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_98set_next_window_content_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_content_size", 0);

  /* "imgui/core.pyx":2714
 *         )
 *     """
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2714, __pyx_L1_error)
  try {
    ImGui::SetNextWindowContentSize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2714, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2688
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_next_window_content_size(float width, float height):             # <<<<<<<<<<<<<<
 *     """Set content size of the next window. Show scrollbars
 *        if content doesn't fit in the window
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_content_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2716
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the current window
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_101set_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_100set_window_position[] = "set_window_position(float x, float y, ImGuiCond condition=ALWAYS)\nSet the size of the current window\n\n    Call inside: func: 'begin()'\n\n    Args:\n        x(float): position on the x axis\n        y(float): position on the y axis\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: Window Size Demo\n        :height: 200\n\n        imgui.begin(\"Window 1\")\n        imgui.set_window_position(20,20)\n        imgui.end()\n\n        imgui.begin(\"Window 2\")\n        imgui.set_window_position(20,50)\n        imgui.end()\n\n    .. wraps::\n        void SetWindowPos(\n            const ImVec2& pos,\n            ImGuiCond cond\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_101set_window_position = {"set_window_position", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_101set_window_position, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_100set_window_position};
static PyObject *__pyx_pw_5imgui_4core_101set_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_x;
  float __pyx_v_y;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_position (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_position", 0, 2, 3, 1); __PYX_ERR(0, 2716, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_position") < 0)) __PYX_ERR(0, 2716, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2716, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2716, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2716, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__42;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_position", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2716, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_100set_window_position(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_100set_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_position", 0);

  /* "imgui/core.pyx":2745
 *         )
 *     """
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)             # <<<<<<<<<<<<<<
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_x, __pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2745, __pyx_L1_error)
  try {
    ImGui::SetWindowPos(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2745, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2716
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the current window
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2747
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the window with label
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_103set_window_position_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_102set_window_position_labeled[] = "set_window_position_labeled(str label, float x, float y, ImGuiCond condition=ALWAYS)\nSet the size of the window with label\n\n    Args:\n        label(str): name of the window to be resized\n        x(float): position on the x axis\n        y(float): position on the y axis\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: Window Size Demo\n        :height: 200\n\n        imgui.set_window_position_labeled(\"Window 1\", 20, 50)\n        imgui.set_window_position_labeled(\"Window 2\", 20, 100)\n\n        imgui.begin(\"Window 1\")\n        imgui.end()\n\n        imgui.begin(\"Window 2\")\n        imgui.end()\n\n    .. wraps::\n        void SetWindowPos(\n            const char* name,\n            const ImVec2& pos,\n            ImGuiCond cond\n    )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_103set_window_position_labeled = {"set_window_position_labeled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_103set_window_position_labeled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_102set_window_position_labeled};
static PyObject *__pyx_pw_5imgui_4core_103set_window_position_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_x;
  float __pyx_v_y;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_position_labeled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_condition,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_position_labeled", 0, 3, 4, 1); __PYX_ERR(0, 2747, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_position_labeled", 0, 3, 4, 2); __PYX_ERR(0, 2747, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_position_labeled") < 0)) __PYX_ERR(0, 2747, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2747, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2747, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[3]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2747, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__43;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_position_labeled", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2747, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_position_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2747, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_102set_window_position_labeled(__pyx_self, __pyx_v_label, __pyx_v_x, __pyx_v_y, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_102set_window_position_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_position_labeled", 0);

  /* "imgui/core.pyx":2778
 *     """
 *     cimgui.SetWindowPos(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(x,y),
 *         condition
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2778, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2778, __pyx_L1_error)

  /* "imgui/core.pyx":2779
 *     cimgui.SetWindowPos(
 *         _bytes(label),
 *         _cast_args_ImVec2(x,y),             # <<<<<<<<<<<<<<
 *         condition
 *     )
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_x, __pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2779, __pyx_L1_error)

  /* "imgui/core.pyx":2777
 *     )
 *     """
 *     cimgui.SetWindowPos(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(x,y),
 */
  try {
    ImGui::SetWindowPos(__pyx_t_2, __pyx_t_3, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2777, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2747
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the window with label
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_window_position_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2783
 *     )
 * 
 * def set_window_collapsed(bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the current window to be collapsed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_105set_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_104set_window_collapsed[] = "set_window_collapsed(bool collapsed, ImGuiCond condition=ALWAYS)\nSet the current window to be collapsed\n\n    Call inside: func: 'begin()'\n\n    Args:\n        collapsed(bool): set boolean for collapsing the window. Set True for closed\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: Window Collapsed Demo\n        :height: 200\n\n        imgui.begin(\"Window 1\")\n        imgui.set_window_collapsed(True)\n        imgui.end()\n\n    .. wraps::\n        void SetWindowCollapsed(\n            bool collapsed,\n            ImGuiCond cond\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_105set_window_collapsed = {"set_window_collapsed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_105set_window_collapsed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_104set_window_collapsed};
static PyObject *__pyx_pw_5imgui_4core_105set_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_collapsed;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_collapsed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_collapsed,&__pyx_n_s_condition,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_collapsed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_collapsed") < 0)) __PYX_ERR(0, 2783, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_collapsed = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_collapsed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2783, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[1]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2783, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__44;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_collapsed", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2783, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_104set_window_collapsed(__pyx_self, __pyx_v_collapsed, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_104set_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_collapsed", 0);

  /* "imgui/core.pyx":2807
 *         )
 *     """
 *     cimgui.SetWindowCollapsed(collapsed, condition)             # <<<<<<<<<<<<<<
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):
 */
  try {
    ImGui::SetWindowCollapsed(__pyx_v_collapsed, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2807, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2783
 *     )
 * 
 * def set_window_collapsed(bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the current window to be collapsed
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2809
 *     cimgui.SetWindowCollapsed(collapsed, condition)
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set window with label to collapse
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_107set_window_collapsed_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_106set_window_collapsed_labeled[] = "set_window_collapsed_labeled(str label, bool collapsed, ImGuiCond condition=ALWAYS)\nSet window with label to collapse\n\n    Args:\n        label(string): name of the window\n        collapsed(bool): set boolean for collapsing the window. Set True for closed\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: Window Collapsed Demo\n        :height: 200\n\n        imgui.set_window_collapsed_labeled(\"Window 1\", True)\n        imgui.begin(\"Window 1\")\n        imgui.end()\n\n    .. wraps::\n        void SetWindowCollapsed(\n            const char* name,\n            bool collapsed,\n            ImGuiCond cond\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_107set_window_collapsed_labeled = {"set_window_collapsed_labeled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_107set_window_collapsed_labeled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_106set_window_collapsed_labeled};
static PyObject *__pyx_pw_5imgui_4core_107set_window_collapsed_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_collapsed;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_collapsed_labeled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_collapsed,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_collapsed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_collapsed_labeled", 0, 2, 3, 1); __PYX_ERR(0, 2809, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_collapsed_labeled") < 0)) __PYX_ERR(0, 2809, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_collapsed = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_collapsed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2809, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2809, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__45;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_collapsed_labeled", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2809, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_collapsed_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2809, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_106set_window_collapsed_labeled(__pyx_self, __pyx_v_label, __pyx_v_collapsed, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_106set_window_collapsed_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_collapsed_labeled", 0);

  /* "imgui/core.pyx":2833
 *         )
 *     """
 *     cimgui.SetWindowCollapsed(_bytes(label), collapsed, condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2833, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2833, __pyx_L1_error)
  try {
    ImGui::SetWindowCollapsed(__pyx_t_2, __pyx_v_collapsed, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2833, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2809
 *     cimgui.SetWindowCollapsed(collapsed, condition)
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set window with label to collapse
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_window_collapsed_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2836
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_109is_window_collapsed(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_108is_window_collapsed[] = "is_window_collapsed()\nCheck if current window is collapsed.\n\n    Returns:\n        bool: True if window is collapsed\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_109is_window_collapsed = {"is_window_collapsed", (PyCFunction)__pyx_pw_5imgui_4core_109is_window_collapsed, METH_NOARGS, __pyx_doc_5imgui_4core_108is_window_collapsed};
static PyObject *__pyx_pw_5imgui_4core_109is_window_collapsed(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_collapsed (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_108is_window_collapsed(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_108is_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_collapsed", 0);

  /* "imgui/core.pyx":2842
 *         bool: True if window is collapsed
 *     """
 *     return cimgui.IsWindowCollapsed()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowCollapsed();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2842, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2836
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2845
 * 
 * 
 * def is_window_appearing():             # <<<<<<<<<<<<<<
 *     """Check if current window is appearing.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_111is_window_appearing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_110is_window_appearing[] = "is_window_appearing()\nCheck if current window is appearing.\n\n    Returns:\n        bool: True if window is appearing\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_111is_window_appearing = {"is_window_appearing", (PyCFunction)__pyx_pw_5imgui_4core_111is_window_appearing, METH_NOARGS, __pyx_doc_5imgui_4core_110is_window_appearing};
static PyObject *__pyx_pw_5imgui_4core_111is_window_appearing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_appearing (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_110is_window_appearing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_110is_window_appearing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_appearing", 0);

  /* "imgui/core.pyx":2851
 *         bool: True if window is appearing
 *     """
 *     return cimgui.IsWindowAppearing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowAppearing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2851, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2845
 * 
 * 
 * def is_window_appearing():             # <<<<<<<<<<<<<<
 *     """Check if current window is appearing.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_window_appearing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2855
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_113tree_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_112tree_node[] = "tree_node(str text, ImGuiTreeNodeFlags flags=0)\nDraw a tree node.\n\n    Returns 'true' if the node is drawn, call :func:`tree_pop()` to finish.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: tree node\")\n        if imgui.tree_node(\"Expand me!\", imgui.TREE_NODE_DEFAULT_OPEN):\n            imgui.text(\"Lorem Ipsum\")\n            imgui.tree_pop()\n        imgui.end()\n\n    Args:\n        text (str): Tree node label\n        flags: TreeNode flags. See:\n            :ref:`list of available flags <treenode-flag-options>`.\n\n    Returns:\n        bool: True if tree node is displayed (opened).\n\n    .. wraps::\n        bool TreeNode(const char* label)\n        bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_113tree_node = {"tree_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_113tree_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_112tree_node};
static PyObject *__pyx_pw_5imgui_4core_113tree_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tree_node") < 0)) __PYX_ERR(0, 2855, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[1]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2855, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tree_node", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2855, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.tree_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2855, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_112tree_node(__pyx_self, __pyx_v_text, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_112tree_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, ImGuiTreeNodeFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tree_node", 0);

  /* "imgui/core.pyx":2884
 *         bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)
 *     """
 *     return cimgui.TreeNodeEx(_bytes(text), flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2884, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2884, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::TreeNodeEx(__pyx_t_2, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2884, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2855
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.tree_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2887
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_115tree_pop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_114tree_pop[] = "tree_pop()\nCalled to clear the tree nodes stack and return back the identation.\n\n    Same as calls to :func:`unindent()` and :func:`pop_id()`.\n    For a tree example see :func:`tree_node()`.\n\n    .. wraps::\n        void TreePop()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_115tree_pop = {"tree_pop", (PyCFunction)__pyx_pw_5imgui_4core_115tree_pop, METH_NOARGS, __pyx_doc_5imgui_4core_114tree_pop};
static PyObject *__pyx_pw_5imgui_4core_115tree_pop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_pop (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_114tree_pop(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_114tree_pop(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tree_pop", 0);

  /* "imgui/core.pyx":2896
 *         void TreePop()
 *     """
 *     cimgui.TreePop()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::TreePop();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2896, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2887
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.tree_pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2899
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_117collapsing_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_116collapsing_header[] = "collapsing_header(str text, visible=None, ImGuiTreeNodeFlags flags=0)\nCollapsable/Expandable header view.\n\n    Returns 'true' if the header is open. Doesn't indent or push to stack,\n    so no need to call any pop function.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 80 40\n\n        visible = True\n\n        imgui.begin(\"Example: collapsing header\")\n        expanded, visible = imgui.collapsing_header(\"Expand me!\", visible)\n\n        if expanded:\n            imgui.text(\"Now you see me!\")\n        imgui.end()\n\n    Args:\n        text (str): Tree node label\n        visible (bool or None): Force visibility of a header. If set to True\n            shows additional (X) close button. If set to False header is not\n            visible at all. If set to None header is always visible and close\n            button is not displayed.\n        flags: TreeNode flags. See:\n            :ref:`list of available flags <treenode-flag-options>`.\n\n    Returns:\n        tuple: a ``(expanded, visible)`` two-tuple indicating if item was\n        expanded and whether the header is visible or not (only if ``visible``\n        input argument is True/False).\n\n    .. wraps::\n        bool CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0)\n\n        bool CollapsingHeader(\n            const char* label,\n            bool* p_open,\n            ImGuiTreeNodeFlags flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_117collapsing_header = {"collapsing_header", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_117collapsing_header, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_116collapsing_header};
static PyObject *__pyx_pw_5imgui_4core_117collapsing_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_visible = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collapsing_header (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_visible,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};

    /* "imgui/core.pyx":2901
 * def collapsing_header(
 *     str text,
 *     visible=None,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiTreeNodeFlags flags=0
 * ):
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_visible);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "collapsing_header") < 0)) __PYX_ERR(0, 2899, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_visible = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2902, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("collapsing_header", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2899, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.collapsing_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2900, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_116collapsing_header(__pyx_self, __pyx_v_text, __pyx_v_visible, __pyx_v_flags);

  /* "imgui/core.pyx":2899
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_116collapsing_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, PyObject *__pyx_v_visible, ImGuiTreeNodeFlags __pyx_v_flags) {
  bool __pyx_v_inout_opened;
  bool __pyx_v_clicked;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("collapsing_header", 0);

  /* "imgui/core.pyx":2947
 *         )
 *     """
 *     cdef cimgui.bool inout_opened = visible             # <<<<<<<<<<<<<<
 *     if visible is None:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2947, __pyx_L1_error)
  __pyx_v_inout_opened = __pyx_t_1;

  /* "imgui/core.pyx":2948
 *     """
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_visible == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "imgui/core.pyx":2949
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)             # <<<<<<<<<<<<<<
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)
 */
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 2949, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 2949, __pyx_L1_error)
    try {
      __pyx_t_1 = ImGui::CollapsingHeader(__pyx_t_5, NULL, __pyx_v_flags);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2949, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_clicked = __pyx_t_1;

    /* "imgui/core.pyx":2948
 *     """
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":2951
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)             # <<<<<<<<<<<<<<
 *     return clicked, None if visible is None else inout_opened
 * 
 */
  /*else*/ {
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 2951, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 2951, __pyx_L1_error)
    try {
      __pyx_t_1 = ImGui::CollapsingHeader(__pyx_t_5, (&__pyx_v_inout_opened), __pyx_v_flags);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2951, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_clicked = __pyx_t_1;
  }
  __pyx_L3:;

  /* "imgui/core.pyx":2952
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)
 *     return clicked, None if visible is None else inout_opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_clicked); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_v_visible == Py_None);
  if ((__pyx_t_3 != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_6 = Py_None;
  } else {
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_inout_opened); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2899
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.collapsing_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2955
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_119selectable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_118selectable[] = "selectable(str label, selected=False, ImGuiTreeNodeFlags flags=0, width=0, height=0)\nSelectable text. Returns 'true' if the item is pressed.\n\n    Width of 0.0 will use the available width in the parent container.\n    Height of 0.0 will use the available height in the parent container.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 200\n        :width: 200\n        :click: 80 40\n\n        selected = [False, False]\n        imgui.begin(\"Example: selectable\")\n        _, selected[0] = imgui.selectable(\n            \"1. I am selectable\", selected[0]\n        )\n        _, selected[1] = imgui.selectable(\n            \"2. I am selectable too\", selected[1]\n        )\n        imgui.text(\"3. I am not selectable\")\n        imgui.end()\n\n    Args:\n        label (str): The label.\n        selected (bool): defines if item is selected or not.\n        flags: Selectable flags. See:\n            :ref:`list of available flags <selectable-flag-options>`.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        tuple: a ``(opened, selected)`` two-tuple indicating if item was\n        clicked by the user and the current state of item.\n\n    .. wraps::\n        bool Selectable(\n            const char* label,\n            bool selected = false,\n            ImGuiSelectableFlags flags = 0,\n            const ImVec2& size = ImVec2(0,0)\n        )\n\n        bool Selectable(\n            const char* label,\n            bool* selected,\n            ImGuiSelectableFlags flags = 0,\n            const ImVec2& size = ImVec2(0,0)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_119selectable = {"selectable", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_119selectable, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_118selectable};
static PyObject *__pyx_pw_5imgui_4core_119selectable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_selected = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("selectable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_selected,&__pyx_n_s_flags,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "imgui/core.pyx":2957
 * def selectable(
 *     str label,
 *     selected=False,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiTreeNodeFlags flags=0,
 *     width=0,
 */
    values[1] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_selected);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "selectable") < 0)) __PYX_ERR(0, 2955, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_selected = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2958, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
    __pyx_v_width = values[3];
    __pyx_v_height = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("selectable", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2955, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.selectable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2956, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_118selectable(__pyx_self, __pyx_v_label, __pyx_v_selected, __pyx_v_flags, __pyx_v_width, __pyx_v_height);

  /* "imgui/core.pyx":2955
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_118selectable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_selected, ImGuiTreeNodeFlags __pyx_v_flags, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  bool __pyx_v_inout_selected;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  float __pyx_t_4;
  float __pyx_t_5;
  ImVec2 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("selectable", 0);

  /* "imgui/core.pyx":3011
 *         )
 *     """
 *     cdef cimgui.bool inout_selected = selected             # <<<<<<<<<<<<<<
 *     return cimgui.Selectable(
 *         _bytes(label),
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_selected); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3011, __pyx_L1_error)
  __pyx_v_inout_selected = __pyx_t_1;

  /* "imgui/core.pyx":3012
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3013
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         &inout_selected,
 *         flags,
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3013, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3013, __pyx_L1_error)

  /* "imgui/core.pyx":3016
 *         &inout_selected,
 *         flags,
 *         _cast_args_ImVec2(width, height)), inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3016, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3016, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_4, __pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3016, __pyx_L1_error)

  /* "imgui/core.pyx":3012
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  try {
    __pyx_t_1 = ImGui::Selectable(__pyx_t_3, (&__pyx_v_inout_selected), __pyx_v_flags, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3012, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3016
 *         &inout_selected,
 *         flags,
 *         _cast_args_ImVec2(width, height)), inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_inout_selected); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "imgui/core.pyx":3012
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2955
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.selectable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3019
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_121listbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_120listbox[] = "listbox(str label, int current, list items, int height_in_items=-1)\nShow listbox widget.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n\n        current = 2\n        imgui.begin(\"Example: listbox widget\")\n\n        clicked, current = imgui.listbox(\n            \"List\", current, [\"first\", \"second\", \"third\"]\n        )\n\n        imgui.end()\n\n    Args:\n        label (str): The label.\n        current (int): index of selected item.\n        items (list): list of string labels for items.\n        height_in_items (int): height of dropdown in items. Defaults to -1\n            (autosized).\n\n    Returns:\n        tuple: a ``(changed, current)`` tuple indicating change of selection\n        and current index of selected item.\n\n    .. wraps::\n        bool ListBox(\n            const char* label,\n            int* current_item,\n            const char* items[],\n            int items_count,\n            int height_in_items = -1\n        )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_121listbox = {"listbox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_121listbox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_120listbox};
static PyObject *__pyx_pw_5imgui_4core_121listbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_current;
  PyObject *__pyx_v_items = 0;
  int __pyx_v_height_in_items;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_current,&__pyx_n_s_items,&__pyx_n_s_height_in_items,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_current)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, 1); __PYX_ERR(0, 3019, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, 2); __PYX_ERR(0, 3019, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height_in_items);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listbox") < 0)) __PYX_ERR(0, 3019, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_current = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_current == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3021, __pyx_L3_error)
    __pyx_v_items = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_height_in_items = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_height_in_items == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3023, __pyx_L3_error)
    } else {
      __pyx_v_height_in_items = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3019, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.listbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3020, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_items), (&PyList_Type), 1, "items", 1))) __PYX_ERR(0, 3022, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_120listbox(__pyx_self, __pyx_v_label, __pyx_v_current, __pyx_v_items, __pyx_v_height_in_items);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_120listbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items) {
  int __pyx_v_inout_current;
  char const **__pyx_v_in_items;
  Py_ssize_t __pyx_v_index;
  PyObject *__pyx_v_item = NULL;
  bool __pyx_v_opened;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  char const *__pyx_t_6;
  bool __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listbox", 0);

  /* "imgui/core.pyx":3063
 *     """
 * 
 *     cdef int inout_current = current             # <<<<<<<<<<<<<<
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 */
  __pyx_v_inout_current = __pyx_v_current;

  /* "imgui/core.pyx":3064
 * 
 *     cdef int inout_current = current
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))             # <<<<<<<<<<<<<<
 * 
 *     for index, item in enumerate(items):
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 3064, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3064, __pyx_L1_error)
  __pyx_v_in_items = ((char const **)malloc((__pyx_t_1 * (sizeof(char *)))));

  /* "imgui/core.pyx":3066
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 *     for index, item in enumerate(items):             # <<<<<<<<<<<<<<
 *         in_items[index] = strdup(_bytes(item))
 * 
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_v_items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 3066, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_v_index = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "imgui/core.pyx":3067
 * 
 *     for index, item in enumerate(items):
 *         in_items[index] = strdup(_bytes(item))             # <<<<<<<<<<<<<<
 * 
 *     opened = cimgui.ListBox(
 */
    if (!(likely(PyString_CheckExact(__pyx_v_item))||((__pyx_v_item) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_item)->tp_name), 0))) __PYX_ERR(0, 3067, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(((PyObject*)__pyx_v_item)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3067, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3067, __pyx_L1_error)
    (__pyx_v_in_items[__pyx_v_index]) = strdup(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "imgui/core.pyx":3066
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 *     for index, item in enumerate(items):             # <<<<<<<<<<<<<<
 *         in_items[index] = strdup(_bytes(item))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":3070
 * 
 *     opened = cimgui.ListBox(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         &inout_current,
 *         in_items,
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3070, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 3070, __pyx_L1_error)

  /* "imgui/core.pyx":3073
 *         &inout_current,
 *         in_items,
 *         len(items),             # <<<<<<<<<<<<<<
 *         height_in_items
 *     )
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 3073, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3073, __pyx_L1_error)

  /* "imgui/core.pyx":3069
 *         in_items[index] = strdup(_bytes(item))
 * 
 *     opened = cimgui.ListBox(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_current,
 */
  try {
    __pyx_t_7 = ImGui::ListBox(__pyx_t_6, (&__pyx_v_inout_current), __pyx_v_in_items, __pyx_t_1, __pyx_v_height_in_items);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3069, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_opened = __pyx_t_7;

  /* "imgui/core.pyx":3077
 *     )
 * 
 *     for i in range(len(items)):             # <<<<<<<<<<<<<<
 *         free(<char*>in_items[i])
 * 
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 3077, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3077, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_3; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "imgui/core.pyx":3078
 * 
 *     for i in range(len(items)):
 *         free(<char*>in_items[i])             # <<<<<<<<<<<<<<
 * 
 *     free(in_items)
 */
    free(((char *)(__pyx_v_in_items[__pyx_v_i])));
  }

  /* "imgui/core.pyx":3080
 *         free(<char*>in_items[i])
 * 
 *     free(in_items)             # <<<<<<<<<<<<<<
 * 
 *     return opened, inout_current
 */
  free(__pyx_v_in_items);

  /* "imgui/core.pyx":3082
 *     free(in_items)
 * 
 *     return opened, inout_current             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_inout_current); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3019
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.listbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3085
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_123listbox_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_122listbox_header[] = "listbox_header(str label, width=0, height=0)\nFor use if you want to reimplement :func:`listbox()` with custom data\n    or interactions. You need to call :func:`listbox_footer()` at the end.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 200\n        :width: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: custom listbox\")\n\n        imgui.listbox_header(\"List\", 200, 100)\n\n        imgui.selectable(\"Selected\", True)\n        imgui.selectable(\"Not Selected\", False)\n\n        imgui.listbox_footer()\n\n        imgui.end()\n\n    Args:\n        label (str): The label.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        opened (bool): If the item is opened or closed.\n\n    .. wraps::\n        bool ListBoxHeader(\n            const char* label,\n            const ImVec2& size = ImVec2(0,0)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_123listbox_header = {"listbox_header", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_123listbox_header, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_122listbox_header};
static PyObject *__pyx_pw_5imgui_4core_123listbox_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox_header (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listbox_header") < 0)) __PYX_ERR(0, 3085, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listbox_header", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3085, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.listbox_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3086, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_122listbox_header(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_122listbox_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listbox_header", 0);

  /* "imgui/core.pyx":3124
 *         )
 *     """
 *     return cimgui.ListBoxHeader(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3125
 *     """
 *     return cimgui.ListBoxHeader(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height)
 *     )
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3125, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3125, __pyx_L1_error)

  /* "imgui/core.pyx":3126
 *     return cimgui.ListBoxHeader(
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3126, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3126, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3126, __pyx_L1_error)

  /* "imgui/core.pyx":3124
 *         )
 *     """
 *     return cimgui.ListBoxHeader(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)
 */
  try {
    __pyx_t_6 = ImGui::ListBoxHeader(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3124, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3085
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.listbox_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3130
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_125listbox_footer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_124listbox_footer[] = "listbox_footer()\nClosing the listbox, previously opened by :func:`listbox_header()`.\n\n    See :func:`listbox_header()` for usage example.\n\n    .. wraps::\n        void ListBoxFooter()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_125listbox_footer = {"listbox_footer", (PyCFunction)__pyx_pw_5imgui_4core_125listbox_footer, METH_NOARGS, __pyx_doc_5imgui_4core_124listbox_footer};
static PyObject *__pyx_pw_5imgui_4core_125listbox_footer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox_footer (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_124listbox_footer(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_124listbox_footer(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listbox_footer", 0);

  /* "imgui/core.pyx":3138
 *         void ListBoxFooter()
 *     """
 *     cimgui.ListBoxFooter()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ListBoxFooter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3138, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3130
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.listbox_footer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3141
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_127set_tooltip(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_126set_tooltip[] = "set_tooltip(str text)\nSet tooltip under mouse-cursor.\n\n    Usually used with :func:`is_item_hovered()`.\n    For a complex tooltip window see :func:`begin_tooltip()`.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: tooltip\")\n        imgui.button(\"Hover me!\")\n        if imgui.is_item_hovered():\n            imgui.set_tooltip(\"Please?\")\n        imgui.end()\n\n    .. wraps::\n        void SetTooltip(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_127set_tooltip = {"set_tooltip", (PyCFunction)__pyx_pw_5imgui_4core_127set_tooltip, METH_O, __pyx_doc_5imgui_4core_126set_tooltip};
static PyObject *__pyx_pw_5imgui_4core_127set_tooltip(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tooltip (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3141, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_126set_tooltip(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_126set_tooltip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_tooltip", 0);

  /* "imgui/core.pyx":3163
 *     """
 *     # note: "%s" required for safety and to favor of Python string formatting
 *     cimgui.SetTooltip("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3163, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3163, __pyx_L1_error)
  try {
    ImGui::SetTooltip(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3163, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3141
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3166
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_129begin_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_128begin_tooltip[] = "begin_tooltip()\nUse to create full-featured tooltip windows that aren't just text.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 600\n        :height: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: tooltip\")\n        imgui.button(\"Click me!\")\n        if imgui.is_item_hovered():\n            imgui.begin_tooltip()\n            imgui.text(\"This button is clickable.\")\n            imgui.text(\"This button has full window tooltip.\")\n            texture_id = imgui.get_io().fonts.texture_id\n            imgui.image(texture_id, 512, 64, border_color=(1, 0, 0, 1))\n            imgui.end_tooltip()\n        imgui.end()\n\n    .. wraps::\n        void BeginTooltip()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_129begin_tooltip = {"begin_tooltip", (PyCFunction)__pyx_pw_5imgui_4core_129begin_tooltip, METH_NOARGS, __pyx_doc_5imgui_4core_128begin_tooltip};
static PyObject *__pyx_pw_5imgui_4core_129begin_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_tooltip (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_128begin_tooltip(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_128begin_tooltip(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_tooltip", 0);

  /* "imgui/core.pyx":3189
 *         void BeginTooltip()
 *     """
 *     cimgui.BeginTooltip()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::BeginTooltip();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3189, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3166
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.begin_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3192
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_131end_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_130end_tooltip[] = "end_tooltip()\nEnd tooltip window.\n\n    See :func:`begin_tooltip()` for full usage example.\n\n    .. wraps::\n        void EndTooltip()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_131end_tooltip = {"end_tooltip", (PyCFunction)__pyx_pw_5imgui_4core_131end_tooltip, METH_NOARGS, __pyx_doc_5imgui_4core_130end_tooltip};
static PyObject *__pyx_pw_5imgui_4core_131end_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_tooltip (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_130end_tooltip(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_130end_tooltip(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_tooltip", 0);

  /* "imgui/core.pyx":3200
 *         void EndTooltip()
 *     """
 *     cimgui.EndTooltip()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndTooltip();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3200, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3192
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3203
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_133begin_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_132begin_main_menu_bar[] = "begin_main_menu_bar()\nCreate new full-screen menu bar.\n\n     Only call :func:`end_main_menu_bar` if this function returns ``True``!\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 10 10\n\n        if imgui.begin_main_menu_bar():\n            # first menu dropdown\n            if imgui.begin_menu('File', True):\n                imgui.menu_item('New', 'Ctrl+N', False, True)\n                imgui.menu_item('Open ...', 'Ctrl+O', False, True)\n\n                # submenu\n                if imgui.begin_menu('Open Recent', True):\n                    imgui.menu_item('doc.txt', None, False, True)\n                    imgui.end_menu()\n\n                imgui.end_menu()\n\n            imgui.end_main_menu_bar()\n\n    Returns:\n        bool: True if main menu bar is displayed (opened).\n\n    .. wraps::\n        bool BeginMainMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_133begin_main_menu_bar = {"begin_main_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_133begin_main_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_132begin_main_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_133begin_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_main_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_132begin_main_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_132begin_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_main_menu_bar", 0);

  /* "imgui/core.pyx":3235
 *         bool BeginMainMenuBar()
 *     """
 *     return cimgui.BeginMainMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginMainMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3235, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3203
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_main_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3238
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_135end_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_134end_main_menu_bar[] = "end_main_menu_bar()\nClose main menu bar context.\n\n    Only call this function if the :func:`end_main_menu_bar` returns ``True``.\n\n    For practical example how to use this function see documentation of\n    :func:`begin_main_menu_bar`.\n\n    .. wraps::\n        bool EndMainMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_135end_main_menu_bar = {"end_main_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_135end_main_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_134end_main_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_135end_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_main_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_134end_main_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_134end_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_main_menu_bar", 0);

  /* "imgui/core.pyx":3249
 *         bool EndMainMenuBar()
 *     """
 *     cimgui.EndMainMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMainMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3249, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3238
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_main_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3252
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_137begin_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_136begin_menu_bar[] = "begin_menu_bar()\nAppend new menu menu bar to current window.\n\n    This function is different from :func:`begin_main_menu_bar`, as this is\n    child-window specific. Only call :func:`end_menu_bar` if this returns\n    ``True``!\n\n    **Note:** this requires :ref:`WINDOW_MENU_BAR <window-flag-options>` flag\n    to be set for the current window. Without this flag set the\n    ``begin_menu_bar()`` function will always return ``False``.\n\n    .. visual-example::\n        :auto_layout:\n        :click: 25 30\n\n        flags = imgui.WINDOW_MENU_BAR\n\n        imgui.begin(\"Child Window - File Browser\", flags=flags)\n\n        if imgui.begin_menu_bar():\n            if imgui.begin_menu('File'):\n                imgui.menu_item('Close')\n                imgui.end_menu()\n\n            imgui.end_menu_bar()\n\n        imgui.end()\n\n    Returns:\n        bool: True if menu bar is displayed (opened).\n\n    .. wraps::\n        bool BeginMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_137begin_menu_bar = {"begin_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_137begin_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_136begin_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_137begin_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_136begin_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_136begin_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_menu_bar", 0);

  /* "imgui/core.pyx":3286
 *         bool BeginMenuBar()
 *     """
 *     return cimgui.BeginMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3286, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3252
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3289
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_139end_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_138end_menu_bar[] = "end_menu_bar()\nClose menu bar context.\n\n    Only call this function if the :func:`begin_menu_bar` returns true.\n\n    For practical example how to use this function see documentation of\n    :func:`begin_menu_bar`.\n\n    .. wraps::\n        void EndMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_139end_menu_bar = {"end_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_139end_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_138end_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_139end_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_138end_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_138end_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_menu_bar", 0);

  /* "imgui/core.pyx":3300
 *         void EndMenuBar()
 *     """
 *     cimgui.EndMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3300, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3289
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3303
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_141begin_menu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_140begin_menu[] = "begin_menu(str label, enabled=True)\nCreate new expandable menu in current menu bar.\n\n    Only call :func:`end_menu` if this returns ``True``!\n\n    For practical example how to use this function, please see documentation\n    of :func:`begin_main_menu_bar` or :func:`begin_menu_bar`.\n\n    Args:\n        label (str): label of the menu.\n        enabled (bool): define if menu is enabled or disabled.\n\n    Returns:\n        bool: True if the menu is displayed (opened).\n\n    .. wraps::\n        bool BeginMenu(\n            const char* label,\n            bool enabled\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_141begin_menu = {"begin_menu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_141begin_menu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_140begin_menu};
static PyObject *__pyx_pw_5imgui_4core_141begin_menu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_menu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_menu") < 0)) __PYX_ERR(0, 3303, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_menu", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3303, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3303, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_140begin_menu(__pyx_self, __pyx_v_label, __pyx_v_enabled);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_140begin_menu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_menu", 0);

  /* "imgui/core.pyx":3324
 *         )
 *     """
 *     return cimgui.BeginMenu(_bytes(label), enabled)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3324, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3324, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3324, __pyx_L1_error)
  try {
    __pyx_t_4 = ImGui::BeginMenu(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3324, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3303
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.begin_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3327
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_143end_menu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_142end_menu[] = "end_menu()\nClose menu context.\n\n    Only call this function if the :func:`begin_menu` returns ``True``.\n\n    For practical example how to use this function, please see documentation\n    of :func:`begin_main_menu_bar` or :func:`begin_menu_bar`.\n\n    .. wraps::\n        void EndMenu()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_143end_menu = {"end_menu", (PyCFunction)__pyx_pw_5imgui_4core_143end_menu, METH_NOARGS, __pyx_doc_5imgui_4core_142end_menu};
static PyObject *__pyx_pw_5imgui_4core_143end_menu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_142end_menu(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_142end_menu(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_menu", 0);

  /* "imgui/core.pyx":3338
 *         void EndMenu()
 *     """
 *     cimgui.EndMenu()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMenu();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3338, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3327
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3341
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_145menu_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_144menu_item[] = "menu_item(str label, str shortcut=None, bool selected=False, enabled=True)\nCreate a menu item.\n\n    Item shortcuts are displayed for convenience but not processed by ImGui at\n    the moment. Using ``selected`` arguement it is possible to show and trigger\n    a check mark next to the menu item label.\n\n    For practical example how to use this function, please see documentation\n    of :func:`begin_main_menu_bar` or :func:`begin_menu_bar`.\n\n    Args:\n        label (str): label of the menu item.\n        shortcut (str): shortcut text of the menu item.\n        selected (bool): define if menu item is selected.\n        enabled (bool): define if menu item is enabled or disabled.\n\n    Returns:\n        tuple: a ``(clicked, state)`` two-tuple indicating if item was\n        clicked by the user and the current state of item (visibility of\n        the check mark).\n\n    .. wraps::\n        MenuItem(\n            const char* label,\n            const char* shortcut,\n            bool* p_selected,\n            bool enabled = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_145menu_item = {"menu_item", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_145menu_item, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_144menu_item};
static PyObject *__pyx_pw_5imgui_4core_145menu_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_shortcut = 0;
  bool __pyx_v_selected;
  PyObject *__pyx_v_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("menu_item (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_shortcut,&__pyx_n_s_selected,&__pyx_n_s_enabled,0};
    PyObject* values[4] = {0,0,0,0};

    /* "imgui/core.pyx":3342
 * 
 * def menu_item(
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True             # <<<<<<<<<<<<<<
 * ):
 *     """Create a menu item.
 */
    values[1] = ((PyObject*)Py_None);
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shortcut);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_selected);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "menu_item") < 0)) __PYX_ERR(0, 3341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_shortcut = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_selected = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_selected == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3342, __pyx_L3_error)
    } else {
      __pyx_v_selected = ((bool)0);
    }
    __pyx_v_enabled = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("menu_item", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.menu_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3342, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shortcut), (&PyString_Type), 1, "shortcut", 1))) __PYX_ERR(0, 3342, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_144menu_item(__pyx_self, __pyx_v_label, __pyx_v_shortcut, __pyx_v_selected, __pyx_v_enabled);

  /* "imgui/core.pyx":3341
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_144menu_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_shortcut, bool __pyx_v_selected, PyObject *__pyx_v_enabled) {
  bool __pyx_v_inout_selected;
  bool __pyx_v_clicked;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("menu_item", 0);

  /* "imgui/core.pyx":3372
 *         )
 *     """
 *     cdef cimgui.bool inout_selected = selected             # <<<<<<<<<<<<<<
 * 
 *     # note: wee need to split this into two separate calls depending
 */
  __pyx_v_inout_selected = __pyx_v_selected;

  /* "imgui/core.pyx":3377
 *     #       on the value of shortcut in order to support None instead
 *     #       of empty strings.
 *     if shortcut is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),
 */
  __pyx_t_1 = (__pyx_v_shortcut == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":3379
 *     if shortcut is None:
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),             # <<<<<<<<<<<<<<
 *             NULL,
 *             &inout_selected,
 */
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3379, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3379, __pyx_L1_error)

    /* "imgui/core.pyx":3382
 *             NULL,
 *             &inout_selected,
 *             <bool>enabled             # <<<<<<<<<<<<<<
 *         )
 *     else:
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3382, __pyx_L1_error)

    /* "imgui/core.pyx":3378
 *     #       of empty strings.
 *     if shortcut is None:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             NULL,
 */
    try {
      __pyx_t_6 = ImGui::MenuItem(__pyx_t_4, NULL, (&__pyx_v_inout_selected), ((bool)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3378, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_clicked = __pyx_t_6;

    /* "imgui/core.pyx":3377
 *     #       on the value of shortcut in order to support None instead
 *     #       of empty strings.
 *     if shortcut is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":3385
 *         )
 *     else:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             _bytes(shortcut),
 */
  /*else*/ {

    /* "imgui/core.pyx":3386
 *     else:
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),             # <<<<<<<<<<<<<<
 *             _bytes(shortcut),
 *             &inout_selected,
 */
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3386, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3386, __pyx_L1_error)

    /* "imgui/core.pyx":3387
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),
 *             _bytes(shortcut),             # <<<<<<<<<<<<<<
 *             &inout_selected,
 *             <bool>enabled
 */
    __pyx_t_7 = __pyx_f_5imgui_4core__bytes(__pyx_v_shortcut); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3387, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyBytes_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 3387, __pyx_L1_error)

    /* "imgui/core.pyx":3389
 *             _bytes(shortcut),
 *             &inout_selected,
 *             <bool>enabled             # <<<<<<<<<<<<<<
 *         )
 *     return clicked, inout_selected
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3389, __pyx_L1_error)

    /* "imgui/core.pyx":3385
 *         )
 *     else:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             _bytes(shortcut),
 */
    try {
      __pyx_t_5 = ImGui::MenuItem(__pyx_t_4, __pyx_t_8, (&__pyx_v_inout_selected), ((bool)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3385, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_clicked = __pyx_t_5;
  }
  __pyx_L3:;

  /* "imgui/core.pyx":3391
 *             <bool>enabled
 *         )
 *     return clicked, inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_clicked); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_inout_selected); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3341
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.menu_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3394
 * 
 * 
 * def open_popup(str label):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_147open_popup(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static char __pyx_doc_5imgui_4core_146open_popup[] = "open_popup(str label)\nOpen a popup window.\n\n    Marks a popup window as open. Popups are closed when user click outside,\n    or activate a pressable item, or :func:`close_current_popup()` is\n    called within a :func:`begin_popup()`/:func:`end_popup()` block.\n    Popup identifiers are relative to the current ID-stack\n    (so :func:`open_popup` and :func:`begin_popup` needs to be at\n    the same level).\n\n    .. visual-example::\n        :title: Simple popup window\n        :height: 100\n        :width: 220\n        :auto_layout:\n\n        imgui.begin(\"Example: simple popup\")\n        if imgui.button('Toggle..'):\n            imgui.open_popup(\"toggle\")\n        if imgui.begin_popup(\"toggle\"):\n            if imgui.begin_menu('Sub-menu'):\n                _, _ = imgui.menu_item('Click me')\n                imgui.end_menu()\n            imgui.end_popup()\n        imgui.end()\n\n    Args:\n        label (str): label of the modal window.\n\n    .. wraps::\n        void OpenPopup(\n            const char* str_id\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_147open_popup = {"open_popup", (PyCFunction)__pyx_pw_5imgui_4core_147open_popup, METH_O, __pyx_doc_5imgui_4core_146open_popup};
static PyObject *__pyx_pw_5imgui_4core_147open_popup(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_popup (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3394, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_146open_popup(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_146open_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_popup", 0);

  /* "imgui/core.pyx":3428
 *         )
 *     """
 *     cimgui.OpenPopup(_bytes(label))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3428, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3428, __pyx_L1_error)
  try {
    ImGui::OpenPopup(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3428, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3394
 * 
 * 
 * def open_popup(str label):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.open_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3431
 * 
 * 
 * def begin_popup(str label, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_149begin_popup(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_148begin_popup[] = "begin_popup(str label, ImGuiWindowFlags flags=0)\nOpen a popup window.\n\n    Returns ``True`` if the popup is open and you can start outputting\n    content to it. Only call :func:`end_popup()` if :func:`begin_popup()`\n    returned true.\n\n    .. visual-example::\n        :title: Simple popup window\n        :height: 100\n        :width: 220\n        :auto_layout:\n\n        imgui.begin(\"Example: simple popup\")\n\n        if imgui.button(\"select\"):\n            imgui.open_popup(\"select-popup\")\n\n        imgui.same_line()\n\n        if imgui.begin_popup(\"select-popup\"):\n            imgui.text(\"Select one\")\n            imgui.separator()\n            imgui.selectable(\"One\")\n            imgui.selectable(\"Two\")\n            imgui.selectable(\"Three\")\n            imgui.end_popup()\n\n        imgui.end()\n\n    Args:\n        label (str): label of the modal window.\n\n    Returns:\n        opened (bool): True if popup is opened.\n\n    .. wraps::\n        bool BeginPopup(\n            const char* str_id,\n            ImGuiWindowFlags flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_149begin_popup = {"begin_popup", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_149begin_popup, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_148begin_popup};
static PyObject *__pyx_pw_5imgui_4core_149begin_popup(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup") < 0)) __PYX_ERR(0, 3431, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[1]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3431, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3431, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3431, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_148begin_popup(__pyx_self, __pyx_v_label, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_148begin_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup", 0);

  /* "imgui/core.pyx":3473
 *         )
 *     """
 *     return cimgui.BeginPopup(_bytes(label), flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3473, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3473, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::BeginPopup(__pyx_t_2, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3473, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3431
 * 
 * 
 * def begin_popup(str label, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.begin_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3476
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_151begin_popup_modal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_150begin_popup_modal[] = "begin_popup_modal(str title, visible=None, ImGuiWindowFlags flags=0)\nBegin pouring popup contents.\n\n    Differes from :func:`begin_popup()` with its modality - meaning it\n    opens up on top of every other window.\n\n    .. visual-example::\n        :title: Simple popup window\n        :height: 100\n        :width: 220\n        :auto_layout:\n\n        imgui.begin(\"Example: simple popup modal\")\n\n        if imgui.button(\"Open Modal popup\"):\n            imgui.open_popup(\"select-popup\")\n\n        imgui.same_line()\n\n        if imgui.begin_popup_modal(\"select-popup\")[0]:\n            imgui.text(\"Select an option:\")\n            imgui.separator()\n            imgui.selectable(\"One\")\n            imgui.selectable(\"Two\")\n            imgui.selectable(\"Three\")\n            imgui.end_popup()\n\n        imgui.end()\n\n    Args:\n        title (str): label of the modal window.\n        visible (bool): define if popup is visible or not.\n        flags: Window flags. See:\n            :ref:`list of available flags <window-flag-options>`.\n\n    Returns:\n        tuple: ``(opened, visible)`` tuple of bools.\n        opened can be ``False`` when the popup is completely clipped\n        (e.g. zero size display).\n\n    .. wraps::\n        bool BeginPopupModal(\n            const char* name,\n            bool* p_open = NULL,\n            ImGuiWindowFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_151begin_popup_modal = {"begin_popup_modal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_151begin_popup_modal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_150begin_popup_modal};
static PyObject *__pyx_pw_5imgui_4core_151begin_popup_modal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_visible = 0;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_modal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_title,&__pyx_n_s_visible,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_title)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_visible);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_modal") < 0)) __PYX_ERR(0, 3476, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_title = ((PyObject*)values[0]);
    __pyx_v_visible = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3476, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_modal", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3476, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_popup_modal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_title), (&PyString_Type), 1, "title", 1))) __PYX_ERR(0, 3476, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_150begin_popup_modal(__pyx_self, __pyx_v_title, __pyx_v_visible, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_150begin_popup_modal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_visible, ImGuiWindowFlags __pyx_v_flags) {
  bool __pyx_v_inout_visible;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool *__pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup_modal", 0);

  /* "imgui/core.pyx":3523
 *         )
 *     """
 *     cdef cimgui.bool inout_visible = visible             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.BeginPopupModal(
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3523, __pyx_L1_error)
  __pyx_v_inout_visible = __pyx_t_1;

  /* "imgui/core.pyx":3525
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3526
 * 
 *     return cimgui.BeginPopupModal(
 *         _bytes(title),             # <<<<<<<<<<<<<<
 *         &inout_visible if visible is not None else NULL,
 *         flags
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_title); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3526, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3526, __pyx_L1_error)

  /* "imgui/core.pyx":3527
 *     return cimgui.BeginPopupModal(
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,             # <<<<<<<<<<<<<<
 *         flags
 *     ), inout_visible
 */
  __pyx_t_5 = (__pyx_v_visible != Py_None);
  if ((__pyx_t_5 != 0)) {
    __pyx_t_4 = (&__pyx_v_inout_visible);
  } else {
    __pyx_t_4 = NULL;
  }

  /* "imgui/core.pyx":3525
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  try {
    __pyx_t_1 = ImGui::BeginPopupModal(__pyx_t_3, __pyx_t_4, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3525, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3529
 *         &inout_visible if visible is not None else NULL,
 *         flags
 *     ), inout_visible             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_inout_visible); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "imgui/core.pyx":3525
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3476
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.begin_popup_modal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3532
 * 
 * 
 * def begin_popup_context_item(str label = None, int mouse_button = 1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_153begin_popup_context_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_152begin_popup_context_item[] = "begin_popup_context_item(str label=None, int mouse_button=1)\nThis is a helper function to handle the most simple case of associating\n    one named popup to one given widget.\n\n    .. visual-example::\n        :title: Popup context view\n        :height: 100\n        :width: 200\n        :auto_layout:\n        :click: 40 40\n\n        imgui.begin(\"Example: popup context view\")\n        imgui.text(\"Right-click to set value.\")\n        if imgui.begin_popup_context_item(\"Item Context Menu\", mouse_button=0):\n            imgui.selectable(\"Set to Zero\")\n            imgui.end_popup()\n        imgui.end()\n\n    Args:\n        label (str): label of item.\n        mouse_button (int): mouse button identifier: 0 - left button,\n            1 - right button, 2 - middle button\n\n    Returns:\n        opened (bool): opened can be False when the popup is completely\n        clipped (e.g. zero size display).\n\n    .. wraps::\n        bool BeginPopupContextItem(\n            const char* str_id = NULL,\n            int mouse_button = 1\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_153begin_popup_context_item = {"begin_popup_context_item", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_153begin_popup_context_item, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_152begin_popup_context_item};
static PyObject *__pyx_pw_5imgui_4core_153begin_popup_context_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_mouse_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_context_item (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_mouse_button,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_context_item") < 0)) __PYX_ERR(0, 3532, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3532, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_context_item", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_popup_context_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3532, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_152begin_popup_context_item(__pyx_self, __pyx_v_label, __pyx_v_mouse_button);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_152begin_popup_context_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup_context_item", 0);

  /* "imgui/core.pyx":3565
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_label == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":3566
 *     """
 *     if label is None:
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)             # <<<<<<<<<<<<<<
 *     else:
 *         return cimgui.BeginPopupContextItem(_bytes(label), mouse_button)
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = ImGui::BeginPopupContextItem(NULL, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3566, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "imgui/core.pyx":3565
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)
 *     else:
 */
  }

  /* "imgui/core.pyx":3568
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)
 *     else:
 *         return cimgui.BeginPopupContextItem(_bytes(label), mouse_button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3568, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3568, __pyx_L1_error)
    try {
      __pyx_t_3 = ImGui::BeginPopupContextItem(__pyx_t_5, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3568, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "imgui/core.pyx":3532
 * 
 * 
 * def begin_popup_context_item(str label = None, int mouse_button = 1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core.begin_popup_context_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3571
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_155begin_popup_context_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_154begin_popup_context_window[] = "begin_popup_context_window(str label=None, bool also_over_items=True, int mouse_button=1)\nHelper function to open and begin popup when clicked on current window.\n\n    As all popup functions it should end with :func:`end_popup()`.\n\n    .. visual-example::\n        :title: Popup context view\n        :height: 100\n        :width: 200\n        :auto_layout:\n        :click: 40 40\n\n        imgui.begin(\"Example: popup context window\")\n        if imgui.begin_popup_context_window(mouse_button=0):\n            imgui.selectable(\"Clear\")\n            imgui.end_popup()\n        imgui.end()\n\n    Args:\n        label (str): label of the window\n        also_over_items (bool): display on top of widget.\n        mouse_button (int): mouse button identifier:\n            0 - left button\n            1 - right button\n            2 - middle button\n\n    Returns:\n        opened (bool): if the context window is opened.\n\n    .. wraps::\n        bool BeginPopupContextWindow(\n            const char* str_id = NULL,\n            bool also_over_items = true,\n            int mouse_button = 1\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_155begin_popup_context_window = {"begin_popup_context_window", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_155begin_popup_context_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_154begin_popup_context_window};
static PyObject *__pyx_pw_5imgui_4core_155begin_popup_context_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_also_over_items;
  int __pyx_v_mouse_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_context_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_also_over_items,&__pyx_n_s_mouse_button,0};
    PyObject* values[3] = {0,0,0};

    /* "imgui/core.pyx":3572
 * 
 * def begin_popup_context_window(
 *     str label = None,             # <<<<<<<<<<<<<<
 *     bool also_over_items = True,
 *     int mouse_button = 1
 */
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_also_over_items);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_context_window") < 0)) __PYX_ERR(0, 3571, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_also_over_items = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_also_over_items == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3573, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":3573
 * def begin_popup_context_window(
 *     str label = None,
 *     bool also_over_items = True,             # <<<<<<<<<<<<<<
 *     int mouse_button = 1
 * ):
 */
      __pyx_v_also_over_items = ((bool)1);
    }
    if (values[2]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3574, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_context_window", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3571, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_popup_context_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3572, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_154begin_popup_context_window(__pyx_self, __pyx_v_label, __pyx_v_also_over_items, __pyx_v_mouse_button);

  /* "imgui/core.pyx":3571
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_154begin_popup_context_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_also_over_items, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup_context_window", 0);

  /* "imgui/core.pyx":3611
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextWindow(
 *             NULL,
 */
  __pyx_t_1 = (__pyx_v_label == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":3612
 *     """
 *     if label is None:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             NULL,
 *             also_over_items,
 */
    __Pyx_XDECREF(__pyx_r);

    /* "imgui/core.pyx":3615
 *             NULL,
 *             also_over_items,
 *             mouse_button             # <<<<<<<<<<<<<<
 *         )
 *     else:
 */
    try {
      __pyx_t_3 = ImGui::BeginPopupContextWindow(NULL, __pyx_v_also_over_items, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3612, __pyx_L1_error)
    }

    /* "imgui/core.pyx":3612
 *     """
 *     if label is None:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             NULL,
 *             also_over_items,
 */
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "imgui/core.pyx":3611
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextWindow(
 *             NULL,
 */
  }

  /* "imgui/core.pyx":3618
 *         )
 *     else:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             also_over_items,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "imgui/core.pyx":3619
 *     else:
 *         return cimgui.BeginPopupContextWindow(
 *             _bytes(label),             # <<<<<<<<<<<<<<
 *             also_over_items,
 *             mouse_button
 */
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3619, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3619, __pyx_L1_error)

    /* "imgui/core.pyx":3618
 *         )
 *     else:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             also_over_items,
 */
    try {
      __pyx_t_3 = ImGui::BeginPopupContextWindow(__pyx_t_5, __pyx_v_also_over_items, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3618, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "imgui/core.pyx":3571
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core.begin_popup_context_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3625
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_157end_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_156end_popup[] = "end_popup()\nEnd a popup window.\n\n    Should be called after each XYZPopupXYZ function.\n\n    For practical example how to use this function, please see documentation\n    of :func:`open_popup`.\n\n    .. wraps::\n        void EndPopup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_157end_popup = {"end_popup", (PyCFunction)__pyx_pw_5imgui_4core_157end_popup, METH_NOARGS, __pyx_doc_5imgui_4core_156end_popup};
static PyObject *__pyx_pw_5imgui_4core_157end_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_popup (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_156end_popup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_156end_popup(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_popup", 0);

  /* "imgui/core.pyx":3636
 *         void EndPopup()
 *     """
 *     cimgui.EndPopup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndPopup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3636, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3625
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3639
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_159close_current_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_158close_current_popup[] = "close_current_popup()\nClose the current popup window begin-ed directly above this call.\n    Clicking on a :func:`menu_item()` or :func:`selectable()` automatically\n    close the current popup.\n\n    For practical example how to use this function, please see documentation\n    of :func:`open_popup`.\n\n    .. wraps::\n        void CloseCurrentPopup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_159close_current_popup = {"close_current_popup", (PyCFunction)__pyx_pw_5imgui_4core_159close_current_popup, METH_NOARGS, __pyx_doc_5imgui_4core_158close_current_popup};
static PyObject *__pyx_pw_5imgui_4core_159close_current_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_current_popup (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_158close_current_popup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_158close_current_popup(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close_current_popup", 0);

  /* "imgui/core.pyx":3650
 *         void CloseCurrentPopup()
 *     """
 *     cimgui.CloseCurrentPopup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::CloseCurrentPopup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3650, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3639
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.close_current_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3653
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_161text(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_160text[] = "text(str text)\nAdd text to current widget stack.\n\n    .. visual-example::\n        :title: simple text widget\n        :height: 80\n        :auto_layout:\n\n        imgui.begin(\"Example: simple text\")\n        imgui.text(\"Simple text\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        Text(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_161text = {"text", (PyCFunction)__pyx_pw_5imgui_4core_161text, METH_O, __pyx_doc_5imgui_4core_160text};
static PyObject *__pyx_pw_5imgui_4core_161text(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3653, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_160text(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_160text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text", 0);

  /* "imgui/core.pyx":3672
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.Text("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3672, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3672, __pyx_L1_error)
  try {
    ImGui::Text(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3672, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3653
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3675
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_163text_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_162text_colored[] = "text_colored(str text, float r, float g, float b, float a=1.)\nAdd colored text to current widget stack.\n\n    It is a shortcut for:\n\n    .. code-block:: python\n\n        imgui.push_style_color(imgui.COLOR_TEXT, r, g, b, a)\n        imgui.text(text)\n        imgui.pop_style_color()\n\n\n    .. visual-example::\n        :title: colored text widget\n        :height: 100\n        :auto_layout:\n\n        imgui.begin(\"Example: colored text\")\n        imgui.text_colored(\"Colored text\", 1, 0, 0)\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n\n    .. wraps::\n        TextColored(const ImVec4& col, const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_163text_colored = {"text_colored", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_163text_colored, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_162text_colored};
static PyObject *__pyx_pw_5imgui_4core_163text_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_colored (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 1); __PYX_ERR(0, 3675, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 2); __PYX_ERR(0, 3675, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 3); __PYX_ERR(0, 3675, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text_colored") < 0)) __PYX_ERR(0, 3675, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3675, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3675, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3675, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3675, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3675, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.text_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3675, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_162text_colored(__pyx_self, __pyx_v_text, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_162text_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_colored", 0);

  /* "imgui/core.pyx":3707
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.TextColored(_cast_args_ImVec4(r, g, b, a), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3707, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3707, __pyx_L1_error)
  try {
    ImGui::TextColored(__pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a), ((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3707, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3675
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3710
 * 
 * 
 * def text_disabled(str text):             # <<<<<<<<<<<<<<
 *     """Add disabled(grayed out) text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_165text_disabled(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_164text_disabled[] = "text_disabled(str text)\nAdd disabled(grayed out) text to current widget stack.\n\n    .. visual-example::\n        :title: disabled text widget\n        :height: 80\n        :auto_layout:\n\n        imgui.begin(\"Example: disabled text\")\n        imgui.text_disabled(\"Disabled text\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        TextDisabled(const char*, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_165text_disabled = {"text_disabled", (PyCFunction)__pyx_pw_5imgui_4core_165text_disabled, METH_O, __pyx_doc_5imgui_4core_164text_disabled};
static PyObject *__pyx_pw_5imgui_4core_165text_disabled(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_disabled (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3710, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_164text_disabled(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_164text_disabled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_disabled", 0);

  /* "imgui/core.pyx":3729
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.TextDisabled("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * def text_wrapped(str text):
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3729, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3729, __pyx_L1_error)
  try {
    ImGui::TextDisabled(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3729, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3710
 * 
 * 
 * def text_disabled(str text):             # <<<<<<<<<<<<<<
 *     """Add disabled(grayed out) text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text_disabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3731
 *     cimgui.TextDisabled("%s", _bytes(text))
 * 
 * def text_wrapped(str text):             # <<<<<<<<<<<<<<
 *     """Add wrappable text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_167text_wrapped(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_166text_wrapped[] = "text_wrapped(str text)\nAdd wrappable text to current widget stack.\n\n    .. visual-example::\n        :title: Wrappable Text\n        :height: 80\n        :width: 40\n        :auto_layout:\n\n        imgui.begin(\"Text wrap\")\n        # Resize the window to see text wrapping\n        imgui.text_wrapped(\"This text will wrap around.\")\n        imgui.end()\n\n    Args:\n        text (str): text to display\n\n    .. wraps::\n        TextWrapped(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_167text_wrapped = {"text_wrapped", (PyCFunction)__pyx_pw_5imgui_4core_167text_wrapped, METH_O, __pyx_doc_5imgui_4core_166text_wrapped};
static PyObject *__pyx_pw_5imgui_4core_167text_wrapped(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_wrapped (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3731, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_166text_wrapped(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_166text_wrapped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_wrapped", 0);

  /* "imgui/core.pyx":3752
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.TextWrapped("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3752, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3752, __pyx_L1_error)
  try {
    ImGui::TextWrapped(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3752, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3731
 *     cimgui.TextDisabled("%s", _bytes(text))
 * 
 * def text_wrapped(str text):             # <<<<<<<<<<<<<<
 *     """Add wrappable text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text_wrapped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3755
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_169label_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_168label_text[] = "label_text(str label, str text)\nDisplay text+label aligned the same way as value+label widgets.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 80\n        :width: 300\n\n        imgui.begin(\"Example: text with label\")\n        imgui.label_text(\"my label\", \"my text\")\n        imgui.end()\n\n    Args:\n        label (str): label to display.\n        text (str): text to display.\n\n    .. wraps::\n        void LabelText(const char* label, const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_169label_text = {"label_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_169label_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_168label_text};
static PyObject *__pyx_pw_5imgui_4core_169label_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_text = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("label_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_text,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("label_text", 1, 2, 2, 1); __PYX_ERR(0, 3755, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "label_text") < 0)) __PYX_ERR(0, 3755, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_text = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("label_text", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3755, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.label_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3755, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3755, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_168label_text(__pyx_self, __pyx_v_label, __pyx_v_text);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_168label_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("label_text", 0);

  /* "imgui/core.pyx":3775
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.LabelText(_bytes(label), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3775, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3775, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3775, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3775, __pyx_L1_error)
  try {
    ImGui::LabelText(__pyx_t_2, ((char const *)"%s"), __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3775, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imgui/core.pyx":3755
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.label_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3778
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_171text_unformatted(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_170text_unformatted[] = "text_unformatted(str text)\nBig area text display - the size is defined by it's container.\n    Recommended for long chunks of text.\n\n    .. visual-example::\n        :title: simple text widget\n        :height: 100\n        :width: 200\n        :auto_layout:\n\n        imgui.begin(\"Example: unformatted text\")\n        imgui.text_unformatted(\"Really ... long ... text\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        TextUnformatted(const char* text, const char* text_end = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_171text_unformatted = {"text_unformatted", (PyCFunction)__pyx_pw_5imgui_4core_171text_unformatted, METH_O, __pyx_doc_5imgui_4core_170text_unformatted};
static PyObject *__pyx_pw_5imgui_4core_171text_unformatted(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_unformatted (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3778, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_170text_unformatted(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_170text_unformatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_unformatted", 0);

  /* "imgui/core.pyx":3798
 *         TextUnformatted(const char* text, const char* text_end = NULL)
 *     """
 *     cimgui.TextUnformatted(_bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3798, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3798, __pyx_L1_error)
  try {
    ImGui::TextUnformatted(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3798, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3778
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text_unformatted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3801
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_173bullet(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_172bullet[] = "bullet()\nDisplay a small circle and keep the cursor on the same line.\n\n    .. advance cursor x position by GetTreeNodeToLabelSpacing(),\n       same distance that TreeNode() uses\n\n    .. visual-example::\n        :auto_layout:\n        :height: 80\n\n        imgui.begin(\"Example: bullets\")\n\n        for i in range(10):\n            imgui.bullet()\n\n        imgui.end()\n\n    .. wraps::\n        void Bullet()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_173bullet = {"bullet", (PyCFunction)__pyx_pw_5imgui_4core_173bullet, METH_NOARGS, __pyx_doc_5imgui_4core_172bullet};
static PyObject *__pyx_pw_5imgui_4core_173bullet(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bullet (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_172bullet(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_172bullet(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bullet", 0);

  /* "imgui/core.pyx":3821
 *         void Bullet()
 *     """
 *     cimgui.Bullet()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Bullet();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3821, __pyx_L1_error)
  }

  /* "imgui/core.pyx":3801
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.bullet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3824
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_175bullet_text(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_174bullet_text[] = "bullet_text(str text)\nDisplay bullet and text.\n\n    This is shortcut for:\n\n    .. code-block:: python\n\n        imgui.bullet()\n        imgui.text(text)\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: bullet text\")\n        imgui.bullet_text(\"Bullet 1\")\n        imgui.bullet_text(\"Bullet 2\")\n        imgui.bullet_text(\"Bullet 3\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        void BulletText(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_175bullet_text = {"bullet_text", (PyCFunction)__pyx_pw_5imgui_4core_175bullet_text, METH_O, __pyx_doc_5imgui_4core_174bullet_text};
static PyObject *__pyx_pw_5imgui_4core_175bullet_text(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bullet_text (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3824, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_174bullet_text(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_174bullet_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bullet_text", 0);

  /* "imgui/core.pyx":3851
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.BulletText("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3851, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3851, __pyx_L1_error)
  try {
    ImGui::BulletText(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3851, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3824
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.bullet_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3854
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_177button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_176button[] = "button(str label, width=0, height=0)\nDisplay button.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: button\")\n        imgui.button(\"Button 1\")\n        imgui.button(\"Button 2\")\n        imgui.end()\n\n    Args:\n        label (str): button label.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool Button(const char* label, const ImVec2& size = ImVec2(0,0))\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_177button = {"button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_177button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_176button};
static PyObject *__pyx_pw_5imgui_4core_177button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "button") < 0)) __PYX_ERR(0, 3854, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("button", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3854, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3854, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_176button(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_176button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("button", 0);

  /* "imgui/core.pyx":3877
 *         bool Button(const char* label, const ImVec2& size = ImVec2(0,0))
 *     """
 *     return cimgui.Button(_bytes(label), _cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3877, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L1_error)
  try {
    __pyx_t_6 = ImGui::Button(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3877, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3854
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3880
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_179small_button(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static char __pyx_doc_5imgui_4core_178small_button[] = "small_button(str label)\nDisplay small button (with 0 frame padding).\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: button\")\n        imgui.small_button(\"Button 1\")\n        imgui.small_button(\"Button 2\")\n        imgui.end()\n\n    Args:\n        label (str): button label.\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool SmallButton(const char* label)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_179small_button = {"small_button", (PyCFunction)__pyx_pw_5imgui_4core_179small_button, METH_O, __pyx_doc_5imgui_4core_178small_button};
static PyObject *__pyx_pw_5imgui_4core_179small_button(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("small_button (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3880, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_178small_button(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_178small_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("small_button", 0);

  /* "imgui/core.pyx":3901
 *         bool SmallButton(const char* label)
 *     """
 *     return cimgui.SmallButton(_bytes(label))             # <<<<<<<<<<<<<<
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3901, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3901, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::SmallButton(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3901, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3880
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.small_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3903
 *     return cimgui.SmallButton(_bytes(label))
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):             # <<<<<<<<<<<<<<
 *     """Display an arrow button
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_181arrow_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_180arrow_button[] = "arrow_button(str label, ImGuiDir direction=DIRECTION_NONE)\nDisplay an arrow button\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Arrow button\")\n        imgui.arrow_button(\"Button\", imgui.DIRECTION_LEFT)\n        imgui.end()\n\n    Args:\n        label (str): button label.\n        direction = imgui direction constant\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool ArrowButton(const char*, ImGuiDir)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_181arrow_button = {"arrow_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_181arrow_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_180arrow_button};
static PyObject *__pyx_pw_5imgui_4core_181arrow_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  ImGuiDir __pyx_v_direction;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arrow_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_direction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "arrow_button") < 0)) __PYX_ERR(0, 3903, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_direction = __Pyx_PyInt_As_ImGuiDir(values[1]); if (unlikely((__pyx_v_direction == ((ImGuiDir)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3903, __pyx_L3_error)
    } else {
      __pyx_v_direction = __pyx_k__46;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("arrow_button", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3903, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.arrow_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3903, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_180arrow_button(__pyx_self, __pyx_v_label, __pyx_v_direction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_180arrow_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiDir __pyx_v_direction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("arrow_button", 0);

  /* "imgui/core.pyx":3924
 *         bool ArrowButton(const char*, ImGuiDir)
 *     """
 *     if direction == DIRECTION_NONE:             # <<<<<<<<<<<<<<
 *         raise ValueError("Direction wasn't specified.")
 *     return cimgui.ArrowButton(_bytes(label), direction)
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir(__pyx_v_direction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DIRECTION_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 3924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "imgui/core.pyx":3925
 *     """
 *     if direction == DIRECTION_NONE:
 *         raise ValueError("Direction wasn't specified.")             # <<<<<<<<<<<<<<
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3925, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 3925, __pyx_L1_error)

    /* "imgui/core.pyx":3924
 *         bool ArrowButton(const char*, ImGuiDir)
 *     """
 *     if direction == DIRECTION_NONE:             # <<<<<<<<<<<<<<
 *         raise ValueError("Direction wasn't specified.")
 *     return cimgui.ArrowButton(_bytes(label), direction)
 */
  }

  /* "imgui/core.pyx":3926
 *     if direction == DIRECTION_NONE:
 *         raise ValueError("Direction wasn't specified.")
 *     return cimgui.ArrowButton(_bytes(label), direction)             # <<<<<<<<<<<<<<
 * 
 * def invisible_button(str identifier, width, height):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3926, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3926, __pyx_L1_error)
  try {
    __pyx_t_6 = ImGui::ArrowButton(__pyx_t_5, __pyx_v_direction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3926, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3903
 *     return cimgui.SmallButton(_bytes(label))
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):             # <<<<<<<<<<<<<<
 *     """Display an arrow button
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.arrow_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3928
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_183invisible_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_182invisible_button[] = "invisible_button(str identifier, width, height)\nCreate invisible button.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 300\n        :width: 300\n\n        imgui.begin(\"Example: invisible button :)\")\n        imgui.invisible_button(\"Button 1\", 200, 200)\n        imgui.small_button(\"Button 2\")\n        imgui.end()\n\n    Args:\n        identifier (str): Button identifier. Like label on :any:`button()`\n            but it is not displayed.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        bool: True if button is clicked.\n\n    .. wraps::\n        bool InvisibleButton(const char* str_id, const ImVec2& size)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_183invisible_button = {"invisible_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_183invisible_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_182invisible_button};
static PyObject *__pyx_pw_5imgui_4core_183invisible_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_identifier = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invisible_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_identifier,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_identifier)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, 1); __PYX_ERR(0, 3928, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, 2); __PYX_ERR(0, 3928, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "invisible_button") < 0)) __PYX_ERR(0, 3928, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_identifier = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3928, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.invisible_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_identifier), (&PyString_Type), 1, "identifier", 1))) __PYX_ERR(0, 3928, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_182invisible_button(__pyx_self, __pyx_v_identifier, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_182invisible_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_identifier, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("invisible_button", 0);

  /* "imgui/core.pyx":3953
 *         bool InvisibleButton(const char* str_id, const ImVec2& size)
 *     """
 *     return cimgui.InvisibleButton(             # <<<<<<<<<<<<<<
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3954
 *     """
 *     return cimgui.InvisibleButton(
 *         _bytes(identifier),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height)
 *     )
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_identifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3954, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3954, __pyx_L1_error)

  /* "imgui/core.pyx":3955
 *     return cimgui.InvisibleButton(
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3955, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3955, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3955, __pyx_L1_error)

  /* "imgui/core.pyx":3953
 *         bool InvisibleButton(const char* str_id, const ImVec2& size)
 *     """
 *     return cimgui.InvisibleButton(             # <<<<<<<<<<<<<<
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)
 */
  try {
    __pyx_t_6 = ImGui::InvisibleButton(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3953, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3928
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.invisible_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3959
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         str desc_id,
 *         float r, float g, float b, a=1.,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_185color_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_184color_button[] = "color_button(str desc_id, float r, float g, float b, a=1., flags=0, float width=0, float height=0)\nDisplay colored button.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 150\n\n        imgui.begin(\"Example: color button\")\n        imgui.color_button(\"Button 1\", 1, 0, 0, 1, 0, 10, 10)\n        imgui.color_button(\"Button 2\", 0, 1, 0, 1, 0, 10, 10)\n        imgui.color_button(\"Wide Button\", 0, 0, 1, 1, 0, 20, 10)\n        imgui.color_button(\"Tall Button\", 1, 0, 1, 1, 0, 10, 20)\n        imgui.end()\n\n    Args:\n        #r (float): red color intensity.\n        #g (float): green color intensity.\n        #b (float): blue color instensity.\n        #a (float): alpha intensity.\n        #ImGuiColorEditFlags: Color edit flags.  Zero for none.\n        #width (float): Width of the color button\n        #height (float): Height of the color button\n\n    Returns:\n        bool: True if button is clicked.\n\n    .. wraps::\n        bool ColorButton(\n            const char* desc_id,\n            const ImVec4& col,\n            ImGuiColorEditFlags flags,\n            ImVec2 size\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_185color_button = {"color_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_185color_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_184color_button};
static PyObject *__pyx_pw_5imgui_4core_185color_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_desc_id = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_flags = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_desc_id,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,&__pyx_n_s_flags,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_float_1_);
    values[5] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_desc_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, 1); __PYX_ERR(0, 3959, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, 2); __PYX_ERR(0, 3959, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, 3); __PYX_ERR(0, 3959, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_button") < 0)) __PYX_ERR(0, 3959, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_desc_id = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3961, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3961, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3961, __pyx_L3_error)
    __pyx_v_a = values[4];
    __pyx_v_flags = values[5];
    if (values[6]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3963, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
    if (values[7]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3963, __pyx_L3_error)
    } else {
      __pyx_v_height = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3959, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.color_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_desc_id), (&PyString_Type), 1, "desc_id", 1))) __PYX_ERR(0, 3960, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_184color_button(__pyx_self, __pyx_v_desc_id, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, __pyx_v_flags, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_184color_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_desc_id, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_a, PyObject *__pyx_v_flags, float __pyx_v_width, float __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  ImGuiColorEditFlags __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color_button", 0);

  /* "imgui/core.pyx":3998
 *         )
 *     """
 *     return cimgui.ColorButton(             # <<<<<<<<<<<<<<
 *         _bytes(desc_id), _cast_args_ImVec4(r, g, b, a), flags, _cast_args_ImVec2(width, height)
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3999
 *     """
 *     return cimgui.ColorButton(
 *         _bytes(desc_id), _cast_args_ImVec4(r, g, b, a), flags, _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_desc_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3999, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3999, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_a); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3999, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_ImGuiColorEditFlags(__pyx_v_flags); if (unlikely((__pyx_t_4 == ((ImGuiColorEditFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3999, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3999, __pyx_L1_error)

  /* "imgui/core.pyx":3998
 *         )
 *     """
 *     return cimgui.ColorButton(             # <<<<<<<<<<<<<<
 *         _bytes(desc_id), _cast_args_ImVec4(r, g, b, a), flags, _cast_args_ImVec2(width, height)
 *     )
 */
  try {
    __pyx_t_6 = ImGui::ColorButton(__pyx_t_2, __pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_t_3), __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3998, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3959
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         str desc_id,
 *         float r, float g, float b, a=1.,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.color_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4003
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_187image_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_186image_button[] = "image_button(texture_id, float width, float height, tuple uv0=(0, 0), tuple uv1=(1, 1), tuple tint_color=(1, 1, 1, 1), tuple border_color=(0, 0, 0, 0), int frame_padding=-1)\nDisplay image.\n\n    .. todo:: add example with some preconfigured image\n\n    Args:\n        texture_id (object): user data defining texture id. Argument type\n            is implementation dependent. For OpenGL it is usually an integer.\n        size (Vec2): image display size two-tuple.\n        uv0 (Vec2): UV coordinates for 1st corner (lower-left for OpenGL).\n            Defaults to ``(0, 0)``.\n        uv1 (Vec2): UV coordinates for 2nd corner (upper-right for OpenGL).\n            Defaults to ``(1, 1)``.\n        tint_color (Vec4): Image tint color. Defaults to white.\n        border_color (Vec4): Image border color. Defaults to transparent.\n        frame_padding (int): Frame padding (``0``: no padding, ``<0`` default\n            padding).\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool ImageButton(\n            ImTextureID user_texture_id,\n            const ImVec2& size,\n            const ImVec2& uv0 = ImVec2(0,0),\n            const ImVec2& uv1 = ImVec2(1,1),\n            int frame_padding = -1,\n            const ImVec4& bg_col = ImVec4(0,0,0,0),\n            const ImVec4& tint_col = ImVec4(1,1,1,1)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_187image_button = {"image_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_187image_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_186image_button};
static PyObject *__pyx_pw_5imgui_4core_187image_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  PyObject *__pyx_v_uv0 = 0;
  PyObject *__pyx_v_uv1 = 0;
  PyObject *__pyx_v_tint_color = 0;
  PyObject *__pyx_v_border_color = 0;
  int __pyx_v_frame_padding;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("image_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_uv0,&__pyx_n_s_uv1,&__pyx_n_s_tint_color,&__pyx_n_s_border_color,&__pyx_n_s_frame_padding,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "imgui/core.pyx":4007
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
    values[3] = ((PyObject*)__pyx_tuple__8);

    /* "imgui/core.pyx":4008
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
    values[4] = ((PyObject*)__pyx_tuple__9);

    /* "imgui/core.pyx":4009
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 *     int frame_padding=-1,
 */
    values[5] = ((PyObject*)__pyx_tuple__48);

    /* "imgui/core.pyx":4010
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 *     int frame_padding=-1,
 * ):
 */
    values[6] = ((PyObject*)__pyx_tuple__49);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, 1); __PYX_ERR(0, 4003, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, 2); __PYX_ERR(0, 4003, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv0);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tint_color);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border_color);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frame_padding);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "image_button") < 0)) __PYX_ERR(0, 4003, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4005, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4006, __pyx_L3_error)
    __pyx_v_uv0 = ((PyObject*)values[3]);
    __pyx_v_uv1 = ((PyObject*)values[4]);
    __pyx_v_tint_color = ((PyObject*)values[5]);
    __pyx_v_border_color = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_frame_padding = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_frame_padding == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4011, __pyx_L3_error)
    } else {
      __pyx_v_frame_padding = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4003, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.image_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv0), (&PyTuple_Type), 1, "uv0", 1))) __PYX_ERR(0, 4007, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv1), (&PyTuple_Type), 1, "uv1", 1))) __PYX_ERR(0, 4008, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tint_color), (&PyTuple_Type), 1, "tint_color", 1))) __PYX_ERR(0, 4009, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_border_color), (&PyTuple_Type), 1, "border_color", 1))) __PYX_ERR(0, 4010, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_186image_button(__pyx_self, __pyx_v_texture_id, __pyx_v_width, __pyx_v_height, __pyx_v_uv0, __pyx_v_uv1, __pyx_v_tint_color, __pyx_v_border_color, __pyx_v_frame_padding);

  /* "imgui/core.pyx":4003
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_186image_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color, int __pyx_v_frame_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("image_button", 0);

  /* "imgui/core.pyx":4044
 *         )
 *     """
 *     return cimgui.ImageButton(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4046
 *     return cimgui.ImageButton(
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4046, __pyx_L1_error)

  /* "imgui/core.pyx":4047
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv1),
 *         # note: slightly different order of params than in ImGui::Image()
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4047, __pyx_L1_error)

  /* "imgui/core.pyx":4048
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),             # <<<<<<<<<<<<<<
 *         # note: slightly different order of params than in ImGui::Image()
 *         frame_padding,
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4048, __pyx_L1_error)

  /* "imgui/core.pyx":4044
 *         )
 *     """
 *     return cimgui.ImageButton(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  try {
    __pyx_t_4 = ImGui::ImageButton(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_v_frame_padding, __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_border_color), __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_tint_color));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4044, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4003
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.image_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4056
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_189image(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_188image[] = "image(texture_id, float width, float height, tuple uv0=(0, 0), tuple uv1=(1, 1), tuple tint_color=(1, 1, 1, 1), tuple border_color=(0, 0, 0, 0))\nDisplay image.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 550\n        :height: 200\n\n        texture_id = imgui.get_io().fonts.texture_id\n\n        imgui.begin(\"Example: image display\")\n        imgui.image(texture_id, 512, 64, border_color=(1, 0, 0, 1))\n        imgui.end()\n\n    Args:\n        texture_id (object): user data defining texture id. Argument type\n            is implementation dependent. For OpenGL it is usually an integer.\n        size (Vec2): image display size two-tuple.\n        uv0 (Vec2): UV coordinates for 1st corner (lower-left for OpenGL).\n            Defaults to ``(0, 0)``.\n        uv1 (Vec2): UV coordinates for 2nd corner (upper-right for OpenGL).\n            Defaults to ``(1, 1)``.\n        tint_color(Vec4): Image tint color. Defaults to white.\n        border_color(Vec4): Image border color. Defaults to transparent.\n\n    .. wraps::\n        void Image(\n            ImTextureID user_texture_id,\n            const ImVec2& size,\n            const ImVec2& uv0 = ImVec2(0,0),\n            const ImVec2& uv1 = ImVec2(1,1),\n            const ImVec4& tint_col = ImVec4(1,1,1,1),\n            const ImVec4& border_col = ImVec4(0,0,0,0)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_189image = {"image", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_189image, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_188image};
static PyObject *__pyx_pw_5imgui_4core_189image(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  PyObject *__pyx_v_uv0 = 0;
  PyObject *__pyx_v_uv1 = 0;
  PyObject *__pyx_v_tint_color = 0;
  PyObject *__pyx_v_border_color = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("image (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_uv0,&__pyx_n_s_uv1,&__pyx_n_s_tint_color,&__pyx_n_s_border_color,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "imgui/core.pyx":4060
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
    values[3] = ((PyObject*)__pyx_tuple__8);

    /* "imgui/core.pyx":4061
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
    values[4] = ((PyObject*)__pyx_tuple__9);

    /* "imgui/core.pyx":4062
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 * ):
 */
    values[5] = ((PyObject*)__pyx_tuple__48);

    /* "imgui/core.pyx":4063
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 * ):
 *     """Display image.
 */
    values[6] = ((PyObject*)__pyx_tuple__49);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, 1); __PYX_ERR(0, 4056, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, 2); __PYX_ERR(0, 4056, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv0);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tint_color);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border_color);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "image") < 0)) __PYX_ERR(0, 4056, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4058, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4059, __pyx_L3_error)
    __pyx_v_uv0 = ((PyObject*)values[3]);
    __pyx_v_uv1 = ((PyObject*)values[4]);
    __pyx_v_tint_color = ((PyObject*)values[5]);
    __pyx_v_border_color = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4056, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv0), (&PyTuple_Type), 1, "uv0", 1))) __PYX_ERR(0, 4060, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv1), (&PyTuple_Type), 1, "uv1", 1))) __PYX_ERR(0, 4061, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tint_color), (&PyTuple_Type), 1, "tint_color", 1))) __PYX_ERR(0, 4062, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_border_color), (&PyTuple_Type), 1, "border_color", 1))) __PYX_ERR(0, 4063, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_188image(__pyx_self, __pyx_v_texture_id, __pyx_v_width, __pyx_v_height, __pyx_v_uv0, __pyx_v_uv1, __pyx_v_tint_color, __pyx_v_border_color);

  /* "imgui/core.pyx":4056
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_188image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("image", 0);

  /* "imgui/core.pyx":4101
 *     cimgui.Image(
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4101, __pyx_L1_error)

  /* "imgui/core.pyx":4102
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv1),
 *         _cast_tuple_ImVec4(tint_color),
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4102, __pyx_L1_error)

  /* "imgui/core.pyx":4103
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec4(tint_color),
 *         _cast_tuple_ImVec4(border_color),
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4103, __pyx_L1_error)

  /* "imgui/core.pyx":4099
 *         )
 *     """
 *     cimgui.Image(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  try {
    ImGui::Image(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_tint_color), __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_border_color));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4099, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4056
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4109
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_191checkbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_190checkbox[] = "checkbox(str label, bool state)\nDisplay checkbox widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n\n\n        # note: these should be initialized outside of the main interaction\n        #       loop\n        checkbox1_enabled = True\n        checkbox2_enabled = False\n\n        imgui.new_frame()\n        imgui.begin(\"Example: checkboxes\")\n\n        # note: first element of return two-tuple notifies if there was a click\n        #       event in currently processed frame and second element is actual\n        #       checkbox state.\n        _, checkbox1_enabled = imgui.checkbox(\"Checkbox 1\", checkbox1_enabled)\n        _, checkbox2_enabled = imgui.checkbox(\"Checkbox 2\", checkbox2_enabled)\n\n        imgui.text(\"Checkbox 1 state value: {}\".format(checkbox1_enabled))\n        imgui.text(\"Checkbox 2 state value: {}\".format(checkbox2_enabled))\n\n        imgui.end()\n\n\n    Args:\n        label (str): text label for checkbox widget.\n        state (bool): current (desired) state of the checkbox. If it has to\n            change, the new state will be returned as a second item of\n            the return value.\n\n    Returns:\n        tuple: a ``(clicked, state)`` two-tuple indicating click event and the\n        current state of the checkbox.\n\n    .. wraps::\n        bool Checkbox(const char* label, bool* v)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_191checkbox = {"checkbox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_191checkbox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_190checkbox};
static PyObject *__pyx_pw_5imgui_4core_191checkbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_state;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkbox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_state,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox", 1, 2, 2, 1); __PYX_ERR(0, 4109, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkbox") < 0)) __PYX_ERR(0, 4109, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_state = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_state == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4109, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkbox", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.checkbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4109, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_190checkbox(__pyx_self, __pyx_v_label, __pyx_v_state);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_190checkbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_state) {
  bool __pyx_v_inout_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkbox", 0);

  /* "imgui/core.pyx":4150
 *         bool Checkbox(const char* label, bool* v)
 *     """
 *     cdef cimgui.bool inout_state = state             # <<<<<<<<<<<<<<
 *     return cimgui.Checkbox(_bytes(label), &inout_state), inout_state
 * 
 */
  __pyx_v_inout_state = __pyx_v_state;

  /* "imgui/core.pyx":4151
 *     """
 *     cdef cimgui.bool inout_state = state
 *     return cimgui.Checkbox(_bytes(label), &inout_state), inout_state             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4151, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4151, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::Checkbox(__pyx_t_2, (&__pyx_v_inout_state));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4151, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_inout_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4109
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.checkbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4154
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_193checkbox_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_192checkbox_flags[] = "checkbox_flags(str label, unsigned int flags, unsigned int flags_value)\nDisplay checkbox widget that handle integer flags (bit fields).\n\n    It is useful for handling window/style flags or any kind of flags\n    implemented as integer bitfields.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 500\n\n        flags = imgui.WINDOW_NO_RESIZE | imgui.WINDOW_NO_MOVE\n\n        imgui.begin(\"Example: checkboxes for flags\", flags=flags)\n\n        clicked, flags = imgui.checkbox_flags(\n            \"No resize\", flags, imgui.WINDOW_NO_RESIZE\n        )\n        clicked, flags = imgui.checkbox_flags(\n            \"No move\", flags, imgui.WINDOW_NO_MOVE\n        )\n        clicked, flags = imgui.checkbox_flags(\n            \"No collapse\", flags, imgui.WINDOW_NO_COLLAPSE\n        )\n        # note: it also allows to use multiple flags at once\n        clicked, flags = imgui.checkbox_flags(\n            \"No resize & no move\", flags,\n            imgui.WINDOW_NO_RESIZE | imgui.WINDOW_NO_MOVE\n        )\n        imgui.text(\"Current flags value: {0:b}\".format(flags))\n        imgui.end()\n\n    Args:\n        label (str): text label for checkbox widget.\n        flags (int): current state of the flags associated with checkbox.\n            Actual state of checkbox (toggled/untoggled) is calculated from\n            this argument and ``flags_value`` argument. If it has to change,\n            the new state will be returned as a second item of the return\n            value.\n        flags_value (int): values of flags this widget can toggle. Represents\n            bitmask in flags bitfield. Allows multiple flags to be toggled\n            at once (specify using bit OR operator `|`, see example above).\n\n    Returns:\n        tuple: a ``(clicked, flags)`` two-tuple indicating click event and the\n        current state of the flags controlled with this checkbox.\n\n    .. wraps::\n        bool CheckboxFlags(\n            const char* label, unsigned int*"" flags,\n            unsigned int flags_value\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_193checkbox_flags = {"checkbox_flags", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_193checkbox_flags, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_192checkbox_flags};
static PyObject *__pyx_pw_5imgui_4core_193checkbox_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  unsigned int __pyx_v_flags;
  unsigned int __pyx_v_flags_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkbox_flags (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_flags,&__pyx_n_s_flags_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, 1); __PYX_ERR(0, 4154, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, 2); __PYX_ERR(0, 4154, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkbox_flags") < 0)) __PYX_ERR(0, 4154, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_flags = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_flags == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4154, __pyx_L3_error)
    __pyx_v_flags_value = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_flags_value == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4154, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.checkbox_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4154, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_192checkbox_flags(__pyx_self, __pyx_v_label, __pyx_v_flags, __pyx_v_flags_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_192checkbox_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, unsigned int __pyx_v_flags, unsigned int __pyx_v_flags_value) {
  unsigned int __pyx_v_inout_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkbox_flags", 0);

  /* "imgui/core.pyx":4206
 *         )
 *     """
 *     cdef unsigned int inout_flags = flags             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.CheckboxFlags(_bytes(label), &inout_flags, flags_value), inout_flags
 */
  __pyx_v_inout_flags = __pyx_v_flags;

  /* "imgui/core.pyx":4208
 *     cdef unsigned int inout_flags = flags
 * 
 *     return cimgui.CheckboxFlags(_bytes(label), &inout_flags, flags_value), inout_flags             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4208, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4208, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::CheckboxFlags(__pyx_t_2, (&__pyx_v_inout_flags), __pyx_v_flags_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4208, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_inout_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4154
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.checkbox_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4211
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_195radio_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_194radio_button[] = "radio_button(str label, bool active)\nDisplay radio button widget\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        # note: the variable that contains the state of the radio_button, should be initialized\n        #       outside of the main interaction loop\n        radio_active = True\n\n        imgui.begin(\"Example: radio buttons\")\n\n        if imgui.radio_button(\"Radio button\", radio_active):\n            radio_active = not radio_active\n\n        imgui.end()\n\n    Args:\n        label (str): button label.\n        active (bool): state of the radio button.\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool RadioButton(const char* label, bool active)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_195radio_button = {"radio_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_195radio_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_194radio_button};
static PyObject *__pyx_pw_5imgui_4core_195radio_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_active;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radio_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_active,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_active)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radio_button", 1, 2, 2, 1); __PYX_ERR(0, 4211, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radio_button") < 0)) __PYX_ERR(0, 4211, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_active = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_active == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4211, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radio_button", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4211, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.radio_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4211, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_194radio_button(__pyx_self, __pyx_v_label, __pyx_v_active);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_194radio_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_active) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radio_button", 0);

  /* "imgui/core.pyx":4239
 *         bool RadioButton(const char* label, bool active)
 *     """
 *     return cimgui.RadioButton(_bytes(label), active)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4239, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4239, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::RadioButton(__pyx_t_2, __pyx_v_active);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4239, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4211
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.radio_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4242
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_197combo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_196combo[] = "combo(str label, int current, list items, int height_in_items=-1)\nDisplay combo widget.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 200\n        :click: 80 40\n\n        current = 2\n        imgui.begin(\"Example: combo widget\")\n\n        clicked, current = imgui.combo(\n            \"combo\", current, [\"first\", \"second\", \"third\"]\n        )\n\n        imgui.end()\n\n    Args:\n        label (str): combo label.\n        current (int): index of selected item.\n        items (list): list of string labels for items.\n        height_in_items (int): height of dropdown in items. Defaults to -1\n            (autosized).\n\n    Returns:\n        tuple: a ``(changed, current)`` tuple indicating change of selection\n        and current index of selected item.\n\n    .. wraps::\n        bool Combo(\n            const char* label, int* current_item,\n            const char* items_separated_by_zeros,\n            int height_in_items = -1\n        )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_197combo = {"combo", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_197combo, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_196combo};
static PyObject *__pyx_pw_5imgui_4core_197combo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_current;
  PyObject *__pyx_v_items = 0;
  int __pyx_v_height_in_items;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("combo (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_current,&__pyx_n_s_items,&__pyx_n_s_height_in_items,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_current)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, 1); __PYX_ERR(0, 4242, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, 2); __PYX_ERR(0, 4242, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height_in_items);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "combo") < 0)) __PYX_ERR(0, 4242, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_current = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_current == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4242, __pyx_L3_error)
    __pyx_v_items = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_height_in_items = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_height_in_items == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4242, __pyx_L3_error)
    } else {
      __pyx_v_height_in_items = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4242, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.combo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4242, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_items), (&PyList_Type), 1, "items", 1))) __PYX_ERR(0, 4242, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_196combo(__pyx_self, __pyx_v_label, __pyx_v_current, __pyx_v_items, __pyx_v_height_in_items);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_196combo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items) {
  int __pyx_v_inout_current;
  PyObject *__pyx_v_in_items = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("combo", 0);

  /* "imgui/core.pyx":4278
 * 
 *     """
 *     cdef int inout_current = current             # <<<<<<<<<<<<<<
 * 
 *     in_items = "\0".join(items) + "\0"
 */
  __pyx_v_inout_current = __pyx_v_current;

  /* "imgui/core.pyx":4280
 *     cdef int inout_current = current
 * 
 *     in_items = "\0".join(items) + "\0"             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.Combo(
 */
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__50, __pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__50); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_in_items = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":4282
 *     in_items = "\0".join(items) + "\0"
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4283
 * 
 *     return cimgui.Combo(
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items             # <<<<<<<<<<<<<<
 *     ), inout_current
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4283, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4283, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_v_in_items))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_in_items)->tp_name), 0))) __PYX_ERR(0, 4283, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(((PyObject*)__pyx_v_in_items)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4283, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 4283, __pyx_L1_error)

  /* "imgui/core.pyx":4282
 *     in_items = "\0".join(items) + "\0"
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  try {
    __pyx_t_5 = ImGui::Combo(__pyx_t_3, (&__pyx_v_inout_current), __pyx_t_4, __pyx_v_height_in_items);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4282, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":4284
 *     return cimgui.Combo(
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_inout_current); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":4282
 *     in_items = "\0".join(items) + "\0"
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4242
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.combo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_in_items);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4287
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_199color_edit3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_198color_edit3[] = "color_edit3(str label, float r, float g, float b)\nDisplay color edit widget for color without alpha value.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        # note: the variable that contains the color data, should be initialized\n        #       outside of the main interaction loop\n        color_1 = 1., .0, .5\n        color_2 = 0., .8, .3\n\n        imgui.begin(\"Example: color edit without alpha\")\n\n        # note: first element of return two-tuple notifies if the color was changed\n        #       in currently processed frame and second element is current value\n        #       of color\n        changed, color_1 = imgui.color_edit3(\"Color 1\", *color_1)\n        changed, color_2 = imgui.color_edit3(\"Color 2\", *color_2)\n\n        imgui.end()\n\n    Args:\n        label (str): color edit label.\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n\n    Returns:\n        tuple: a ``(bool changed, float color[3])`` tuple that contains indicator of color\n        change and current value of color\n\n    .. wraps::\n        bool ColorEdit3(const char* label, float col[3])\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_199color_edit3 = {"color_edit3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_199color_edit3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_198color_edit3};
static PyObject *__pyx_pw_5imgui_4core_199color_edit3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_edit3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, 1); __PYX_ERR(0, 4287, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, 2); __PYX_ERR(0, 4287, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, 3); __PYX_ERR(0, 4287, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_edit3") < 0)) __PYX_ERR(0, 4287, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4287, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4287, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4287, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4287, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.color_edit3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4287, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_198color_edit3(__pyx_self, __pyx_v_label, __pyx_v_r, __pyx_v_g, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_198color_edit3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b) {
  float __pyx_v_inout_color[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color_edit3", 0);

  /* "imgui/core.pyx":4323
 *     """
 * 
 *     cdef float[3] inout_color = [r, g, b]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.ColorEdit3(
 */
  __pyx_t_1[0] = __pyx_v_r;
  __pyx_t_1[1] = __pyx_v_g;
  __pyx_t_1[2] = __pyx_v_b;
  memcpy(&(__pyx_v_inout_color[0]), __pyx_t_1, sizeof(__pyx_v_inout_color[0]) * (3));

  /* "imgui/core.pyx":4325
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4326
 * 
 *     return cimgui.ColorEdit3(
 *         _bytes(label), <float *>(&inout_color)             # <<<<<<<<<<<<<<
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4326, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4326, __pyx_L1_error)

  /* "imgui/core.pyx":4325
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  try {
    __pyx_t_4 = ImGui::ColorEdit3(__pyx_t_3, ((float *)(&__pyx_v_inout_color)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4325, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":4327
 *     return cimgui.ColorEdit3(
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_color[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_color[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_color[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":4325
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4287
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.color_edit3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4330
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_201color_edit4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_200color_edit4[] = "color_edit4(str label, float r, float g, float b, float a, bool show_alpha=True)\nDisplay color edit widget for color with alpha value.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n\n        # note: the variable that contains the color data, should be initialized\n        #       outside of the main interaction loop\n        color = 1., .0, .5, 1.\n\n        imgui.begin(\"Example: color edit with alpha\")\n\n        # note: first element of return two-tuple notifies if the color was changed\n        #       in currently processed frame and second element is current value\n        #       of color and alpha\n        _, color = imgui.color_edit4(\"Alpha\", *color, show_alpha=True)\n        _, color = imgui.color_edit4(\"No alpha\", *color, show_alpha=False)\n\n        imgui.end()\n\n    Args:\n        label (str): color edit label.\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n        show_alpha (bool): if set to True wiget allows to modify alpha\n\n    Returns:\n        tuple: a ``(bool changed, float color[4])`` tuple that contains indicator of color\n        change and current value of color and alpha\n\n    .. wraps::\n        ColorEdit4(\n            const char* label, float col[4], bool show_alpha = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_201color_edit4 = {"color_edit4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_201color_edit4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_200color_edit4};
static PyObject *__pyx_pw_5imgui_4core_201color_edit4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  bool __pyx_v_show_alpha;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_edit4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,&__pyx_n_s_show_alpha,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 1); __PYX_ERR(0, 4330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 2); __PYX_ERR(0, 4330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 3); __PYX_ERR(0, 4330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 4); __PYX_ERR(0, 4330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_show_alpha);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_edit4") < 0)) __PYX_ERR(0, 4330, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4331, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4331, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4331, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4331, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_show_alpha = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_show_alpha == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4331, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":4331
 * 
 * def color_edit4(
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True             # <<<<<<<<<<<<<<
 * ):
 *     """Display color edit widget for color with alpha value.
 */
      __pyx_v_show_alpha = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4330, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.color_edit4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4331, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_200color_edit4(__pyx_self, __pyx_v_label, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, __pyx_v_show_alpha);

  /* "imgui/core.pyx":4330
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_200color_edit4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, bool __pyx_v_show_alpha) {
  float __pyx_v_inout_color[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color_edit4", 0);

  /* "imgui/core.pyx":4370
 *         )
 *     """
 *     cdef float[4] inout_color = [r, g, b, a]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.ColorEdit4(
 */
  __pyx_t_1[0] = __pyx_v_r;
  __pyx_t_1[1] = __pyx_v_g;
  __pyx_t_1[2] = __pyx_v_b;
  __pyx_t_1[3] = __pyx_v_a;
  memcpy(&(__pyx_v_inout_color[0]), __pyx_t_1, sizeof(__pyx_v_inout_color[0]) * (4));

  /* "imgui/core.pyx":4372
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4373
 * 
 *     return cimgui.ColorEdit4(
 *         _bytes(label), <float *>(&inout_color), show_alpha             # <<<<<<<<<<<<<<
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4373, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4373, __pyx_L1_error)

  /* "imgui/core.pyx":4372
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  try {
    __pyx_t_4 = ImGui::ColorEdit4(__pyx_t_3, ((float *)(&__pyx_v_inout_color)), __pyx_v_show_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4372, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":4374
 *     return cimgui.ColorEdit4(
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_color[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_color[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_color[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_color[3])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":4372
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4330
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.color_edit4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4377
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_203drag_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_202drag_float[] = "drag_float(str label, float value, float change_speed=1.0, float min_value=0.0, float max_value=0.0, str format='%.3f', float power=1.)\nDisplay float drag widget.\n\n    .. todo::\n        Consider replacing ``format`` with something that allows\n        for safer way to specify display format without loosing the\n        functionality of wrapped function.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        value = 42.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, value = imgui.drag_float(\n            \"Default\", value,\n        )\n        changed, value = imgui.drag_float(\n            \"Less precise\", value, format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Value: %s\" % (changed, value))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (float): drag values,\n        change_speed (float): how fast values change on drag.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** Highly unsafe when used without care.\n            May lead to segmentation faults and other memory violation issues.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the current drag value.\n\n    .. wraps::\n        bool DragFloat(\n            const char* label,\n            float* v,\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_203drag_float = {"drag_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_203drag_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_202drag_float};
static PyObject *__pyx_pw_5imgui_4core_203drag_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float", 0, 2, 7, 1); __PYX_ERR(0, 4377, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float") < 0)) __PYX_ERR(0, 4377, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4378, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4379, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[3]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4380, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4381, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4383, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float", 0, 2, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4377, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4378, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4382, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_202drag_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_202drag_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float", 0);

  /* "imgui/core.pyx":4435
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.DragFloat(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":4437
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4438
 * 
 *     return cimgui.DragFloat(
 *         _bytes(label), &inout_value,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4438, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4438, __pyx_L1_error)

  /* "imgui/core.pyx":4439
 *     return cimgui.DragFloat(
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4439, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 4439, __pyx_L1_error)

  /* "imgui/core.pyx":4437
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_5 = ImGui::DragFloat(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4437, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":4440
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":4437
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4377
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.drag_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4443
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_205drag_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_204drag_float2[] = "drag_float2(str label, float value0, float value1, float change_speed=1.0, float min_value=0.0, float max_value=0.0, str format='%.3f', float power=1.)\nDisplay float drag widget with 2 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.0, 42.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, values = imgui.drag_float2(\n            \"Default\", *values\n        )\n        changed, values = imgui.drag_float2(\n            \"Less precise\", *values, format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (float): drag values.\n        change_speed (float): how fast values change on drag.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_float()`.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragFloat2(\n            const char* label,\n            float v[2],\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_205drag_float2 = {"drag_float2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_205drag_float2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_204drag_float2};
static PyObject *__pyx_pw_5imgui_4core_205drag_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, 1); __PYX_ERR(0, 4443, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, 2); __PYX_ERR(0, 4443, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float2") < 0)) __PYX_ERR(0, 4443, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4444, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4444, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4445, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[4]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4446, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4447, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4449, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4443, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4444, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4448, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_204drag_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_204drag_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float2", 0);

  /* "imgui/core.pyx":4495
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":4496
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4497
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4497, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4497, __pyx_L1_error)

  /* "imgui/core.pyx":4498
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4498, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4498, __pyx_L1_error)

  /* "imgui/core.pyx":4496
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4496, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4499
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":4496
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4443
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.drag_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4502
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_207drag_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_206drag_float3[] = "drag_float3(str label, float value0, float value1, float value2, float change_speed=1.0, float min_value=0.0, float max_value=0.0, str format='%.3f', float power=1.)\nDisplay float drag widget with 3 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.0, 42.0, 69.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, values = imgui.drag_float3(\n            \"Default\", *values\n        )\n        changed, values = imgui.drag_float3(\n            \"Less precise\", *values, format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (float): drag values.\n        change_speed (float): how fast values change on drag.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_float()`.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragFloat3(\n            const char* label,\n            float v[3],\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_207drag_float3 = {"drag_float3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_207drag_float3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_206drag_float3};
static PyObject *__pyx_pw_5imgui_4core_207drag_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 1); __PYX_ERR(0, 4502, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 2); __PYX_ERR(0, 4502, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 3); __PYX_ERR(0, 4502, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float3") < 0)) __PYX_ERR(0, 4502, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4503, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4503, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4503, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4504, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[5]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4505, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4506, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[7]);
    if (values[8]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4508, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4502, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4503, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4507, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_206drag_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_206drag_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float3", 0);

  /* "imgui/core.pyx":4554
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":4555
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4556
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4556, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4556, __pyx_L1_error)

  /* "imgui/core.pyx":4557
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4557, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4557, __pyx_L1_error)

  /* "imgui/core.pyx":4555
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4555, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4558
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":4555
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4502
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.drag_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4561
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_209drag_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_208drag_float4[] = "drag_float4(str label, float value0, float value1, float value2, float value3, float change_speed=1.0, float min_value=0.0, float max_value=0.0, str format='%.3f', float power=1.)\nDisplay float drag widget with 4 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.0, 42.0, 69.0, 0.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, values = imgui.drag_float4(\n            \"Default\", *values\n        )\n        changed, values = imgui.drag_float4(\n            \"Less precise\", *values, format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (float): drag values.\n        change_speed (float): how fast values change on drag.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_float()`.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragFloat4(\n            const char* label,\n            float v[4],\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_209drag_float4 = {"drag_float4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_209drag_float4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_208drag_float4};
static PyObject *__pyx_pw_5imgui_4core_209drag_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 1); __PYX_ERR(0, 4561, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 2); __PYX_ERR(0, 4561, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 3); __PYX_ERR(0, 4561, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 4); __PYX_ERR(0, 4561, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float4") < 0)) __PYX_ERR(0, 4561, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4562, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4562, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4562, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4562, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4563, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[6]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4564, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[7]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4565, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[8]);
    if (values[9]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4567, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4561, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4562, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4566, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_208drag_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_208drag_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float4", 0);

  /* "imgui/core.pyx":4613
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":4614
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4615
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4615, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4615, __pyx_L1_error)

  /* "imgui/core.pyx":4616
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4616, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4616, __pyx_L1_error)

  /* "imgui/core.pyx":4614
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4614, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4617
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":4614
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4561
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.drag_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4620
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_211drag_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_210drag_int[] = "drag_int(str label, int value, float change_speed=1.0, int min_value=0, int max_value=0, str format='%d')\nDisplay int drag widget.\n\n    .. todo::\n        Consider replacing ``format`` with something that allows\n        for safer way to specify display format without loosing the\n        functionality of wrapped function.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        value = 42\n\n        imgui.begin(\"Example: drag int\")\n        changed, value = imgui.drag_int(\"drag int\", value,)\n        imgui.text(\"Changed: %s, Value: %s\" % (changed, value))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (int): drag value,\n        change_speed (float): how fast values change on drag.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** Highly unsafe when used without care.\n            May lead to segmentation faults and other memory violation issues.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the current drag value.\n\n    .. wraps::\n        bool DragInt(\n            const char* label,\n            int* v,\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* format = \"%d\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_211drag_int = {"drag_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_211drag_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_210drag_int};
static PyObject *__pyx_pw_5imgui_4core_211drag_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int", 0, 2, 6, 1); __PYX_ERR(0, 4620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int") < 0)) __PYX_ERR(0, 4620, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4621, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4622, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[3]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4623, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[4]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4624, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4620, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4625, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_210drag_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_210drag_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int", 0);

  /* "imgui/core.pyx":4670
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.DragInt(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":4672
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4673
 * 
 *     return cimgui.DragInt(
 *         _bytes(label), &inout_value,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format)
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4673, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4673, __pyx_L1_error)

  /* "imgui/core.pyx":4674
 *     return cimgui.DragInt(
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4674, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 4674, __pyx_L1_error)

  /* "imgui/core.pyx":4672
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_5 = ImGui::DragInt(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4672, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":4675
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":4672
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4620
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.drag_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4678
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_213drag_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_212drag_int2[] = "drag_int2(str label, int value0, int value1, float change_speed=1.0, int min_value=0, int max_value=0, str format='%d')\nDisplay int drag widget with 2 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42\n\n        imgui.begin(\"Example: drag int\")\n        changed, values = imgui.drag_int2(\n            \"drag ints\", *values\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): drag values.\n        change_speed (float): how fast values change on drag.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragInt2(\n            const char* label,\n            int v[2],\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* format = \"%d\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_213drag_int2 = {"drag_int2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_213drag_int2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_212drag_int2};
static PyObject *__pyx_pw_5imgui_4core_213drag_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, 1); __PYX_ERR(0, 4678, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, 2); __PYX_ERR(0, 4678, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int2") < 0)) __PYX_ERR(0, 4678, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4679, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4679, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4680, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[4]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4681, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[5]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4682, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4678, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4679, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4683, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_212drag_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_212drag_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int2", 0);

  /* "imgui/core.pyx":4724
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":4725
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4726
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4726, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4726, __pyx_L1_error)

  /* "imgui/core.pyx":4727
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4727, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4727, __pyx_L1_error)

  /* "imgui/core.pyx":4725
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4725, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4728
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":4725
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4678
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.drag_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4731
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_215drag_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_214drag_int3[] = "drag_int3(str label, int value0, int value1, int value2, float change_speed=1.0, int min_value=0, int max_value=0, str format='%d')\nDisplay int drag widget with 3 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42, 69\n\n        imgui.begin(\"Example: drag int\")\n        changed, values = imgui.drag_int3(\n            \"drag ints\", *values\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): drag values.\n        change_speed (float): how fast values change on drag.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragInt3(\n            const char* label,\n            int v[3],\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* format = \"%d\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_215drag_int3 = {"drag_int3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_215drag_int3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_214drag_int3};
static PyObject *__pyx_pw_5imgui_4core_215drag_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 1); __PYX_ERR(0, 4731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 2); __PYX_ERR(0, 4731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 3); __PYX_ERR(0, 4731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int3") < 0)) __PYX_ERR(0, 4731, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4732, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4732, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4732, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4733, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[5]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4734, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[6]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4735, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4731, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4732, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4736, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_214drag_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_214drag_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int3", 0);

  /* "imgui/core.pyx":4777
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":4778
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4779
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4779, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4779, __pyx_L1_error)

  /* "imgui/core.pyx":4780
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4780, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4780, __pyx_L1_error)

  /* "imgui/core.pyx":4778
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4778, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4781
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":4778
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4731
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.drag_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4784
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_217drag_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_216drag_int4[] = "drag_int4(str label, int value0, int value1, int value2, int value3, float change_speed=1.0, int min_value=0, int max_value=0, str format='%d')\nDisplay int drag widget with 4 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42, 69, 0\n\n        imgui.begin(\"Example: drag int\")\n        changed, values = imgui.drag_int4(\n            \"drag ints\", *values\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): drag values.\n        change_speed (float): how fast values change on drag.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragInt4(\n            const char* label,\n            int v[4],\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* format = \"%d\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_217drag_int4 = {"drag_int4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_217drag_int4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_216drag_int4};
static PyObject *__pyx_pw_5imgui_4core_217drag_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 1); __PYX_ERR(0, 4784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 2); __PYX_ERR(0, 4784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 3); __PYX_ERR(0, 4784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 4); __PYX_ERR(0, 4784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int4") < 0)) __PYX_ERR(0, 4784, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4785, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4785, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4785, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4785, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4786, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[6]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4787, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[7]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4788, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[8]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4784, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4785, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4789, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_216drag_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_216drag_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int4", 0);

  /* "imgui/core.pyx":4830
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":4831
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4832
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4832, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4832, __pyx_L1_error)

  /* "imgui/core.pyx":4833
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4833, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4833, __pyx_L1_error)

  /* "imgui/core.pyx":4831
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4831, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4834
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":4831
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4784
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.drag_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4837
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_219input_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_218input_text[] = "input_text(str label, str value, int buffer_length, ImGuiInputTextFlags flags=0)\nDisplay text input widget.\n\n    ``buffer_length`` is the maximum allowed length of the content.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        text_val = 'Please, type the coefficient here.'\n        imgui.begin(\"Example: text input\")\n        changed, text_val = imgui.input_text(\n            'Amount:',\n            text_val,\n            256\n        )\n        imgui.text('You wrote:')\n        imgui.same_line()\n        imgui.text(text_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (str): textbox value\n        buffer_length (int): length of the content buffer\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current text contents.\n\n    .. wraps::\n        bool InputText(\n            const char* label,\n            char* buf,\n            size_t buf_size,\n            ImGuiInputTextFlags flags = 0,\n            ImGuiInputTextCallback callback = NULL,\n            void* user_data = NULL\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_219input_text = {"input_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_219input_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_218input_text};
static PyObject *__pyx_pw_5imgui_4core_219input_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_v_buffer_length;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_buffer_length,&__pyx_n_s_flags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, 1); __PYX_ERR(0, 4837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, 2); __PYX_ERR(0, 4837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_text") < 0)) __PYX_ERR(0, 4837, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = ((PyObject*)values[1]);
    __pyx_v_buffer_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_buffer_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4840, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[3]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4841, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4837, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 4839, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_218input_text(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_buffer_length, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_218input_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, ImGuiInputTextFlags __pyx_v_flags) {
  char *__pyx_v_inout_text;
  bool __pyx_v_changed;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_text", 0);

  /* "imgui/core.pyx":4886
 *     """
 *     # todo: pymalloc
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))             # <<<<<<<<<<<<<<
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)
 */
  __pyx_v_inout_text = ((char *)malloc((__pyx_v_buffer_length * (sizeof(char)))));

  /* "imgui/core.pyx":4888
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)             # <<<<<<<<<<<<<<
 * 
 *     changed = cimgui.InputText(
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4888, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4888, __pyx_L1_error)
  (void)(strncpy(__pyx_v_inout_text, __pyx_t_2, __pyx_v_buffer_length));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4891
 * 
 *     changed = cimgui.InputText(
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL             # <<<<<<<<<<<<<<
 *     )
 *     output = _from_bytes(inout_text)
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4891, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4891, __pyx_L1_error)

  /* "imgui/core.pyx":4890
 *     strncpy(inout_text, _bytes(value), buffer_length)
 * 
 *     changed = cimgui.InputText(             # <<<<<<<<<<<<<<
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL
 *     )
 */
  try {
    __pyx_t_4 = ImGui::InputText(__pyx_t_3, __pyx_v_inout_text, __pyx_v_buffer_length, __pyx_v_flags, NULL, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4890, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_changed = __pyx_t_4;

  /* "imgui/core.pyx":4893
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL
 *     )
 *     output = _from_bytes(inout_text)             # <<<<<<<<<<<<<<
 * 
 *     free(inout_text)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_inout_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_f_5imgui_4core__from_bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_output = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "imgui/core.pyx":4895
 *     output = _from_bytes(inout_text)
 * 
 *     free(inout_text)             # <<<<<<<<<<<<<<
 *     return changed, output
 * 
 */
  free(__pyx_v_inout_text);

  /* "imgui/core.pyx":4896
 * 
 *     free(inout_text)
 *     return changed, output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_changed); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_output);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4837
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.input_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4899
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_221input_text_multiline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_220input_text_multiline[] = "input_text_multiline(str label, str value, int buffer_length, float width=0, float height=0, ImGuiInputTextFlags flags=0)\nDisplay multiline text input widget.\n\n    ``buffer_length`` is the maximum allowed length of the content.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 200\n\n        text_val = 'Type the your message here.'\n        imgui.begin(\"Example: text input\")\n        changed, text_val = imgui.input_text_multiline(\n            'Message:',\n            text_val,\n            2056\n        )\n        imgui.text('You wrote:')\n        imgui.same_line()\n        imgui.text(text_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (str): textbox value\n        buffer_length (int): length of the content buffer\n        width (float): width of the textbox\n        height (float): height of the textbox\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current text contents.\n\n    .. wraps::\n        bool InputTextMultiline(\n            const char* label,\n            char* buf,\n            size_t buf_size,\n            const ImVec2& size = ImVec2(0,0),\n            ImGuiInputTextFlags flags = 0,\n            ImGuiInputTextCallback callback = NULL,\n            void* user_data = NULL\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_221input_text_multiline = {"input_text_multiline", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_221input_text_multiline, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_220input_text_multiline};
static PyObject *__pyx_pw_5imgui_4core_221input_text_multiline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_v_buffer_length;
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_text_multiline (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_buffer_length,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, 1); __PYX_ERR(0, 4899, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, 2); __PYX_ERR(0, 4899, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_text_multiline") < 0)) __PYX_ERR(0, 4899, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = ((PyObject*)values[1]);
    __pyx_v_buffer_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_buffer_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4902, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4903, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4904, __pyx_L3_error)
    } else {
      __pyx_v_height = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4905, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4899, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_text_multiline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4900, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 4901, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_220input_text_multiline(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_buffer_length, __pyx_v_width, __pyx_v_height, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_220input_text_multiline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, float __pyx_v_width, float __pyx_v_height, ImGuiInputTextFlags __pyx_v_flags) {
  char *__pyx_v_inout_text;
  bool __pyx_v_changed;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  ImVec2 __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_text_multiline", 0);

  /* "imgui/core.pyx":4952
 *         )
 *     """
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))             # <<<<<<<<<<<<<<
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)
 */
  __pyx_v_inout_text = ((char *)malloc((__pyx_v_buffer_length * (sizeof(char)))));

  /* "imgui/core.pyx":4954
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)             # <<<<<<<<<<<<<<
 * 
 *     changed = cimgui.InputTextMultiline(
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4954, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4954, __pyx_L1_error)
  (void)(strncpy(__pyx_v_inout_text, __pyx_t_2, __pyx_v_buffer_length));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4957
 * 
 *     changed = cimgui.InputTextMultiline(
 *         _bytes(label), inout_text, buffer_length,             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height), flags,
 *         NULL, NULL
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4957, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4957, __pyx_L1_error)

  /* "imgui/core.pyx":4958
 *     changed = cimgui.InputTextMultiline(
 *         _bytes(label), inout_text, buffer_length,
 *         _cast_args_ImVec2(width, height), flags,             # <<<<<<<<<<<<<<
 *         NULL, NULL
 *     )
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4958, __pyx_L1_error)

  /* "imgui/core.pyx":4956
 *     strncpy(inout_text, _bytes(value), buffer_length)
 * 
 *     changed = cimgui.InputTextMultiline(             # <<<<<<<<<<<<<<
 *         _bytes(label), inout_text, buffer_length,
 *         _cast_args_ImVec2(width, height), flags,
 */
  try {
    __pyx_t_5 = ImGui::InputTextMultiline(__pyx_t_3, __pyx_v_inout_text, __pyx_v_buffer_length, __pyx_t_4, __pyx_v_flags, NULL, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4956, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_changed = __pyx_t_5;

  /* "imgui/core.pyx":4961
 *         NULL, NULL
 *     )
 *     output = _from_bytes(inout_text)             # <<<<<<<<<<<<<<
 * 
 *     free(inout_text)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_inout_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_f_5imgui_4core__from_bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_output = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "imgui/core.pyx":4963
 *     output = _from_bytes(inout_text)
 * 
 *     free(inout_text)             # <<<<<<<<<<<<<<
 *     return changed, output
 * 
 */
  free(__pyx_v_inout_text);

  /* "imgui/core.pyx":4964
 * 
 *     free(inout_text)
 *     return changed, output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_changed); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_output);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4899
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.input_text_multiline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4967
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_223input_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_222input_float[] = "input_float(str label, float value, float step=0.0, float step_fast=0.0, str format='%.3f', ImGuiInputTextFlags flags=0)\nDisplay float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        float_val = 0.4\n        imgui.begin(\"Example: float input\")\n        changed, float_val = imgui.input_float('Type coefficient:', float_val)\n        imgui.text('You wrote: %f' % float_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (float): textbox value\n        step (float): incremental step\n        step_fast (float): fast incremental step\n        format = (str): format string\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputFloat(\n            const char* label,\n            float* v,\n            float step = 0.0f,\n            float step_fast = 0.0f,\n            const char* format = \"%.3f\",\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_223input_float = {"input_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_223input_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_222input_float};
static PyObject *__pyx_pw_5imgui_4core_223input_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_step;
  float __pyx_v_step_fast;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float", 0, 2, 6, 1); __PYX_ERR(0, 4967, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float") < 0)) __PYX_ERR(0, 4967, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4969, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_step == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4970, __pyx_L3_error)
    } else {
      __pyx_v_step = ((float)0.0);
    }
    if (values[3]) {
      __pyx_v_step_fast = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_step_fast == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4971, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4973, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4967, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4968, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4972, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_222input_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_222input_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_step, float __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float", 0);

  /* "imgui/core.pyx":5011
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":5013
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5014
 * 
 *     return cimgui.InputFloat(
 *         _bytes(label), &inout_value, step,             # <<<<<<<<<<<<<<
 *         step_fast, _bytes(format), flags
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5014, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5014, __pyx_L1_error)

  /* "imgui/core.pyx":5015
 *     return cimgui.InputFloat(
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5015, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5015, __pyx_L1_error)

  /* "imgui/core.pyx":5013
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 */
  try {
    __pyx_t_5 = ImGui::InputFloat(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_t_4, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5013, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":5016
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5013
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4967
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.input_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5019
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_225input_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_224input_float2[] = "input_float2(str label, float value0, float value1, str format='%.3f', ImGuiInputTextFlags flags=0)\nDisplay two-float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 0.4, 3.2\n        imgui.begin(\"Example: two float inputs\")\n        changed, values = imgui.input_float2('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (float): input values.\n        format = (str): format string\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        textbox state change and the tuple of current values.\n\n    .. wraps::\n        bool InputFloat2(\n            const char* label,\n            float v[2],\n            const char* format = \"%.3f\",\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_225input_float2 = {"input_float2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_225input_float2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_224input_float2};
static PyObject *__pyx_pw_5imgui_4core_225input_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, 1); __PYX_ERR(0, 5019, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, 2); __PYX_ERR(0, 5019, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float2") < 0)) __PYX_ERR(0, 5019, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5021, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5021, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[3]);
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5023, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5019, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5020, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5022, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_224input_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_224input_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float2", 0);

  /* "imgui/core.pyx":5057
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat2(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":5059
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5060
 * 
 *     return cimgui.InputFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5060, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5060, __pyx_L1_error)

  /* "imgui/core.pyx":5061
 *     return cimgui.InputFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5061, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5061, __pyx_L1_error)

  /* "imgui/core.pyx":5059
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  try {
    __pyx_t_6 = ImGui::InputFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_t_5, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5059, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5062
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":5059
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5019
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.input_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5065
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_227input_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_226input_float3[] = "input_float3(str label, float value0, float value1, float value2, str format='%.3f', ImGuiInputTextFlags flags=0)\nDisplay three-float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 0.4, 3.2, 29.3\n        imgui.begin(\"Example: three float inputs\")\n        changed, values = imgui.input_float3('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (float): input values.\n        format = (str): format string\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        textbox state change and the tuple of current values.\n\n    .. wraps::\n        bool InputFloat3(\n            const char* label,\n            float v[3],\n            const char* format = \"%.3f\",\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_227input_float3 = {"input_float3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_227input_float3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_226input_float3};
static PyObject *__pyx_pw_5imgui_4core_227input_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 1); __PYX_ERR(0, 5065, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 2); __PYX_ERR(0, 5065, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 3); __PYX_ERR(0, 5065, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float3") < 0)) __PYX_ERR(0, 5065, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5067, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5067, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5067, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5069, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5065, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5066, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5068, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_226input_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_226input_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float3", 0);

  /* "imgui/core.pyx":5103
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat3(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":5105
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5106
 * 
 *     return cimgui.InputFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5106, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5106, __pyx_L1_error)

  /* "imgui/core.pyx":5107
 *     return cimgui.InputFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5107, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5107, __pyx_L1_error)

  /* "imgui/core.pyx":5105
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  try {
    __pyx_t_6 = ImGui::InputFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_t_5, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5105, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5108
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":5105
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5065
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.input_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5111
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_229input_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_228input_float4[] = "input_float4(str label, float value0, float value1, float value2, float value3, str format='%.3f', ImGuiInputTextFlags flags=0)\nDisplay four-float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 0.4, 3.2, 29.3, 12.9\n        imgui.begin(\"Example: four float inputs\")\n        changed, values = imgui.input_float4('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (float): input values.\n        format = (str): format string\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        textbox state change and the tuple of current values.\n\n    .. wraps::\n        bool InputFloat4(\n            const char* label,\n            float v[4],\n            const char* format = \"%.3f\",\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_229input_float4 = {"input_float4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_229input_float4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_228input_float4};
static PyObject *__pyx_pw_5imgui_4core_229input_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 1); __PYX_ERR(0, 5111, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 2); __PYX_ERR(0, 5111, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 3); __PYX_ERR(0, 5111, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 4); __PYX_ERR(0, 5111, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float4") < 0)) __PYX_ERR(0, 5111, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5113, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5113, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5113, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5113, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[6]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5115, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5112, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5114, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_228input_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_228input_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float4", 0);

  /* "imgui/core.pyx":5149
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat4(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":5151
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5152
 * 
 *     return cimgui.InputFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5152, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5152, __pyx_L1_error)

  /* "imgui/core.pyx":5153
 *     return cimgui.InputFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5153, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5153, __pyx_L1_error)

  /* "imgui/core.pyx":5151
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  try {
    __pyx_t_6 = ImGui::InputFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_t_5, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5151, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5154
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":5151
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5111
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.input_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5157
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_231input_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_230input_int[] = "input_int(str label, int value, int step=1, int step_fast=100, ImGuiInputTextFlags flags=0)\nDisplay integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        int_val = 3\n        imgui.begin(\"Example: integer input\")\n        changed, int_val = imgui.input_int('Type multiplier:', int_val)\n        imgui.text('You wrote: %i' % int_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (int): textbox value\n        step (int): incremental step\n        step_fast (int): fast incremental step\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt(\n            const char* label,\n            int* v,\n            int step = 1,\n            int step_fast = 100,\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_231input_int = {"input_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_231input_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_230input_int};
static PyObject *__pyx_pw_5imgui_4core_231input_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  int __pyx_v_step;
  int __pyx_v_step_fast;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int", 0, 2, 5, 1); __PYX_ERR(0, 5157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int") < 0)) __PYX_ERR(0, 5157, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5159, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5160, __pyx_L3_error)
    } else {
      __pyx_v_step = ((int)1);
    }
    if (values[3]) {
      __pyx_v_step_fast = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_step_fast == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5161, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((int)0x64);
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5162, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5158, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_230input_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_230input_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_step, int __pyx_v_step_fast, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int", 0);

  /* "imgui/core.pyx":5198
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":5200
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5201
 * 
 *     return cimgui.InputInt(
 *         _bytes(label), &inout_value, step, step_fast, flags             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5201, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5201, __pyx_L1_error)

  /* "imgui/core.pyx":5200
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  try {
    __pyx_t_3 = ImGui::InputInt(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5200, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5202
 *     return cimgui.InputInt(
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5200
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5157
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.input_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5205
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_233input_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_232input_int2[] = "input_int2(str label, int value0, int value1, ImGuiInputTextFlags flags=0)\nDisplay two-integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 4, 12\n        imgui.begin(\"Example: two int inputs\")\n        changed, values = imgui.input_int2('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): textbox values\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt2(\n            const char* label,\n            int v[2],\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_233input_int2 = {"input_int2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_233input_int2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_232input_int2};
static PyObject *__pyx_pw_5imgui_4core_233input_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_flags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, 1); __PYX_ERR(0, 5205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, 2); __PYX_ERR(0, 5205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int2") < 0)) __PYX_ERR(0, 5205, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5207, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5207, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[3]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5208, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5205, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5206, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_232input_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_232input_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int2", 0);

  /* "imgui/core.pyx":5240
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt2(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":5242
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5243
 * 
 *     return cimgui.InputInt2(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1]]
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5243, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5243, __pyx_L1_error)

  /* "imgui/core.pyx":5242
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5242, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":5244
 *     return cimgui.InputInt2(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "imgui/core.pyx":5242
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5205
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.input_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5247
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_235input_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_234input_int3[] = "input_int3(str label, int value0, int value1, int value2, ImGuiInputTextFlags flags=0)\nDisplay three-integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 4, 12, 28\n        imgui.begin(\"Example: three int inputs\")\n        changed, values = imgui.input_int3('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (int): textbox values\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt3(\n            const char* label,\n            int v[3],\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_235input_int3 = {"input_int3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_235input_int3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_234input_int3};
static PyObject *__pyx_pw_5imgui_4core_235input_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 1); __PYX_ERR(0, 5247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 2); __PYX_ERR(0, 5247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 3); __PYX_ERR(0, 5247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int3") < 0)) __PYX_ERR(0, 5247, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5249, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5249, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5249, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5250, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5248, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_234input_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_234input_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int3", 0);

  /* "imgui/core.pyx":5282
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt3(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":5284
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5285
 * 
 *     return cimgui.InputInt3(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5285, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5285, __pyx_L1_error)

  /* "imgui/core.pyx":5284
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5284, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":5286
 *     return cimgui.InputInt3(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":5284
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5247
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.input_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5289
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_237input_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_236input_int4[] = "input_int4(str label, int value0, int value1, int value2, int value3, ImGuiInputTextFlags flags=0)\nDisplay four-integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 4, 12, 28, 73\n        imgui.begin(\"Example: four int inputs\")\n        changed, values = imgui.input_int4('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (int): textbox values\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt4(\n            const char* label,\n            int v[4],\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_237input_int4 = {"input_int4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_237input_int4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_236input_int4};
static PyObject *__pyx_pw_5imgui_4core_237input_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 1); __PYX_ERR(0, 5289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 2); __PYX_ERR(0, 5289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 3); __PYX_ERR(0, 5289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 4); __PYX_ERR(0, 5289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int4") < 0)) __PYX_ERR(0, 5289, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5291, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5291, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5291, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5291, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5292, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5289, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5290, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_236input_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_236input_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int4", 0);

  /* "imgui/core.pyx":5324
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt4(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":5326
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5327
 * 
 *     return cimgui.InputInt4(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5327, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5327, __pyx_L1_error)

  /* "imgui/core.pyx":5326
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5326, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":5328
 *     return cimgui.InputInt4(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyList_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":5326
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5289
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.input_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5331
 * 
 * 
 * def input_double(             # <<<<<<<<<<<<<<
 *     str label,
 *     double value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_239input_double(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_238input_double[] = "input_double(str label, double value, double step=0.0, double step_fast=0.0, str format='%.6f', ImGuiInputTextFlags flags=0)\nDisplay double input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        double_val = 3.14159265358979323846\n        imgui.begin(\"Example: double input\")\n        changed, double_val = imgui.input_double('Type multiplier:', double_val)\n        imgui.text('You wrote: %i' % double_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (double): textbox value\n        step (double): incremental step\n        step_fast (double): fast incremental step\n        format = (str): format string\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputDouble(\n            const char* label,\n            double* v,\n            double step = 0.0,\n            double step_fast = 0.0,\n            _bytes(format),\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_239input_double = {"input_double", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_239input_double, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_238input_double};
static PyObject *__pyx_pw_5imgui_4core_239input_double(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  double __pyx_v_value;
  double __pyx_v_step;
  double __pyx_v_step_fast;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_double (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_6f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_double", 0, 2, 6, 1); __PYX_ERR(0, 5331, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_double") < 0)) __PYX_ERR(0, 5331, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 5333, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 5334, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_step_fast = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_step_fast == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 5335, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((double)0.0);
    }
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5337, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_double", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5331, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5332, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5336, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_238input_double(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_238input_double(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, double __pyx_v_value, double __pyx_v_step, double __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  double __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_double", 0);

  /* "imgui/core.pyx":5375
 *         )
 *     """
 *     cdef double inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputDouble(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":5377
 *     cdef double inout_value = value
 * 
 *     return cimgui.InputDouble(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5378
 * 
 *     return cimgui.InputDouble(
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5378, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5378, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5378, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5378, __pyx_L1_error)

  /* "imgui/core.pyx":5377
 *     cdef double inout_value = value
 * 
 *     return cimgui.InputDouble(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value
 */
  try {
    __pyx_t_5 = ImGui::InputDouble(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_t_4, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5377, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":5379
 *     return cimgui.InputDouble(
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5377
 *     cdef double inout_value = value
 * 
 *     return cimgui.InputDouble(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5331
 * 
 * 
 * def input_double(             # <<<<<<<<<<<<<<
 *     str label,
 *     double value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.input_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5382
 * 
 * 
 * def slider_angle(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_241slider_angle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_240slider_angle[] = "slider_angle(str label, float value, float min_value, float max_value)\nDisplay angle slider widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        value = 88.2\n\n        imgui.begin(\"Example: slider angle\")\n        changed, value = imgui.slider_angle(\n            \"slide angles\", value,\n            min_value=0.0, max_value=100.0,\n        )\n        imgui.text(\"Changed: %s, Value: %s\" % (changed, value))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the current slider value.\n\n    .. wraps::\n        bool SliderAngle(\n            const char* label,\n            float v,\n            float v_min,\n            float v_max,\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_241slider_angle = {"slider_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_241slider_angle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_240slider_angle};
static PyObject *__pyx_pw_5imgui_4core_241slider_angle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, 1); __PYX_ERR(0, 5382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, 2); __PYX_ERR(0, 5382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, 3); __PYX_ERR(0, 5382, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_angle") < 0)) __PYX_ERR(0, 5382, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5384, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5385, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5386, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5382, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5383, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_240slider_angle(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_240slider_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_angle", 0);

  /* "imgui/core.pyx":5423
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderAngle(
 *         _bytes(label), <float*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":5424
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5425
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(
 *         _bytes(label), <float*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5425, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5425, __pyx_L1_error)

  /* "imgui/core.pyx":5424
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 */
  try {
    __pyx_t_3 = ImGui::SliderAngle(__pyx_t_2, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5424, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5427
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5424
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5382
 * 
 * 
 * def slider_angle(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.slider_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5431
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_243slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_242slider_float[] = "slider_float(str label, float value, float min_value, float max_value, str format='%.3f', float power=1.0)\nDisplay float slider widget.\n    Use power different from 1.0 for logarithmic sliders.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        value = 88.2\n\n        imgui.begin(\"Example: slider float\")\n        changed, value = imgui.slider_float(\n            \"slide floats\", value,\n            min_value=0.0, max_value=100.0,\n            format=\"%.0f\",\n            power=1.0\n        )\n        imgui.text(\"Changed: %s, Value: %s\" % (changed, value))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the current slider value.\n\n    .. wraps::\n        bool SliderFloat(\n            const char* label,\n            float v,\n            float v_min,\n            float v_max,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_243slider_float = {"slider_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_243slider_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_242slider_float};
static PyObject *__pyx_pw_5imgui_4core_243slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 1); __PYX_ERR(0, 5431, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 2); __PYX_ERR(0, 5431, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 3); __PYX_ERR(0, 5431, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float") < 0)) __PYX_ERR(0, 5431, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5433, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5434, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5435, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5437, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5431, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5432, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5436, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_242slider_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_242slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float", 0);

  /* "imgui/core.pyx":5483
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":5484
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5485
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5485, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5485, __pyx_L1_error)

  /* "imgui/core.pyx":5486
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5486, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5486, __pyx_L1_error)

  /* "imgui/core.pyx":5484
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_5 = ImGui::SliderFloat(__pyx_t_2, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5484, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":5487
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5484
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5431
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5490
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_245slider_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_244slider_float2[] = "slider_float2(str label, float value0, float value1, float min_value, float max_value, str format='%.3f', float power=1.0)\nDisplay float slider widget with 2 values.\n    Use power different from 1.0 for logarithmic sliders.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.2, 42.6\n\n        imgui.begin(\"Example: slider float2\")\n        changed, values = imgui.slider_float2(\n            \"slide floats\", *values,\n            min_value=0.0, max_value=100.0,\n            format=\"%.0f\",\n            power=1.0\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n    Args:\n        label (str): widget label.\n        value0, value1 (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderFloat2(\n            const char* label,\n            float v[2],\n            float v_min,\n            float v_max,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_245slider_float2 = {"slider_float2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_245slider_float2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_244slider_float2};
static PyObject *__pyx_pw_5imgui_4core_245slider_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 1); __PYX_ERR(0, 5490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 2); __PYX_ERR(0, 5490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 3); __PYX_ERR(0, 5490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 4); __PYX_ERR(0, 5490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float2") < 0)) __PYX_ERR(0, 5490, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5492, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5492, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5493, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5494, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5496, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5490, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5491, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5495, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_244slider_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_244slider_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float2", 0);

  /* "imgui/core.pyx":5541
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":5542
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5543
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5543, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5543, __pyx_L1_error)

  /* "imgui/core.pyx":5544
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5544, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5544, __pyx_L1_error)

  /* "imgui/core.pyx":5542
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5542, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5545
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":5542
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5490
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.slider_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5548
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_247slider_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_246slider_float3[] = "slider_float3(str label, float value0, float value1, float value2, float min_value, float max_value, str format='%.3f', float power=1.0)\nDisplay float slider widget with 3 values.\n    Use power different from 1.0 for logarithmic sliders.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.2, 42.6, 69.1\n\n        imgui.begin(\"Example: slider float3\")\n        changed, values = imgui.slider_float3(\n            \"slide floats\", *values,\n            min_value=0.0, max_value=100.0,\n            format=\"%.0f\",\n            power=1.0\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderFloat3(\n            const char* label,\n            float v[3],\n            float v_min,\n            float v_max,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_247slider_float3 = {"slider_float3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_247slider_float3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_246slider_float3};
static PyObject *__pyx_pw_5imgui_4core_247slider_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 1); __PYX_ERR(0, 5548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 2); __PYX_ERR(0, 5548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 3); __PYX_ERR(0, 5548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 4); __PYX_ERR(0, 5548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 5); __PYX_ERR(0, 5548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float3") < 0)) __PYX_ERR(0, 5548, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5550, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5550, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5550, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5551, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5552, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5554, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5548, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5549, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5553, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_246slider_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_246slider_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float3", 0);

  /* "imgui/core.pyx":5600
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":5601
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5602
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5602, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5602, __pyx_L1_error)

  /* "imgui/core.pyx":5603
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5603, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5603, __pyx_L1_error)

  /* "imgui/core.pyx":5601
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5601, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5604
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":5601
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5548
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.slider_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5607
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_249slider_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_248slider_float4[] = "slider_float4(str label, float value0, float value1, float value2, float value3, float min_value, float max_value, str format='%.3f', float power=1.0)\nDisplay float slider widget with 4 values.\n    Use power different from 1.0 for logarithmic sliders.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.2, 42.6, 69.1, 0.3\n\n        imgui.begin(\"Example: slider float4\")\n        changed, values = imgui.slider_float4(\n            \"slide floats\", *values,\n            min_value=0.0, max_value=100.0,\n            format=\"%.0f\",\n            power=1.0\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderFloat4(\n            const char* label,\n            float v[4],\n            float v_min,\n            float v_max,\n            const char* format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_249slider_float4 = {"slider_float4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_249slider_float4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_248slider_float4};
static PyObject *__pyx_pw_5imgui_4core_249slider_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 1); __PYX_ERR(0, 5607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 2); __PYX_ERR(0, 5607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 3); __PYX_ERR(0, 5607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 4); __PYX_ERR(0, 5607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 5); __PYX_ERR(0, 5607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 6); __PYX_ERR(0, 5607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float4") < 0)) __PYX_ERR(0, 5607, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5609, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5609, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5609, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5609, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5610, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5611, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[7]);
    if (values[8]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5613, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5607, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5608, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5612, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_248slider_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_248slider_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float4", 0);

  /* "imgui/core.pyx":5659
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":5660
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5661
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5661, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5661, __pyx_L1_error)

  /* "imgui/core.pyx":5662
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5662, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5662, __pyx_L1_error)

  /* "imgui/core.pyx":5660
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5660, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5663
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":5660
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5607
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.slider_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5666
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_251slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_250slider_int[] = "slider_int(str label, int value, int min_value, int max_value, str format='%.f')\nDisplay int slider widget\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        value = 88\n\n        imgui.begin(\"Example: slider int\")\n        changed, values = imgui.slider_int(\n            \"slide ints\", value,\n            min_value=0, max_value=100,\n            format=\"%d\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, value))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (int): slider value.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the slider value.\n\n    .. wraps::\n        bool SliderInt(\n            const char* label,\n            int v,\n            int v_min,\n            int v_max,\n            const char* format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_251slider_int = {"slider_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_251slider_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_250slider_int};
static PyObject *__pyx_pw_5imgui_4core_251slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 1); __PYX_ERR(0, 5666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 2); __PYX_ERR(0, 5666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 3); __PYX_ERR(0, 5666, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int") < 0)) __PYX_ERR(0, 5666, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5668, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5669, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5670, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5666, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5667, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5671, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_250slider_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_250slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int", 0);

  /* "imgui/core.pyx":5713
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":5714
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5715
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5715, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5715, __pyx_L1_error)

  /* "imgui/core.pyx":5716
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5716, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5716, __pyx_L1_error)

  /* "imgui/core.pyx":5714
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_5 = ImGui::SliderInt(__pyx_t_2, ((int *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5714, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":5717
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5714
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5666
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5720
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_253slider_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_252slider_int2[] = "slider_int2(str label, int value0, int value1, int min_value, int max_value, str format='%.f')\nDisplay int slider widget with 2 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 27\n\n        imgui.begin(\"Example: slider int2\")\n        changed, values = imgui.slider_int2(\n            \"slide ints2\", *values,\n            min_value=0, max_value=100,\n            format=\"%d\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): slider values.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderInt2(\n            const char* label,\n            int v[2],\n            int v_min,\n            int v_max,\n            const char* format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_253slider_int2 = {"slider_int2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_253slider_int2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_252slider_int2};
static PyObject *__pyx_pw_5imgui_4core_253slider_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 1); __PYX_ERR(0, 5720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 2); __PYX_ERR(0, 5720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 3); __PYX_ERR(0, 5720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 4); __PYX_ERR(0, 5720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int2") < 0)) __PYX_ERR(0, 5720, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5722, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5722, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5723, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5724, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5720, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5721, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5725, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_252slider_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_252slider_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int2", 0);

  /* "imgui/core.pyx":5767
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":5768
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5769
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5769, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5769, __pyx_L1_error)

  /* "imgui/core.pyx":5770
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5770, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5770, __pyx_L1_error)

  /* "imgui/core.pyx":5768
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5768, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5771
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":5768
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5720
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.slider_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5774
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_255slider_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_254slider_int3[] = "slider_int3(str label, int value0, int value1, int value2, int min_value, int max_value, str format='%.f')\nDisplay int slider widget with 3 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 27, 3\n\n        imgui.begin(\"Example: slider int3\")\n        changed, values = imgui.slider_int3(\n            \"slide ints3\", *values,\n            min_value=0, max_value=100,\n            format=\"%d\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (int): slider values.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderInt3(\n            const char* label,\n            int v[3],\n            int v_min,\n            int v_max,\n            const char* format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_255slider_int3 = {"slider_int3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_255slider_int3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_254slider_int3};
static PyObject *__pyx_pw_5imgui_4core_255slider_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 1); __PYX_ERR(0, 5774, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 2); __PYX_ERR(0, 5774, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 3); __PYX_ERR(0, 5774, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 4); __PYX_ERR(0, 5774, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 5); __PYX_ERR(0, 5774, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int3") < 0)) __PYX_ERR(0, 5774, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5776, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5776, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5776, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5777, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5778, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5774, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5775, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5779, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_254slider_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_254slider_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int3", 0);

  /* "imgui/core.pyx":5821
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":5822
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5823
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5823, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5823, __pyx_L1_error)

  /* "imgui/core.pyx":5824
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5824, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5824, __pyx_L1_error)

  /* "imgui/core.pyx":5822
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5822, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5825
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":5822
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5774
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.slider_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5828
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_257slider_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_256slider_int4[] = "slider_int4(str label, int value0, int value1, int value2, int value3, int min_value, int max_value, str format='%.f')\nDisplay int slider widget with 4 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42, 69, 0\n\n        imgui.begin(\"Example: slider int4\")\n        changed, values = imgui.slider_int4(\n            \"slide ints\", *values,\n            min_value=0, max_value=100, format=\"%d\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (int): slider values.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderInt4(\n            const char* label,\n            int v[4],\n            int v_min,\n            int v_max,\n            const char* format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_257slider_int4 = {"slider_int4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_257slider_int4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_256slider_int4};
static PyObject *__pyx_pw_5imgui_4core_257slider_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 1); __PYX_ERR(0, 5828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 2); __PYX_ERR(0, 5828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 3); __PYX_ERR(0, 5828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 4); __PYX_ERR(0, 5828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 5); __PYX_ERR(0, 5828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 6); __PYX_ERR(0, 5828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int4") < 0)) __PYX_ERR(0, 5828, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5830, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5830, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5830, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5830, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5831, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5832, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5828, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5829, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5833, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_256slider_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_256slider_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int4", 0);

  /* "imgui/core.pyx":5874
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":5875
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5876
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5876, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5876, __pyx_L1_error)

  /* "imgui/core.pyx":5877
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5877, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5877, __pyx_L1_error)

  /* "imgui/core.pyx":5875
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5875, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5878
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":5875
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5828
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.slider_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5881
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_259v_slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_258v_slider_float[] = "v_slider_float(str label, float width, float height, float value, float min_value, float max_value, str format='%.f', float power=1.0)\nDisplay vertical float slider widget with the specified width and\n    height.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        width = 20\n        height = 100\n        value = 88\n\n        imgui.begin(\"Example: vertical slider float\")\n        changed, values = imgui.v_slider_float(\n            \"vertical slider float\",\n            width, height, value,\n            min_value=0, max_value=100,\n            format=\"%0.3f\", power = 1.0\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (float): slider value.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the slider value.\n\n    .. wraps::\n        bool VSliderFloat(\n            const char* label,\n            const ImVec2& size,\n            float v,\n            float v_min,\n            floatint v_max,\n            const char* format = \"%.3f\",\n            float power=1.0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_259v_slider_float = {"v_slider_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_259v_slider_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_258v_slider_float};
static PyObject *__pyx_pw_5imgui_4core_259v_slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v_slider_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 1); __PYX_ERR(0, 5881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 2); __PYX_ERR(0, 5881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 3); __PYX_ERR(0, 5881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 4); __PYX_ERR(0, 5881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 5); __PYX_ERR(0, 5881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "v_slider_float") < 0)) __PYX_ERR(0, 5881, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5883, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5884, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5885, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5886, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5887, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5889, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5881, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.v_slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5882, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5888, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_258v_slider_float(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_258v_slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v_slider_float", 0);

  /* "imgui/core.pyx":5938
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.VSliderFloat(
 *         _bytes(label), _cast_args_ImVec2(width, height),
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":5939
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":5940
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(
 *         _bytes(label), _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5940, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5940, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 5940, __pyx_L1_error)

  /* "imgui/core.pyx":5942
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5942, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5942, __pyx_L1_error)

  /* "imgui/core.pyx":5939
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  try {
    __pyx_t_6 = ImGui::VSliderFloat(__pyx_t_2, __pyx_t_3, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5939, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":5943
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5939
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5881
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.v_slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5946
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_261v_slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_260v_slider_int[] = "v_slider_int(str label, float width, float height, int value, int min_value, int max_value, str format='%d')\nDisplay vertical int slider widget with the specified width and height.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        width = 20\n        height = 100\n        value = 88\n\n        imgui.begin(\"Example: vertical slider int\")\n        changed, values = imgui.v_slider_int(\n            \"vertical slider int\",\n            width, height, value,\n            min_value=0, max_value=100,\n            format=\"%d\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (int): slider value.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the slider value.\n\n    .. wraps::\n        bool VSliderInt(\n            const char* label,\n            const ImVec2& size,\n            int v,\n            int v_min,\n            int v_max,\n            const char* format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_261v_slider_int = {"v_slider_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_261v_slider_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_260v_slider_int};
static PyObject *__pyx_pw_5imgui_4core_261v_slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  int __pyx_v_value;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v_slider_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 1); __PYX_ERR(0, 5946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 2); __PYX_ERR(0, 5946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 3); __PYX_ERR(0, 5946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 4); __PYX_ERR(0, 5946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 5); __PYX_ERR(0, 5946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "v_slider_int") < 0)) __PYX_ERR(0, 5946, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5948, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5949, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5950, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5951, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5952, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5946, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.v_slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5947, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5953, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_260v_slider_int(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_260v_slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v_slider_int", 0);

  /* "imgui/core.pyx":5999
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.VSliderInt(
 *         _bytes(label), _cast_args_ImVec2(width, height),
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":6000
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":6001
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(
 *         _bytes(label), _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6001, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 6001, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6001, __pyx_L1_error)

  /* "imgui/core.pyx":6003
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6003, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 6003, __pyx_L1_error)

  /* "imgui/core.pyx":6000
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  try {
    __pyx_t_6 = ImGui::VSliderInt(__pyx_t_2, __pyx_t_3, ((int *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6000, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":6004
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":6000
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 6000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5946
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.v_slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6007
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_263plot_lines(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_262plot_lines[] = "plot_lines(str label, const float[:] values, int values_count=-1, int values_offset=0, str overlay_text=None, float scale_min=FLT_MAX, float scale_max=FLT_MAX, graph_size=(0, 0), int stride=<\077\077?>)\n\n    Plot a 1D array of float values.\n\n    Args:\n        label (str): A plot label that will be displayed on the plot's right\n            side. If you want the label to be invisible, add :code:`\"##\"`\n            before the label's text: :code:`\"my_label\" -> \"##my_label\"`\n\n        values (array of floats): the y-values.\n            It must be a type that supports Cython's Memoryviews,\n            (See: http://docs.cython.org/en/latest/src/userguide/memoryviews.html)\n            for example a numpy array.\n\n        overlay_text (str or None, optional): Overlay text.\n\n        scale_min (float, optional): y-value at the bottom of the plot.\n        scale_max (float, optional): y-value at the top of the plot.\n\n        graph_size (tuple of two floats, optional): plot size in pixels.\n            **Note:** In ImGui 1.49, (-1,-1) will NOT auto-size the plot.\n            To do that, use :func:`get_content_region_available` and pass\n            in the right size.\n\n    **Note:** These low-level parameters are exposed if needed for\n    performance:\n\n    * **values_offset** (*int*): Index of first element to display\n    * **values_count** (*int*): Number of values to display. -1 will use the\n        entire array.\n    * **stride** (*int*): Number of bytes to move to read next element.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        from array import array\n        from math import sin\n        # NOTE: this example will not work under py27 due do incompatible\n        # implementation of array and memoryview().\n        plot_values = array('f', [sin(x * 0.1) for x in range(100)])\n\n        imgui.begin(\"Plot example\")\n        imgui.plot_lines(\"Sin(t)\", plot_values)\n        imgui.end()""\n\n    .. wraps::\n            void PlotLines(\n                const char* label, const float* values, int values_count,\n\n                int values_offset = 0,\n                const char* overlay_text = NULL,\n                float scale_min = FLT_MAX,\n                float scale_max = FLT_MAX,\n                ImVec2 graph_size = ImVec2(0,0),\n                int stride = sizeof(float)\n            )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_263plot_lines = {"plot_lines", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_263plot_lines, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_262plot_lines};
static PyObject *__pyx_pw_5imgui_4core_263plot_lines(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  __Pyx_memviewslice __pyx_v_values = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_values_count;
  int __pyx_v_values_offset;
  PyObject *__pyx_v_overlay_text = 0;
  float __pyx_v_scale_min;
  float __pyx_v_scale_max;
  PyObject *__pyx_v_graph_size = 0;
  int __pyx_v_stride;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot_lines (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_values,&__pyx_n_s_values_count,&__pyx_n_s_values_offset,&__pyx_n_s_overlay_text,&__pyx_n_s_scale_min,&__pyx_n_s_scale_max,&__pyx_n_s_graph_size,&__pyx_n_s_stride,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "imgui/core.pyx":6012
 *         int values_count  = -1,
 *         int values_offset = 0,
 *         str overlay_text = None,             # <<<<<<<<<<<<<<
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 */
    values[4] = ((PyObject*)Py_None);

    /* "imgui/core.pyx":6015
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),             # <<<<<<<<<<<<<<
 *         int stride = sizeof(float),
 *     ):
 */
    values[7] = ((PyObject *)__pyx_tuple__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("plot_lines", 0, 2, 9, 1); __PYX_ERR(0, 6007, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_count);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_offset);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_overlay_text);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_min);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_max);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph_size);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plot_lines") < 0)) __PYX_ERR(0, 6007, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_values = __Pyx_PyObject_to_MemoryviewSlice_ds_float__const__(values[1], 0); if (unlikely(!__pyx_v_values.memview)) __PYX_ERR(0, 6009, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_values_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_values_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6010, __pyx_L3_error)
    } else {
      __pyx_v_values_count = ((int)-1);
    }
    if (values[3]) {
      __pyx_v_values_offset = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_values_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6011, __pyx_L3_error)
    } else {
      __pyx_v_values_offset = ((int)0);
    }
    __pyx_v_overlay_text = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_scale_min = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_scale_min == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6013, __pyx_L3_error)
    } else {
      __pyx_v_scale_min = __pyx_k__51;
    }
    if (values[6]) {
      __pyx_v_scale_max = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_scale_max == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6014, __pyx_L3_error)
    } else {
      __pyx_v_scale_max = __pyx_k__52;
    }
    __pyx_v_graph_size = values[7];
    if (values[8]) {
      __pyx_v_stride = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_stride == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6016, __pyx_L3_error)
    } else {
      __pyx_v_stride = __pyx_k__53;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plot_lines", 0, 2, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6007, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.plot_lines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 0, "label", 1))) __PYX_ERR(0, 6008, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_values.memview) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "values"); __PYX_ERR(0, 6009, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_overlay_text), (&PyString_Type), 1, "overlay_text", 1))) __PYX_ERR(0, 6012, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_262plot_lines(__pyx_self, __pyx_v_label, __pyx_v_values, __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_v_graph_size, __pyx_v_stride);

  /* "imgui/core.pyx":6007
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_262plot_lines(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride) {
  char const *__pyx_v_overlay_text_ptr;
  PyObject *__pyx_v_overlay_text_b = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  char const *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  ImVec2 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("plot_lines", 0);

  /* "imgui/core.pyx":6077
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_values_count == -1L) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":6078
 *     """
 *     if values_count == -1:
 *         values_count = values.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     # Would be nicer as something like
 */
    __pyx_v_values_count = (__pyx_v_values.shape[0]);

    /* "imgui/core.pyx":6077
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  }

  /* "imgui/core.pyx":6083
 *     #   _bytes(overlay_text) if overlay_text is not None else NULL
 *     # but then Cython complains about either types or pointers to temporary references.
 *     cdef const char* overlay_text_ptr = NULL             # <<<<<<<<<<<<<<
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:
 */
  __pyx_v_overlay_text_ptr = NULL;

  /* "imgui/core.pyx":6085
 *     cdef const char* overlay_text_ptr = NULL
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  __pyx_t_1 = (__pyx_v_overlay_text != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":6086
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable             # <<<<<<<<<<<<<<
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 */
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_overlay_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_overlay_text_b = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "imgui/core.pyx":6087
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*             # <<<<<<<<<<<<<<
 * 
 *     cimgui.PlotLines(
 */
    if (unlikely(__pyx_v_overlay_text_b == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 6087, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v_overlay_text_b); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 6087, __pyx_L1_error)
    __pyx_v_overlay_text_ptr = __pyx_t_4;

    /* "imgui/core.pyx":6085
 *     cdef const char* overlay_text_ptr = NULL
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  }

  /* "imgui/core.pyx":6090
 * 
 *     cimgui.PlotLines(
 *         _bytes(label), &values[0], values_count,             # <<<<<<<<<<<<<<
 *         values_offset,
 *         overlay_text_ptr,
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6090, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 6090, __pyx_L1_error)
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_values.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_values.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 6090, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6094
 *         overlay_text_ptr,
 *         scale_min, scale_max,
 *         _cast_tuple_ImVec2(graph_size),             # <<<<<<<<<<<<<<
 *         stride
 *     )
 */
  __pyx_t_8 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_graph_size); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6094, __pyx_L1_error)

  /* "imgui/core.pyx":6089
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 *     cimgui.PlotLines(             # <<<<<<<<<<<<<<
 *         _bytes(label), &values[0], values_count,
 *         values_offset,
 */
  try {
    ImGui::PlotLines(__pyx_t_5, (&(*((float const  *) ( /* dim=0 */ (__pyx_v_values.data + __pyx_t_6 * __pyx_v_values.strides[0]) )))), __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text_ptr, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_t_8, __pyx_v_stride);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6089, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imgui/core.pyx":6007
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.plot_lines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_overlay_text_b);
  __PYX_XDEC_MEMVIEW(&__pyx_v_values, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6099
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_265plot_histogram(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_264plot_histogram[] = "plot_histogram(str label, const float[:] values, int values_count=-1, int values_offset=0, str overlay_text=None, float scale_min=FLT_MAX, float scale_max=FLT_MAX, graph_size=(0, 0), int stride=<\077\077?>)\n\n    Plot a histogram of float values.\n\n    Args:\n        label (str): A plot label that will be displayed on the plot's right\n            side. If you want the label to be invisible, add :code:`\"##\"`\n            before the label's text: :code:`\"my_label\" -> \"##my_label\"`\n\n        values (array of floats): the y-values.\n            It must be a type that supports Cython's Memoryviews,\n            (See: http://docs.cython.org/en/latest/src/userguide/memoryviews.html)\n            for example a numpy array.\n\n        overlay_text (str or None, optional): Overlay text.\n\n        scale_min (float, optional): y-value at the bottom of the plot.\n        scale_max (float, optional): y-value at the top of the plot.\n\n        graph_size (tuple of two floats, optional): plot size in pixels.\n            **Note:** In ImGui 1.49, (-1,-1) will NOT auto-size the plot.\n            To do that, use :func:`get_content_region_available` and pass\n            in the right size.\n\n    **Note:** These low-level parameters are exposed if needed for\n    performance:\n\n    * **values_offset** (*int*): Index of first element to display\n    * **values_count** (*int*): Number of values to display. -1 will use the\n        entire array.\n    * **stride** (*int*): Number of bytes to move to read next element.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        from array import array\n        from random import random\n\n        # NOTE: this example will not work under py27 due do incompatible\n        # implementation of array and memoryview().\n        histogram_values = array('f', [random() for _ in range(20)])\n\n        imgui.begin(\"Plot example\")\n        imgui.plot_histogram(\"histogram(random())\", histogra""m_values)\n        imgui.end()\n\n    .. wraps::\n            void PlotHistogram(\n                const char* label, const float* values, int values_count,\n                # note: optional\n                int values_offset,\n                const char* overlay_text,\n                float scale_min,\n                float scale_max,\n                ImVec2 graph_size,\n                int stride\n            )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_265plot_histogram = {"plot_histogram", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_265plot_histogram, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_264plot_histogram};
static PyObject *__pyx_pw_5imgui_4core_265plot_histogram(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  __Pyx_memviewslice __pyx_v_values = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_values_count;
  int __pyx_v_values_offset;
  PyObject *__pyx_v_overlay_text = 0;
  float __pyx_v_scale_min;
  float __pyx_v_scale_max;
  PyObject *__pyx_v_graph_size = 0;
  int __pyx_v_stride;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot_histogram (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_values,&__pyx_n_s_values_count,&__pyx_n_s_values_offset,&__pyx_n_s_overlay_text,&__pyx_n_s_scale_min,&__pyx_n_s_scale_max,&__pyx_n_s_graph_size,&__pyx_n_s_stride,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "imgui/core.pyx":6104
 *         int values_count  = -1,
 *         int values_offset = 0,
 *         str overlay_text = None,             # <<<<<<<<<<<<<<
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 */
    values[4] = ((PyObject*)Py_None);

    /* "imgui/core.pyx":6107
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),             # <<<<<<<<<<<<<<
 *         int stride = sizeof(float),
 *     ):
 */
    values[7] = ((PyObject *)__pyx_tuple__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("plot_histogram", 0, 2, 9, 1); __PYX_ERR(0, 6099, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_count);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_offset);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_overlay_text);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_min);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_max);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph_size);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plot_histogram") < 0)) __PYX_ERR(0, 6099, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_values = __Pyx_PyObject_to_MemoryviewSlice_ds_float__const__(values[1], 0); if (unlikely(!__pyx_v_values.memview)) __PYX_ERR(0, 6101, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_values_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_values_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6102, __pyx_L3_error)
    } else {
      __pyx_v_values_count = ((int)-1);
    }
    if (values[3]) {
      __pyx_v_values_offset = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_values_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6103, __pyx_L3_error)
    } else {
      __pyx_v_values_offset = ((int)0);
    }
    __pyx_v_overlay_text = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_scale_min = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_scale_min == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6105, __pyx_L3_error)
    } else {
      __pyx_v_scale_min = __pyx_k__54;
    }
    if (values[6]) {
      __pyx_v_scale_max = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_scale_max == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6106, __pyx_L3_error)
    } else {
      __pyx_v_scale_max = __pyx_k__55;
    }
    __pyx_v_graph_size = values[7];
    if (values[8]) {
      __pyx_v_stride = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_stride == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6108, __pyx_L3_error)
    } else {
      __pyx_v_stride = __pyx_k__56;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plot_histogram", 0, 2, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6099, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.plot_histogram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 0, "label", 1))) __PYX_ERR(0, 6100, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_values.memview) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "values"); __PYX_ERR(0, 6101, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_overlay_text), (&PyString_Type), 1, "overlay_text", 1))) __PYX_ERR(0, 6104, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_264plot_histogram(__pyx_self, __pyx_v_label, __pyx_v_values, __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_v_graph_size, __pyx_v_stride);

  /* "imgui/core.pyx":6099
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_264plot_histogram(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride) {
  char const *__pyx_v_overlay_text_ptr;
  PyObject *__pyx_v_overlay_text_b = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  char const *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  ImVec2 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("plot_histogram", 0);

  /* "imgui/core.pyx":6169
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_values_count == -1L) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":6170
 *     """
 *     if values_count == -1:
 *         values_count = values.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     # Would be nicer as something like
 */
    __pyx_v_values_count = (__pyx_v_values.shape[0]);

    /* "imgui/core.pyx":6169
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  }

  /* "imgui/core.pyx":6175
 *     #   _bytes(overlay_text) if overlay_text is not None else NULL
 *     # but then Cython complains about either types or pointers to temporary references.
 *     cdef const char* overlay_text_ptr = NULL             # <<<<<<<<<<<<<<
 *     cdef bytes overlay_text_b
 * 
 */
  __pyx_v_overlay_text_ptr = NULL;

  /* "imgui/core.pyx":6178
 *     cdef bytes overlay_text_b
 * 
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  __pyx_t_1 = (__pyx_v_overlay_text != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":6179
 * 
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable             # <<<<<<<<<<<<<<
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 */
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_overlay_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_overlay_text_b = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "imgui/core.pyx":6180
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*             # <<<<<<<<<<<<<<
 * 
 *     cimgui.PlotHistogram(
 */
    if (unlikely(__pyx_v_overlay_text_b == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 6180, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v_overlay_text_b); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 6180, __pyx_L1_error)
    __pyx_v_overlay_text_ptr = __pyx_t_4;

    /* "imgui/core.pyx":6178
 *     cdef bytes overlay_text_b
 * 
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  }

  /* "imgui/core.pyx":6183
 * 
 *     cimgui.PlotHistogram(
 *         _bytes(label), &values[0], values_count,             # <<<<<<<<<<<<<<
 *         values_offset,
 *         overlay_text_ptr,
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6183, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 6183, __pyx_L1_error)
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_values.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_values.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 6183, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6187
 *         overlay_text_ptr,
 *         scale_min, scale_max,
 *         _cast_tuple_ImVec2(graph_size),             # <<<<<<<<<<<<<<
 *         stride
 *     )
 */
  __pyx_t_8 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_graph_size); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6187, __pyx_L1_error)

  /* "imgui/core.pyx":6182
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 *     cimgui.PlotHistogram(             # <<<<<<<<<<<<<<
 *         _bytes(label), &values[0], values_count,
 *         values_offset,
 */
  try {
    ImGui::PlotHistogram(__pyx_t_5, (&(*((float const  *) ( /* dim=0 */ (__pyx_v_values.data + __pyx_t_6 * __pyx_v_values.strides[0]) )))), __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text_ptr, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_t_8, __pyx_v_stride);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6182, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imgui/core.pyx":6099
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.plot_histogram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_overlay_text_b);
  __PYX_XDEC_MEMVIEW(&__pyx_v_values, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6191
 *     )
 * 
 * def progress_bar(float fraction, size = (0,0), str overlay = ""):             # <<<<<<<<<<<<<<
 *     """ Show a progress bar
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_267progress_bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_266progress_bar[] = "progress_bar(float fraction, size=(0, 0), str overlay='')\n Show a progress bar\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 200\n\n        imgui.begin(\"Progress bar example\")\n        imgui.progress_bar(0.7, (100,20), \"Overlay text\")\n        imgui.end()\n\n    Args:\n        fraction (float): A floating point number between 0.0 and 1.0\n            0.0 means no progress and 1.0 means progress is completed\n        size : a tuple (width, height) that sets the width and height\n            of the progress bar\n        overlay (str): Optional text that will be shown in the progress bar\n\n    .. wraps::\n            void ProgressBar(\n            float fraction,\n            const ImVec2& size_arg, const char* overlay\n    )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_267progress_bar = {"progress_bar", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_267progress_bar, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_266progress_bar};
static PyObject *__pyx_pw_5imgui_4core_267progress_bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fraction;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_overlay = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("progress_bar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fraction,&__pyx_n_s_size,&__pyx_n_s_overlay,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_tuple__8);
    values[2] = ((PyObject*)__pyx_kp_s__32);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fraction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_overlay);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "progress_bar") < 0)) __PYX_ERR(0, 6191, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fraction = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_fraction == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6191, __pyx_L3_error)
    __pyx_v_size = values[1];
    __pyx_v_overlay = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("progress_bar", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6191, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.progress_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_overlay), (&PyString_Type), 1, "overlay", 1))) __PYX_ERR(0, 6191, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_266progress_bar(__pyx_self, __pyx_v_fraction, __pyx_v_size, __pyx_v_overlay);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_266progress_bar(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_fraction, PyObject *__pyx_v_size, PyObject *__pyx_v_overlay) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("progress_bar", 0);

  /* "imgui/core.pyx":6217
 * 
 *     """
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))             # <<<<<<<<<<<<<<
 * 
 * def set_item_default_focus():
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_size); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6217, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_overlay); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6217, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 6217, __pyx_L1_error)
  try {
    ImGui::ProgressBar(__pyx_v_fraction, __pyx_t_1, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6217, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":6191
 *     )
 * 
 * def progress_bar(float fraction, size = (0,0), str overlay = ""):             # <<<<<<<<<<<<<<
 *     """ Show a progress bar
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.progress_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6219
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))
 * 
 * def set_item_default_focus():             # <<<<<<<<<<<<<<
 *     """Make last item the default focused item of a window.
 *     Please use instead of "if (is_window_appearing()) set_scroll_here()" to signify "default item".
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_269set_item_default_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_268set_item_default_focus[] = "set_item_default_focus()\nMake last item the default focused item of a window.\n    Please use instead of \"if (is_window_appearing()) set_scroll_here()\" to signify \"default item\".\n\n    .. wraps::\n        void SetItemDefaultFocus()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_269set_item_default_focus = {"set_item_default_focus", (PyCFunction)__pyx_pw_5imgui_4core_269set_item_default_focus, METH_NOARGS, __pyx_doc_5imgui_4core_268set_item_default_focus};
static PyObject *__pyx_pw_5imgui_4core_269set_item_default_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_item_default_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_268set_item_default_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_268set_item_default_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_item_default_focus", 0);

  /* "imgui/core.pyx":6226
 *         void SetItemDefaultFocus()
 *     """
 *     cimgui.SetItemDefaultFocus()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetItemDefaultFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6226, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6219
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))
 * 
 * def set_item_default_focus():             # <<<<<<<<<<<<<<
 *     """Make last item the default focused item of a window.
 *     Please use instead of "if (is_window_appearing()) set_scroll_here()" to signify "default item".
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_item_default_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6229
 * 
 * 
 * def set_keyboard_focus_here(int offset = 0):             # <<<<<<<<<<<<<<
 *     """Focus keyboard on the next widget.
 *     Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_271set_keyboard_focus_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_270set_keyboard_focus_here[] = "set_keyboard_focus_here(int offset=0)\nFocus keyboard on the next widget.\n    Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.\n\n    .. wraps::\n        void SetKeyboardFocusHere(int offset = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_271set_keyboard_focus_here = {"set_keyboard_focus_here", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_271set_keyboard_focus_here, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_270set_keyboard_focus_here};
static PyObject *__pyx_pw_5imgui_4core_271set_keyboard_focus_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_offset;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_keyboard_focus_here (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offset,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_keyboard_focus_here") < 0)) __PYX_ERR(0, 6229, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_offset = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6229, __pyx_L3_error)
    } else {
      __pyx_v_offset = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_keyboard_focus_here", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6229, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_keyboard_focus_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_270set_keyboard_focus_here(__pyx_self, __pyx_v_offset);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_270set_keyboard_focus_here(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_keyboard_focus_here", 0);

  /* "imgui/core.pyx":6236
 *         void SetKeyboardFocusHere(int offset = 0)
 *     """
 *     return cimgui.SetKeyboardFocusHere(offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetKeyboardFocusHere(__pyx_v_offset);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6236, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6229
 * 
 * 
 * def set_keyboard_focus_here(int offset = 0):             # <<<<<<<<<<<<<<
 *     """Focus keyboard on the next widget.
 *     Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_keyboard_focus_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6239
 * 
 * 
 * def is_item_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_273is_item_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_272is_item_hovered[] = "is_item_hovered(ImGuiHoveredFlags flags=0)\nCheck if the last item is hovered by mouse.\n\n    Returns:\n        bool: True if item is hovered by mouse, otherwise False.\n\n    .. wraps::\n        bool IsItemHovered(ImGuiHoveredFlags flags = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_273is_item_hovered = {"is_item_hovered", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_273is_item_hovered, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_272is_item_hovered};
static PyObject *__pyx_pw_5imgui_4core_273is_item_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiHoveredFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_hovered (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_item_hovered") < 0)) __PYX_ERR(0, 6239, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiHoveredFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiHoveredFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6240, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiHoveredFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_item_hovered", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6239, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_272is_item_hovered(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_272is_item_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_hovered", 0);

  /* "imgui/core.pyx":6250
 *         bool IsItemHovered(ImGuiHoveredFlags flags = 0)
 *     """
 *     return cimgui.IsItemHovered(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemHovered(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6250, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6239
 * 
 * 
 * def is_item_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6253
 * 
 * 
 * def is_item_focused():             # <<<<<<<<<<<<<<
 *     """Check if the last item is focused
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_275is_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_274is_item_focused[] = "is_item_focused()\nCheck if the last item is focused\n\n    Returns:\n        bool: True if item is focused, otherwise False.\n\n    .. wraps::\n        bool IsItemFocused()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_275is_item_focused = {"is_item_focused", (PyCFunction)__pyx_pw_5imgui_4core_275is_item_focused, METH_NOARGS, __pyx_doc_5imgui_4core_274is_item_focused};
static PyObject *__pyx_pw_5imgui_4core_275is_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_focused (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_274is_item_focused(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_274is_item_focused(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_focused", 0);

  /* "imgui/core.pyx":6262
 *         bool IsItemFocused()
 *     """
 *     return cimgui.IsItemFocused()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemFocused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6262, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6253
 * 
 * 
 * def is_item_focused():             # <<<<<<<<<<<<<<
 *     """Check if the last item is focused
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6265
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_277is_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_276is_item_active[] = "is_item_active()\nWas the last item active? For ex. button being held or text field\n    being edited. Items that don't interact will always return false.\n\n    Returns:\n        bool: True if item is active, otherwise False.\n\n    .. wraps::\n        bool IsItemActive()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_277is_item_active = {"is_item_active", (PyCFunction)__pyx_pw_5imgui_4core_277is_item_active, METH_NOARGS, __pyx_doc_5imgui_4core_276is_item_active};
static PyObject *__pyx_pw_5imgui_4core_277is_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_active (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_276is_item_active(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_276is_item_active(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_active", 0);

  /* "imgui/core.pyx":6275
 *         bool IsItemActive()
 *     """
 *     return cimgui.IsItemActive()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemActive();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6275, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6265
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6278
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_279is_item_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_278is_item_clicked[] = "is_item_clicked(int mouse_button=0)\nWas the last item clicked? For ex. button or node that was\n    just being clicked on.\n\n    Returns:\n        bool: True if item is clicked, otherwise False.\n\n    .. wraps::\n        bool IsItemClicked(int mouse_button = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_279is_item_clicked = {"is_item_clicked", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_279is_item_clicked, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_278is_item_clicked};
static PyObject *__pyx_pw_5imgui_4core_279is_item_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_mouse_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_clicked (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mouse_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_item_clicked") < 0)) __PYX_ERR(0, 6278, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6278, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_item_clicked", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6278, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_item_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_278is_item_clicked(__pyx_self, __pyx_v_mouse_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_278is_item_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_clicked", 0);

  /* "imgui/core.pyx":6288
 *         bool IsItemClicked(int mouse_button = 0)
 *     """
 *     return cimgui.IsItemClicked(mouse_button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemClicked(__pyx_v_mouse_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6288, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6278
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6291
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_281is_item_visible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_280is_item_visible[] = "is_item_visible()\nWas the last item visible? Aka not out of sight due to\n    clipping/scrolling.\n\n    Returns:\n        bool: True if item is visible, otherwise False.\n\n    .. wraps::\n        bool IsItemVisible()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_281is_item_visible = {"is_item_visible", (PyCFunction)__pyx_pw_5imgui_4core_281is_item_visible, METH_NOARGS, __pyx_doc_5imgui_4core_280is_item_visible};
static PyObject *__pyx_pw_5imgui_4core_281is_item_visible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_visible (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_280is_item_visible(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_280is_item_visible(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_visible", 0);

  /* "imgui/core.pyx":6301
 *         bool IsItemVisible()
 *     """
 *     return cimgui.IsItemVisible()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemVisible();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6301, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6291
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6304
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_283is_any_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_282is_any_item_hovered[] = "is_any_item_hovered()\nWas any of the items hovered.\n\n    Returns:\n        bool: True if any item is hovered, otherwise False.\n\n    .. wraps::\n        bool IsAnyItemHovered()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_283is_any_item_hovered = {"is_any_item_hovered", (PyCFunction)__pyx_pw_5imgui_4core_283is_any_item_hovered, METH_NOARGS, __pyx_doc_5imgui_4core_282is_any_item_hovered};
static PyObject *__pyx_pw_5imgui_4core_283is_any_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_hovered (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_282is_any_item_hovered(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_282is_any_item_hovered(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_any_item_hovered", 0);

  /* "imgui/core.pyx":6313
 *         bool IsAnyItemHovered()
 *     """
 *     return cimgui.IsAnyItemHovered()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemHovered();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6313, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6304
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_any_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6316
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_285is_any_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_284is_any_item_active[] = "is_any_item_active()\nWas any of the items active.\n\n    Returns:\n        bool: True if any item is active, otherwise False.\n\n    .. wraps::\n        bool IsAnyItemActive()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_285is_any_item_active = {"is_any_item_active", (PyCFunction)__pyx_pw_5imgui_4core_285is_any_item_active, METH_NOARGS, __pyx_doc_5imgui_4core_284is_any_item_active};
static PyObject *__pyx_pw_5imgui_4core_285is_any_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_active (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_284is_any_item_active(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_284is_any_item_active(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_any_item_active", 0);

  /* "imgui/core.pyx":6325
 *         bool IsAnyItemActive()
 *     """
 *     return cimgui.IsAnyItemActive()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemActive();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6325, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6316
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_any_item_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6328
 * 
 * 
 * def is_any_item_focused():             # <<<<<<<<<<<<<<
 *     """Is any of the items focused.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_287is_any_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_286is_any_item_focused[] = "is_any_item_focused()\nIs any of the items focused.\n\n    Returns:\n        bool: True if any item is focused, otherwise False.\n\n    .. wraps::\n        bool IsAnyItemFocused()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_287is_any_item_focused = {"is_any_item_focused", (PyCFunction)__pyx_pw_5imgui_4core_287is_any_item_focused, METH_NOARGS, __pyx_doc_5imgui_4core_286is_any_item_focused};
static PyObject *__pyx_pw_5imgui_4core_287is_any_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_focused (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_286is_any_item_focused(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_286is_any_item_focused(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_any_item_focused", 0);

  /* "imgui/core.pyx":6337
 *         bool IsAnyItemFocused()
 *     """
 *     return cimgui.IsAnyItemFocused()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemFocused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6337, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6328
 * 
 * 
 * def is_any_item_focused():             # <<<<<<<<<<<<<<
 *     """Is any of the items focused.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_any_item_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6340
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_289get_item_rect_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_288get_item_rect_min[] = "get_item_rect_min()\nGet bounding rect of the last item in screen space.\n\n    Returns:\n        Vec2: item minimum boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetItemRectMin()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_289get_item_rect_min = {"get_item_rect_min", (PyCFunction)__pyx_pw_5imgui_4core_289get_item_rect_min, METH_NOARGS, __pyx_doc_5imgui_4core_288get_item_rect_min};
static PyObject *__pyx_pw_5imgui_4core_289get_item_rect_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_min (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_288get_item_rect_min(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_288get_item_rect_min(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_rect_min", 0);

  /* "imgui/core.pyx":6349
 *         ImVec2 GetItemRectMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectMin())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectMin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6349, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6340
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_item_rect_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6352
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_291get_item_rect_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_290get_item_rect_max[] = "get_item_rect_max()\nGet bounding rect of the last item in screen space.\n\n    Returns:\n        Vec2: item maximum boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetItemRectMax()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_291get_item_rect_max = {"get_item_rect_max", (PyCFunction)__pyx_pw_5imgui_4core_291get_item_rect_max, METH_NOARGS, __pyx_doc_5imgui_4core_290get_item_rect_max};
static PyObject *__pyx_pw_5imgui_4core_291get_item_rect_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_max (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_290get_item_rect_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_290get_item_rect_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_rect_max", 0);

  /* "imgui/core.pyx":6361
 *         ImVec2 GetItemRectMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6361, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6352
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_item_rect_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6364
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_293get_item_rect_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_292get_item_rect_size[] = "get_item_rect_size()\nGet bounding rect of the last item in screen space.\n\n    Returns:\n        Vec2: item boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetItemRectSize()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_293get_item_rect_size = {"get_item_rect_size", (PyCFunction)__pyx_pw_5imgui_4core_293get_item_rect_size, METH_NOARGS, __pyx_doc_5imgui_4core_292get_item_rect_size};
static PyObject *__pyx_pw_5imgui_4core_293get_item_rect_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_292get_item_rect_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_292get_item_rect_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_rect_size", 0);

  /* "imgui/core.pyx":6373
 *         ImVec2 GetItemRectSize()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectSize())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6373, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6364
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_item_rect_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6376
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_295set_item_allow_overlap(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_294set_item_allow_overlap[] = "set_item_allow_overlap()\nAllow last item to be overlapped by a subsequent item.\n    Sometimes useful with invisible buttons, selectables, etc.\n    to catch unused area.\n\n    .. wraps::\n        void SetItemAllowOverlap()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_295set_item_allow_overlap = {"set_item_allow_overlap", (PyCFunction)__pyx_pw_5imgui_4core_295set_item_allow_overlap, METH_NOARGS, __pyx_doc_5imgui_4core_294set_item_allow_overlap};
static PyObject *__pyx_pw_5imgui_4core_295set_item_allow_overlap(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_item_allow_overlap (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_294set_item_allow_overlap(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_294set_item_allow_overlap(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_item_allow_overlap", 0);

  /* "imgui/core.pyx":6384
 *         void SetItemAllowOverlap()
 *     """
 *     cimgui.SetItemAllowOverlap()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetItemAllowOverlap();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6384, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6376
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_item_allow_overlap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6387
 * 
 * 
 * def is_window_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_297is_window_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_296is_window_hovered[] = "is_window_hovered(ImGuiHoveredFlags flags=0)\nIs current window hovered and hoverable (not blocked by a popup).\n    Differentiate child windows from each others.\n\n    Returns:\n        bool: True if current window is hovered, otherwise False.\n\n    .. wraps::\n        bool IsWindowHovered(ImGuiFocusedFlags flags = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_297is_window_hovered = {"is_window_hovered", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_297is_window_hovered, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_296is_window_hovered};
static PyObject *__pyx_pw_5imgui_4core_297is_window_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiHoveredFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_hovered (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_window_hovered") < 0)) __PYX_ERR(0, 6387, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiHoveredFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiHoveredFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6388, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiHoveredFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_window_hovered", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6387, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_window_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_296is_window_hovered(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_296is_window_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_hovered", 0);

  /* "imgui/core.pyx":6399
 *         bool IsWindowHovered(ImGuiFocusedFlags flags = 0)
 *     """
 *     return cimgui.IsWindowHovered(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowHovered(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6399, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6387
 * 
 * 
 * def is_window_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_window_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6402
 * 
 * 
 * def is_window_focused(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_299is_window_focused(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_298is_window_focused[] = "is_window_focused(ImGuiHoveredFlags flags=0)\nIs current window focused.\n\n    Returns:\n        bool: True if current window is on focus, otherwise False.\n\n    .. wraps::\n        bool IsWindowFocused(ImGuiFocusedFlags flags = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_299is_window_focused = {"is_window_focused", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_299is_window_focused, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_298is_window_focused};
static PyObject *__pyx_pw_5imgui_4core_299is_window_focused(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiHoveredFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_focused (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_window_focused") < 0)) __PYX_ERR(0, 6402, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiHoveredFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiHoveredFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6403, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiHoveredFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_window_focused", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6402, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_window_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_298is_window_focused(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_298is_window_focused(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_focused", 0);

  /* "imgui/core.pyx":6413
 *         bool IsWindowFocused(ImGuiFocusedFlags flags = 0)
 *     """
 *     return cimgui.IsWindowFocused(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowFocused(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6413, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6402
 * 
 * 
 * def is_window_focused(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_window_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6416
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_301is_rect_visible(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_300is_rect_visible[] = "is_rect_visible(float size_width, float size_height)\nTest if a rectangle of the given size, starting from the cursor\n    position is visible (not clipped).\n\n    Args:\n        size_width (float): width of the rect\n        size_height (float): height of the rect\n\n    Returns:\n        bool: True if rect is visible, otherwise False.\n\n    .. wraps::\n        bool IsRectVisible(const ImVec2& size)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_301is_rect_visible = {"is_rect_visible", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_301is_rect_visible, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_300is_rect_visible};
static PyObject *__pyx_pw_5imgui_4core_301is_rect_visible(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_size_width;
  float __pyx_v_size_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_rect_visible (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size_width,&__pyx_n_s_size_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_rect_visible", 1, 2, 2, 1); __PYX_ERR(0, 6416, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_rect_visible") < 0)) __PYX_ERR(0, 6416, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_size_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_size_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6416, __pyx_L3_error)
    __pyx_v_size_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_size_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6416, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_rect_visible", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6416, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_rect_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_300is_rect_visible(__pyx_self, __pyx_v_size_width, __pyx_v_size_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_300is_rect_visible(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_size_width, float __pyx_v_size_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_rect_visible", 0);

  /* "imgui/core.pyx":6430
 *         bool IsRectVisible(const ImVec2& size)
 *     """
 *     return cimgui.IsRectVisible(_cast_args_ImVec2(size_width, size_height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_size_width, __pyx_v_size_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6430, __pyx_L1_error)
  try {
    __pyx_t_2 = ImGui::IsRectVisible(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6430, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6416
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.is_rect_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6433
 * 
 * 
 * def get_style_color_name(int index):             # <<<<<<<<<<<<<<
 *     """Get the style color name for a given ImGuiCol index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_303get_style_color_name(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_5imgui_4core_302get_style_color_name[] = "get_style_color_name(int index)\nGet the style color name for a given ImGuiCol index.\n\n    .. wraps::\n        const char* GetStyleColorName(ImGuiCol idx)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_303get_style_color_name = {"get_style_color_name", (PyCFunction)__pyx_pw_5imgui_4core_303get_style_color_name, METH_O, __pyx_doc_5imgui_4core_302get_style_color_name};
static PyObject *__pyx_pw_5imgui_4core_303get_style_color_name(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style_color_name (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6433, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_style_color_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_302get_style_color_name(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_302get_style_color_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  char const *__pyx_v_c_string;
  CYTHON_UNUSED PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style_color_name", 0);

  /* "imgui/core.pyx":6439
 *         const char* GetStyleColorName(ImGuiCol idx)
 *     """
 *     cdef const char* c_string = cimgui.GetStyleColorName(index)             # <<<<<<<<<<<<<<
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")
 */
  try {
    __pyx_t_1 = ImGui::GetStyleColorName(__pyx_v_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6439, __pyx_L1_error)
  }
  __pyx_v_c_string = __pyx_t_1;

  /* "imgui/core.pyx":6440
 *     """
 *     cdef const char* c_string = cimgui.GetStyleColorName(index)
 *     cdef bytes py_string = c_string             # <<<<<<<<<<<<<<
 *     return c_string.decode("utf-8")
 * 
 */
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_string = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":6441
 *     cdef const char* c_string = cimgui.GetStyleColorName(index)
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6433
 * 
 * 
 * def get_style_color_name(int index):             # <<<<<<<<<<<<<<
 *     """Get the style color name for a given ImGuiCol index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_style_color_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6444
 * 
 * 
 * def get_time():             # <<<<<<<<<<<<<<
 *     """Seconds since program start.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_305get_time(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_304get_time[] = "get_time()\nSeconds since program start.\n\n    Returns:\n        float: the time (seconds since program start)\n\n    .. wraps::\n        float GetTime()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_305get_time = {"get_time", (PyCFunction)__pyx_pw_5imgui_4core_305get_time, METH_NOARGS, __pyx_doc_5imgui_4core_304get_time};
static PyObject *__pyx_pw_5imgui_4core_305get_time(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_time (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_304get_time(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_304get_time(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_time", 0);

  /* "imgui/core.pyx":6453
 *         float GetTime()
 *     """
 *     return cimgui.GetTime()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetTime();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6453, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6444
 * 
 * 
 * def get_time():             # <<<<<<<<<<<<<<
 *     """Seconds since program start.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6456
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_307is_mouse_hovering_rect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_306is_mouse_hovering_rect[] = "is_mouse_hovering_rect(float r_min_x, float r_min_y, float r_max_x, float r_max_y, bool clip=True)\nTest if mouse is hovering rectangle with given coordinates.\n\n    Args:\n        r_min_x, r_min_y (float): x,y coordinate of the upper-left corner\n        r_max_x, r_max_y (float): x,y coordinate of the lower-right corner\n\n    Returns:\n        bool: True if mouse is hovering the rectangle.\n\n    .. wraps::\n        bool IsMouseHoveringRect(\n            const ImVec2& r_min,\n            const ImVec2& r_max,\n            bool clip = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_307is_mouse_hovering_rect = {"is_mouse_hovering_rect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_307is_mouse_hovering_rect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_306is_mouse_hovering_rect};
static PyObject *__pyx_pw_5imgui_4core_307is_mouse_hovering_rect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_r_min_x;
  float __pyx_v_r_min_y;
  float __pyx_v_r_max_x;
  float __pyx_v_r_max_y;
  bool __pyx_v_clip;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_hovering_rect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r_min_x,&__pyx_n_s_r_min_y,&__pyx_n_s_r_max_x,&__pyx_n_s_r_max_y,&__pyx_n_s_clip,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_min_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_min_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 1); __PYX_ERR(0, 6456, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_max_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 2); __PYX_ERR(0, 6456, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_max_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 3); __PYX_ERR(0, 6456, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clip);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_hovering_rect") < 0)) __PYX_ERR(0, 6456, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_r_min_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_r_min_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6457, __pyx_L3_error)
    __pyx_v_r_min_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r_min_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6457, __pyx_L3_error)
    __pyx_v_r_max_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_r_max_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6458, __pyx_L3_error)
    __pyx_v_r_max_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_r_max_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6458, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_clip = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_clip == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6459, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":6459
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 *     bool clip=True             # <<<<<<<<<<<<<<
 * ):
 *     """Test if mouse is hovering rectangle with given coordinates.
 */
      __pyx_v_clip = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6456, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_hovering_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_306is_mouse_hovering_rect(__pyx_self, __pyx_v_r_min_x, __pyx_v_r_min_y, __pyx_v_r_max_x, __pyx_v_r_max_y, __pyx_v_clip);

  /* "imgui/core.pyx":6456
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_306is_mouse_hovering_rect(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r_min_x, float __pyx_v_r_min_y, float __pyx_v_r_max_x, float __pyx_v_r_max_y, bool __pyx_v_clip) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_hovering_rect", 0);

  /* "imgui/core.pyx":6477
 *         )
 *     """
 *     return cimgui.IsMouseHoveringRect(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":6478
 *     """
 *     return cimgui.IsMouseHoveringRect(
 *         _cast_args_ImVec2(r_min_x, r_min_y),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 *         clip
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_r_min_x, __pyx_v_r_min_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6478, __pyx_L1_error)

  /* "imgui/core.pyx":6479
 *     return cimgui.IsMouseHoveringRect(
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),             # <<<<<<<<<<<<<<
 *         clip
 *     )
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_r_max_x, __pyx_v_r_max_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6479, __pyx_L1_error)

  /* "imgui/core.pyx":6477
 *         )
 *     """
 *     return cimgui.IsMouseHoveringRect(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 */
  try {
    __pyx_t_3 = ImGui::IsMouseHoveringRect(__pyx_t_1, __pyx_t_2, __pyx_v_clip);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6477, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6456
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core.is_mouse_hovering_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6484
 * 
 * 
 * def is_mouse_double_clicked(int button = 0):             # <<<<<<<<<<<<<<
 *     """Return True if mouse was double-clicked.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_309is_mouse_double_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_308is_mouse_double_clicked[] = "is_mouse_double_clicked(int button=0)\nReturn True if mouse was double-clicked.\n\n    **Note:** A double-click returns false in IsMouseClicked().\n\n    Args:\n        button (int): mouse button index.\n\n    Returns:\n        bool: if mouse is double clicked.\n\n    .. wraps::\n         bool IsMouseDoubleClicked(int button);\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_309is_mouse_double_clicked = {"is_mouse_double_clicked", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_309is_mouse_double_clicked, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_308is_mouse_double_clicked};
static PyObject *__pyx_pw_5imgui_4core_309is_mouse_double_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_double_clicked (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_double_clicked") < 0)) __PYX_ERR(0, 6484, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6484, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_double_clicked", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6484, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_double_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_308is_mouse_double_clicked(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_308is_mouse_double_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_double_clicked", 0);

  /* "imgui/core.pyx":6498
 *          bool IsMouseDoubleClicked(int button);
 *     """
 *     return cimgui.IsMouseDoubleClicked(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseDoubleClicked(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6498, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6484
 * 
 * 
 * def is_mouse_double_clicked(int button = 0):             # <<<<<<<<<<<<<<
 *     """Return True if mouse was double-clicked.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_double_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6501
 * 
 * 
 * def is_mouse_clicked(int button = 0, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was clicked this frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_311is_mouse_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_310is_mouse_clicked[] = "is_mouse_clicked(int button=0, bool repeat=False)\nReturns if the mouse was clicked this frame.\n\n    Args:\n        button (int): mouse button index.\n        repeat (float):\n\n    Returns:\n        bool: if the mouse was clicked this frame.\n\n    .. wraps::\n        bool IsMouseClicked(int button, bool repeat = false)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_311is_mouse_clicked = {"is_mouse_clicked", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_311is_mouse_clicked, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_310is_mouse_clicked};
static PyObject *__pyx_pw_5imgui_4core_311is_mouse_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  bool __pyx_v_repeat;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_clicked (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_repeat,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repeat);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_clicked") < 0)) __PYX_ERR(0, 6501, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6501, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_repeat = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_repeat == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6501, __pyx_L3_error)
    } else {
      __pyx_v_repeat = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_clicked", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6501, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_310is_mouse_clicked(__pyx_self, __pyx_v_button, __pyx_v_repeat);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_310is_mouse_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, bool __pyx_v_repeat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_clicked", 0);

  /* "imgui/core.pyx":6514
 *         bool IsMouseClicked(int button, bool repeat = false)
 *     """
 *     return cimgui.IsMouseClicked(button, repeat)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseClicked(__pyx_v_button, __pyx_v_repeat);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6514, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6501
 * 
 * 
 * def is_mouse_clicked(int button = 0, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was clicked this frame.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6517
 * 
 * 
 * def is_mouse_released(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was released this frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_313is_mouse_released(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_312is_mouse_released[] = "is_mouse_released(int button=0)\nReturns if the mouse was released this frame.\n\n    Args:\n        button (int): mouse button index.\n\n    Returns:\n        bool: if the mouse was released this frame.\n\n    .. wraps::\n        bool IsMouseReleased(int button)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_313is_mouse_released = {"is_mouse_released", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_313is_mouse_released, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_312is_mouse_released};
static PyObject *__pyx_pw_5imgui_4core_313is_mouse_released(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_released (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_released") < 0)) __PYX_ERR(0, 6517, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6517, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_released", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6517, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_released", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_312is_mouse_released(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_312is_mouse_released(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_released", 0);

  /* "imgui/core.pyx":6529
 *         bool IsMouseReleased(int button)
 *     """
 *     return cimgui.IsMouseReleased(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseReleased(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6529, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6517
 * 
 * 
 * def is_mouse_released(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was released this frame.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_released", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6532
 * 
 * 
 * def is_mouse_down(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse is down.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_315is_mouse_down(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_314is_mouse_down[] = "is_mouse_down(int button=0)\nReturns if the mouse is down.\n\n    Args:\n        button (int): mouse button index.\n\n    Returns:\n        bool: if the mouse is down.\n\n    .. wraps::\n        bool IsMouseDown(int button)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_315is_mouse_down = {"is_mouse_down", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_315is_mouse_down, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_314is_mouse_down};
static PyObject *__pyx_pw_5imgui_4core_315is_mouse_down(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_down (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_down") < 0)) __PYX_ERR(0, 6532, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6532, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_down", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_down", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_314is_mouse_down(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_314is_mouse_down(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_down", 0);

  /* "imgui/core.pyx":6544
 *         bool IsMouseDown(int button)
 *     """
 *     return cimgui.IsMouseDown(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseDown(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6544, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6532
 * 
 * 
 * def is_mouse_down(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse is down.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_down", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6547
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_317is_mouse_dragging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_316is_mouse_dragging[] = "is_mouse_dragging(int button=0, float lock_threshold=-1.0)\nReturns if mouse is dragging.\n\n    Args:\n        button (int): mouse button index.\n        lock_threshold (float): if less than -1.0\n            uses io.MouseDraggingThreshold.\n\n    Returns:\n        bool: if mouse is dragging.\n\n    .. wraps::\n        bool IsMouseDragging(int button = 0, float lock_threshold = -1.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_317is_mouse_dragging = {"is_mouse_dragging", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_317is_mouse_dragging, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_316is_mouse_dragging};
static PyObject *__pyx_pw_5imgui_4core_317is_mouse_dragging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  float __pyx_v_lock_threshold;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_dragging (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_lock_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lock_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_dragging") < 0)) __PYX_ERR(0, 6547, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6547, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_lock_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lock_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6547, __pyx_L3_error)
    } else {
      __pyx_v_lock_threshold = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_dragging", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6547, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_dragging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_316is_mouse_dragging(__pyx_self, __pyx_v_button, __pyx_v_lock_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_316is_mouse_dragging(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_dragging", 0);

  /* "imgui/core.pyx":6561
 *         bool IsMouseDragging(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return cimgui.IsMouseDragging(button, lock_threshold)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseDragging(__pyx_v_button, __pyx_v_lock_threshold);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6561, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6547
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_dragging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6564
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_319get_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_318get_mouse_drag_delta[] = "get_mouse_drag_delta(int button=0, float lock_threshold=-1.0)\nDragging amount since clicking.\n\n    Args:\n        button (int): mouse button index.\n        lock_threshold (float): if less than -1.0\n            uses io.MouseDraggingThreshold.\n\n    Returns:\n        Vec2: mouse position two-tuple ``(x, y)``\n\n    .. wraps::\n        ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_319get_mouse_drag_delta = {"get_mouse_drag_delta", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_319get_mouse_drag_delta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_318get_mouse_drag_delta};
static PyObject *__pyx_pw_5imgui_4core_319get_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  float __pyx_v_lock_threshold;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_drag_delta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_lock_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lock_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_mouse_drag_delta") < 0)) __PYX_ERR(0, 6564, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6564, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_lock_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lock_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6564, __pyx_L3_error)
    } else {
      __pyx_v_lock_threshold = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_mouse_drag_delta", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6564, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_318get_mouse_drag_delta(__pyx_self, __pyx_v_button, __pyx_v_lock_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_318get_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mouse_drag_delta", 0);

  /* "imgui/core.pyx":6578
 *         ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMouseDragDelta(button, lock_threshold)
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":6579
 *     """
 *     return _cast_ImVec2_tuple(
 *         cimgui.GetMouseDragDelta(button, lock_threshold)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetMouseDragDelta(__pyx_v_button, __pyx_v_lock_threshold);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6579, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6578
 *         ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMouseDragDelta(button, lock_threshold)
 *     )
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6564
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6583
 * 
 * 
 * def get_mouse_pos():             # <<<<<<<<<<<<<<
 *     """Current mouse position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_321get_mouse_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_320get_mouse_pos[] = "get_mouse_pos()\nCurrent mouse position.\n\n    Returns:\n        Vec2: mouse position two-tuple ``(x, y)``\n\n    .. wraps::\n        ImVec2 GetMousePos()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_321get_mouse_pos = {"get_mouse_pos", (PyCFunction)__pyx_pw_5imgui_4core_321get_mouse_pos, METH_NOARGS, __pyx_doc_5imgui_4core_320get_mouse_pos};
static PyObject *__pyx_pw_5imgui_4core_321get_mouse_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_320get_mouse_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_320get_mouse_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mouse_pos", 0);

  /* "imgui/core.pyx":6592
 *         ImVec2 GetMousePos()
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMousePos()
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":6593
 *     """
 *     return _cast_ImVec2_tuple(
 *         cimgui.GetMousePos()             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetMousePos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6593, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6592
 *         ImVec2 GetMousePos()
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMousePos()
 *     )
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6583
 * 
 * 
 * def get_mouse_pos():             # <<<<<<<<<<<<<<
 *     """Current mouse position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_mouse_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6599
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_323reset_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_322reset_mouse_drag_delta[] = "reset_mouse_drag_delta(int button=0)\nReset the mouse dragging delta.\n\n    Args:\n        button (int): mouse button index.\n\n    .. wraps::\n        void ResetMouseDragDelta(int button = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_323reset_mouse_drag_delta = {"reset_mouse_drag_delta", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_323reset_mouse_drag_delta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_322reset_mouse_drag_delta};
static PyObject *__pyx_pw_5imgui_4core_323reset_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_mouse_drag_delta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset_mouse_drag_delta") < 0)) __PYX_ERR(0, 6599, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6599, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_mouse_drag_delta", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6599, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.reset_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_322reset_mouse_drag_delta(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_322reset_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset_mouse_drag_delta", 0);

  /* "imgui/core.pyx":6608
 *         void ResetMouseDragDelta(int button = 0)
 *     """
 *     cimgui.ResetMouseDragDelta(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ResetMouseDragDelta(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6608, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6599
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.reset_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6611
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_325get_mouse_cursor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_324get_mouse_cursor[] = "get_mouse_cursor()\nReturn the mouse cursor id.\n\n    .. wraps::\n        ImGuiMouseCursor GetMouseCursor()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_325get_mouse_cursor = {"get_mouse_cursor", (PyCFunction)__pyx_pw_5imgui_4core_325get_mouse_cursor, METH_NOARGS, __pyx_doc_5imgui_4core_324get_mouse_cursor};
static PyObject *__pyx_pw_5imgui_4core_325get_mouse_cursor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_cursor (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_324get_mouse_cursor(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_324get_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiMouseCursor __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mouse_cursor", 0);

  /* "imgui/core.pyx":6617
 *         ImGuiMouseCursor GetMouseCursor()
 *     """
 *     return cimgui.GetMouseCursor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetMouseCursor();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6617, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiMouseCursor(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6611
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6620
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_327set_mouse_cursor(PyObject *__pyx_self, PyObject *__pyx_arg_mouse_cursor_type); /*proto*/
static char __pyx_doc_5imgui_4core_326set_mouse_cursor[] = "set_mouse_cursor(ImGuiMouseCursor mouse_cursor_type)\nSet the mouse cursor id.\n\n    Args:\n        mouse_cursor_type (ImGuiMouseCursor): mouse cursor type.\n\n    .. wraps::\n        void SetMouseCursor(ImGuiMouseCursor type)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_327set_mouse_cursor = {"set_mouse_cursor", (PyCFunction)__pyx_pw_5imgui_4core_327set_mouse_cursor, METH_O, __pyx_doc_5imgui_4core_326set_mouse_cursor};
static PyObject *__pyx_pw_5imgui_4core_327set_mouse_cursor(PyObject *__pyx_self, PyObject *__pyx_arg_mouse_cursor_type) {
  ImGuiMouseCursor __pyx_v_mouse_cursor_type;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mouse_cursor (wrapper)", 0);
  assert(__pyx_arg_mouse_cursor_type); {
    __pyx_v_mouse_cursor_type = __Pyx_PyInt_As_ImGuiMouseCursor(__pyx_arg_mouse_cursor_type); if (unlikely((__pyx_v_mouse_cursor_type == ((ImGuiMouseCursor)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6620, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_326set_mouse_cursor(__pyx_self, ((ImGuiMouseCursor)__pyx_v_mouse_cursor_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_326set_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self, ImGuiMouseCursor __pyx_v_mouse_cursor_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_mouse_cursor", 0);

  /* "imgui/core.pyx":6629
 *         void SetMouseCursor(ImGuiMouseCursor type)
 *     """
 *     return cimgui.SetMouseCursor(mouse_cursor_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetMouseCursor(__pyx_v_mouse_cursor_type);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6629, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6620
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6632
 * 
 * 
 * def set_scroll_here(float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll here.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_329set_scroll_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_328set_scroll_here[] = "set_scroll_here(float center_y_ratio=0.5)\nSet scroll here.\n\n    adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.\n\n    Args:\n        float center_y_ratio = 0.5f\n\n    .. wraps::\n        void SetScrollHere(float center_y_ratio = 0.5f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_329set_scroll_here = {"set_scroll_here", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_329set_scroll_here, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_328set_scroll_here};
static PyObject *__pyx_pw_5imgui_4core_329set_scroll_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_center_y_ratio;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_here (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_center_y_ratio,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center_y_ratio);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_scroll_here") < 0)) __PYX_ERR(0, 6632, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_center_y_ratio = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_center_y_ratio == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6632, __pyx_L3_error)
    } else {
      __pyx_v_center_y_ratio = ((float)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_scroll_here", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6632, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_scroll_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_328set_scroll_here(__pyx_self, __pyx_v_center_y_ratio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_328set_scroll_here(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_center_y_ratio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_here", 0);

  /* "imgui/core.pyx":6643
 *         void SetScrollHere(float center_y_ratio = 0.5f)
 *     """
 *     return cimgui.SetScrollHere(center_y_ratio)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetScrollHere(__pyx_v_center_y_ratio);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6643, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6632
 * 
 * 
 * def set_scroll_here(float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll here.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_scroll_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6646
 * 
 * 
 * def set_scroll_from_pos_y(float pos_y, float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll from position Y
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_331set_scroll_from_pos_y(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_330set_scroll_from_pos_y[] = "set_scroll_from_pos_y(float pos_y, float center_y_ratio=0.5)\nSet scroll from position Y\n\n    adjust scrolling amount to make given position valid. use GetCursorPos() or GetCursorStartPos()+offset to get valid positions.\n\n    Args:\n        float pos_y\n        float center_y_ratio = 0.5f\n\n    .. wraps::\n        void SetScrollFromPosY(float pos_y, float center_y_ratio = 0.5f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_331set_scroll_from_pos_y = {"set_scroll_from_pos_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_331set_scroll_from_pos_y, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_330set_scroll_from_pos_y};
static PyObject *__pyx_pw_5imgui_4core_331set_scroll_from_pos_y(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_pos_y;
  float __pyx_v_center_y_ratio;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_from_pos_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos_y,&__pyx_n_s_center_y_ratio,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center_y_ratio);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_scroll_from_pos_y") < 0)) __PYX_ERR(0, 6646, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pos_y = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_pos_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6646, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_center_y_ratio = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_center_y_ratio == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6646, __pyx_L3_error)
    } else {
      __pyx_v_center_y_ratio = ((float)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_scroll_from_pos_y", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6646, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_scroll_from_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_330set_scroll_from_pos_y(__pyx_self, __pyx_v_pos_y, __pyx_v_center_y_ratio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_330set_scroll_from_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_pos_y, float __pyx_v_center_y_ratio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_from_pos_y", 0);

  /* "imgui/core.pyx":6658
 *         void SetScrollFromPosY(float pos_y, float center_y_ratio = 0.5f)
 *     """
 *     return cimgui.SetScrollFromPosY(pos_y, center_y_ratio)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetScrollFromPosY(__pyx_v_pos_y, __pyx_v_center_y_ratio);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6658, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6646
 * 
 * 
 * def set_scroll_from_pos_y(float pos_y, float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll from position Y
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_scroll_from_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6661
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_333push_font(PyObject *__pyx_self, PyObject *__pyx_v_font); /*proto*/
static char __pyx_doc_5imgui_4core_332push_font[] = "push_font(_Font font)\nPush font on a stack.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 320\n\n        io = imgui.get_io()\n\n        new_font = io.fonts.add_font_from_file_ttf(\n            \"DroidSans.ttf\", 20,\n        )\n        impl.refresh_font_texture()\n\n        # later in frame code\n\n        imgui.begin(\"Default Window\")\n\n        imgui.text(\"Text displayed using default font\")\n\n        imgui.push_font(new_font)\n        imgui.text(\"Text displayed using custom font\")\n        imgui.pop_font()\n\n        imgui.end()\n\n    **Note:** Pushed fonts should be poped with :func:`pop_font()` within the\n    same frame. In order to avoid manual push/pop functions you can use the\n    :func:`font()` context manager.\n\n    Args:\n        font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.\n\n    .. wraps::\n        void PushFont(ImFont*)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_333push_font = {"push_font", (PyCFunction)__pyx_pw_5imgui_4core_333push_font, METH_O, __pyx_doc_5imgui_4core_332push_font};
static PyObject *__pyx_pw_5imgui_4core_333push_font(PyObject *__pyx_self, PyObject *__pyx_v_font) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_font (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_font), __pyx_ptype_5imgui_4core__Font, 1, "font", 0))) __PYX_ERR(0, 6661, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_332push_font(__pyx_self, ((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_font));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_332push_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_font", 0);

  /* "imgui/core.pyx":6698
 *         void PushFont(ImFont*)
 *     """
 *     cimgui.PushFont(font._ptr)             # <<<<<<<<<<<<<<
 * 
 * def pop_font():
 */
  try {
    ImGui::PushFont(__pyx_v_font->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6698, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6661
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6700
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_335pop_font(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_334pop_font[] = "pop_font()\nPop font on a stack.\n\n    For example usage see :func:`push_font()`.\n\n    Args:\n        font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.\n\n    .. wraps::\n        void PopFont()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_335pop_font = {"pop_font", (PyCFunction)__pyx_pw_5imgui_4core_335pop_font, METH_NOARGS, __pyx_doc_5imgui_4core_334pop_font};
static PyObject *__pyx_pw_5imgui_4core_335pop_font(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_font (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_334pop_font(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_334pop_font(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_font", 0);

  /* "imgui/core.pyx":6711
 *         void PopFont()
 *     """
 *     cimgui.PopFont()             # <<<<<<<<<<<<<<
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):
 */
  try {
    ImGui::PopFont();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6711, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6700
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6713
 *     cimgui.PopFont()
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):             # <<<<<<<<<<<<<<
 *     """Calculate text size.
 *     Text can be multi-line.
 */

static PyObject *__pyx_pw_5imgui_4core_337calc_text_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_calc_text_size(PyObject *__pyx_v_text, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_calc_text_size *__pyx_optional_args) {
  bool __pyx_v_hide_text_after_double_hash = ((bool)0);
  float __pyx_v_wrap_width = __pyx_k__57;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calc_text_size", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hide_text_after_double_hash = __pyx_optional_args->hide_text_after_double_hash;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_wrap_width = __pyx_optional_args->wrap_width;
      }
    }
  }

  /* "imgui/core.pyx":6741
 *         CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.CalcTextSize(
 *             _bytes(text),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":6743
 *     return _cast_ImVec2_tuple(
 *         cimgui.CalcTextSize(
 *             _bytes(text),             # <<<<<<<<<<<<<<
 *             NULL,
 *             hide_text_after_double_hash,
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6743, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 6743, __pyx_L1_error)

  /* "imgui/core.pyx":6742
 *     """
 *     return _cast_ImVec2_tuple(
 *         cimgui.CalcTextSize(             # <<<<<<<<<<<<<<
 *             _bytes(text),
 *             NULL,
 */
  try {
    __pyx_t_3 = ImGui::CalcTextSize(__pyx_t_2, NULL, __pyx_v_hide_text_after_double_hash, __pyx_v_wrap_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6742, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":6741
 *         CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.CalcTextSize(
 *             _bytes(text),
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6713
 *     cimgui.PopFont()
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):             # <<<<<<<<<<<<<<
 *     """Calculate text size.
 *     Text can be multi-line.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.calc_text_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_337calc_text_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_336calc_text_size[] = "calc_text_size(str text, bool hide_text_after_double_hash=False, float wrap_width=-1.0)\nCalculate text size.\n    Text can be multi-line.\n    Optionally ignore text after a ## marker.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n        :height: 100\n\n        imgui.begin(\"Text size calculation\")\n        text_content = \"This is a ##text##!\"\n        text_size1 = imgui.calc_text_size(text_content)\n        imgui.text('\"%s\" has size %ix%i' % (text_content, text_size1[0], text_size1[1]))\n        text_size2 = imgui.calc_text_size(text_content, True)\n        imgui.text('\"%s\" has size %ix%i' % (text_content, text_size2[0], text_size2[1]))\n        text_size3 = imgui.calc_text_size(text_content, False, 30.0)\n        imgui.text('\"%s\" has size %ix%i' % (text_content, text_size3[0], text_size3[1]))\n        imgui.end()\n\n    Args:\n        text (str): text\n        hide_text_after_double_hash (bool): if True, text after '##' is ignored\n        wrap_width (float): if > 0.0 calculate size using text wrapping\n\n    .. wraps::\n        CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)\n    ";
static PyObject *__pyx_pw_5imgui_4core_337calc_text_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  bool __pyx_v_hide_text_after_double_hash;
  float __pyx_v_wrap_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_text_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_hide_text_after_double_hash,&__pyx_n_s_wrap_width,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hide_text_after_double_hash);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_width);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_text_size") < 0)) __PYX_ERR(0, 6713, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_hide_text_after_double_hash = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_hide_text_after_double_hash == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6713, __pyx_L3_error)
    } else {
      __pyx_v_hide_text_after_double_hash = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_wrap_width = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_wrap_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6713, __pyx_L3_error)
    } else {
      __pyx_v_wrap_width = __pyx_k__57;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_text_size", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6713, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.calc_text_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 6713, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_336calc_text_size(__pyx_self, __pyx_v_text, __pyx_v_hide_text_after_double_hash, __pyx_v_wrap_width);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_336calc_text_size(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, bool __pyx_v_hide_text_after_double_hash, float __pyx_v_wrap_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_calc_text_size __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calc_text_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.hide_text_after_double_hash = __pyx_v_hide_text_after_double_hash;
  __pyx_t_2.wrap_width = __pyx_v_wrap_width;
  __pyx_t_1 = __pyx_f_5imgui_4core_calc_text_size(__pyx_v_text, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.calc_text_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6750
 *     )
 * 
 * cpdef push_style_var(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     """Push style variable on stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_339push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_var(ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  ImVec2 __pyx_t_13;
  double __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_var", 0);

  /* "imgui/core.pyx":6783
 *         PushStyleVar(ImGuiStyleVar idx, float val)
 *     """
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiStyleVar_Count_);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":6784
 *     """
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):
 *         warnings.warn("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 6784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar(__pyx_v_variable); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 6784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "imgui/core.pyx":6785
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "imgui/core.pyx":6783
 *         PushStyleVar(ImGuiStyleVar idx, float val)
 *     """
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  }

  /* "imgui/core.pyx":6787
 *         return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    /*try:*/ {

      /* "imgui/core.pyx":6788
 * 
 *     try:
 *         if isinstance(value, (tuple, list)):             # <<<<<<<<<<<<<<
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 */
      __pyx_t_1 = PyTuple_Check(__pyx_v_value); 
      __pyx_t_12 = (__pyx_t_1 != 0);
      if (!__pyx_t_12) {
      } else {
        __pyx_t_2 = __pyx_t_12;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_12 = PyList_Check(__pyx_v_value); 
      __pyx_t_1 = (__pyx_t_12 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L11_bool_binop_done:;
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "imgui/core.pyx":6789
 *     try:
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))             # <<<<<<<<<<<<<<
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))
 */
        __pyx_t_13 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6789, __pyx_L4_error)
        try {
          ImGui::PushStyleVar(__pyx_v_variable, __pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 6789, __pyx_L4_error)
        }

        /* "imgui/core.pyx":6788
 * 
 *     try:
 *         if isinstance(value, (tuple, list)):             # <<<<<<<<<<<<<<
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 */
        goto __pyx_L10;
      }

      /* "imgui/core.pyx":6791
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))             # <<<<<<<<<<<<<<
 *     except ValueError:
 *         raise ValueError(
 */
      /*else*/ {
        __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_v_value); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6791, __pyx_L4_error)
        try {
          ImGui::PushStyleVar(__pyx_v_variable, __pyx_t_14);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 6791, __pyx_L4_error)
        }
      }
      __pyx_L10:;

      /* "imgui/core.pyx":6787
 *         return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
    }

    /* "imgui/core.pyx":6797
 *         )
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else:*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L7_except_return;
    }
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "imgui/core.pyx":6792
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Style value must be float or two-elements list/tuple"
 */
    __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_15) {
      __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 6792, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "imgui/core.pyx":6793
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Style value must be float or two-elements list/tuple"
 *         )
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 6793, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 6793, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "imgui/core.pyx":6787
 *         return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L1_error;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L0;
  }

  /* "imgui/core.pyx":6750
 *     )
 * 
 * cpdef push_style_var(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     """Push style variable on stack.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_339push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_338push_style_var[] = "push_style_var(ImGuiStyleVar variable, value)\nPush style variable on stack.\n\n    This function accepts both float and float two-tuples as ``value``\n    argument. ImGui core implementation will verify if passed value has\n    type compatibile with given style variable. If not, it will raise\n    exception.\n\n    **Note:** variables pushed on stack need to be poped using\n    :func:`pop_style_var()` until the end of current frame. This\n    implementation guards you from segfaults caused by redundant stack pops\n    (raises exception if this happens) but generally it is safer and easier to\n    use :func:`styled` or :func:`istyled` context managers.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 200\n        :height: 80\n\n        imgui.begin(\"Example: style variables\")\n        imgui.push_style_var(imgui.STYLE_ALPHA, 0.2)\n        imgui.text(\"Alpha text\")\n        imgui.pop_style_var(1)\n        imgui.end()\n\n    Args:\n        variable: imgui style variable constant\n        value (float or two-tuple): style variable value\n\n\n    .. wraps::\n        PushStyleVar(ImGuiStyleVar idx, float val)\n    ";
static PyObject *__pyx_pw_5imgui_4core_339push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiStyleVar __pyx_v_variable;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_style_var (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_var", 1, 2, 2, 1); __PYX_ERR(0, 6750, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_style_var") < 0)) __PYX_ERR(0, 6750, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiStyleVar(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6750, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_style_var", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6750, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_338push_style_var(__pyx_self, __pyx_v_variable, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_338push_style_var(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_var", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_push_style_var(__pyx_v_variable, __pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6800
 * 
 * 
 * cpdef push_style_color(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

static PyObject *__pyx_pw_5imgui_4core_341push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_color(ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_style_color *__pyx_optional_args) {
  float __pyx_v_a = ((float)1.);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_color", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_a = __pyx_optional_args->a;
    }
  }

  /* "imgui/core.pyx":6836
 *         PushStyleColor(ImGuiCol idx, const ImVec4& col)
 *     """
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiCol_COUNT);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":6837
 *     """
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):
 *         warnings.warn("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 6837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol(__pyx_v_variable); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 6837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "imgui/core.pyx":6838
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cimgui.PushStyleColor(variable, _cast_args_ImVec4(r, g, b, a))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "imgui/core.pyx":6836
 *         PushStyleColor(ImGuiCol idx, const ImVec4& col)
 *     """
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  }

  /* "imgui/core.pyx":6840
 *         return False
 * 
 *     cimgui.PushStyleColor(variable, _cast_args_ImVec4(r, g, b, a))             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  try {
    ImGui::PushStyleColor(__pyx_v_variable, __pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6840, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6841
 * 
 *     cimgui.PushStyleColor(variable, _cast_args_ImVec4(r, g, b, a))
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "imgui/core.pyx":6800
 * 
 * 
 * cpdef push_style_color(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_341push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_340push_style_color[] = "push_style_color(ImGuiCol variable, float r, float g, float b, float a=1.)\nPush style color on stack.\n\n    **Note:** variables pushed on stack need to be popped using\n    :func:`pop_style_color()` until the end of current frame. This\n    implementation guards you from segfaults caused by redundant stack pops\n    (raises exception if this happens) but generally it is safer and easier to\n    use :func:`styled` or :func:`istyled` context managers.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 200\n        :height: 80\n\n        imgui.begin(\"Example: Color variables\")\n        imgui.push_style_color(imgui.COLOR_TEXT, 1.0, 0.0, 0.0)\n        imgui.text(\"Colored text\")\n        imgui.pop_style_color(1)\n        imgui.end()\n\n    Args:\n        variable: imgui style color constant\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n\n    .. wraps::\n        PushStyleColor(ImGuiCol idx, const ImVec4& col)\n    ";
static PyObject *__pyx_pw_5imgui_4core_341push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiCol __pyx_v_variable;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_style_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 1); __PYX_ERR(0, 6800, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 2); __PYX_ERR(0, 6800, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 3); __PYX_ERR(0, 6800, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_style_color") < 0)) __PYX_ERR(0, 6800, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6801, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6802, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6803, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6804, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6805, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6800, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_340push_style_color(__pyx_self, __pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_340push_style_color(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_push_style_color __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.a = __pyx_v_a;
  __pyx_t_1 = __pyx_f_5imgui_4core_push_style_color(__pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6844
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_343pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_var(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_var *__pyx_optional_args) {
  unsigned int __pyx_v_count = ((unsigned int)1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_var", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_count = __pyx_optional_args->count;
    }
  }

  /* "imgui/core.pyx":6858
 *         void PopStyleVar(int count = 1)
 *     """
 *     cimgui.PopStyleVar(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopStyleVar(__pyx_v_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6858, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6844
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_343pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_342pop_style_var[] = "pop_style_var(unsigned int count=1)\nPop style variables from stack.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :any:`push_style_var()`.\n\n    Args:\n        count (int): number of variables to pop from style variable stack.\n\n    .. wraps::\n        void PopStyleVar(int count = 1)\n    ";
static PyObject *__pyx_pw_5imgui_4core_343pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_var (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop_style_var") < 0)) __PYX_ERR(0, 6844, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_count == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6844, __pyx_L3_error)
    } else {
      __pyx_v_count = ((unsigned int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop_style_var", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6844, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_342pop_style_var(__pyx_self, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_342pop_style_var(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_pop_style_var __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_var", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.count = __pyx_v_count;
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_style_var(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6861
 * 
 * 
 * cpdef get_font_size():             # <<<<<<<<<<<<<<
 *     """get current font size (= height in pixels) of current font with current scale applied
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_345get_font_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_font_size(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_size", 0);

  /* "imgui/core.pyx":6870
 *         float GetFontSize()
 *     """
 *     return cimgui.GetFontSize()             # <<<<<<<<<<<<<<
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFontSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6870, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6861
 * 
 * 
 * cpdef get_font_size():             # <<<<<<<<<<<<<<
 *     """get current font size (= height in pixels) of current font with current scale applied
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_font_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_345get_font_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_344get_font_size[] = "get_font_size()\nget current font size (= height in pixels) of current font with current scale applied\n\n    Returns:\n        float: current font size (height in pixels)\n\n    .. wraps::\n        float GetFontSize()\n    ";
static PyObject *__pyx_pw_5imgui_4core_345get_font_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_font_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_344get_font_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_344get_font_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_get_font_size(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_font_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6872
 *     return cimgui.GetFontSize()
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):             # <<<<<<<<<<<<<<
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_347get_style_color_vec_4(PyObject *__pyx_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_style_color_vec_4(ImGuiCol __pyx_v_idx, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<ImVec4> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style_color_vec_4", 0);

  /* "imgui/core.pyx":6873
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))             # <<<<<<<<<<<<<<
 * 
 * cpdef get_font_tex_uv_white_pixel():
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetStyleColorVec4(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6873, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec4_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6872
 *     return cimgui.GetFontSize()
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):             # <<<<<<<<<<<<<<
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_style_color_vec_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_347get_style_color_vec_4(PyObject *__pyx_self, PyObject *__pyx_arg_idx); /*proto*/
static char __pyx_doc_5imgui_4core_346get_style_color_vec_4[] = "get_style_color_vec_4(ImGuiCol idx)";
static PyObject *__pyx_pw_5imgui_4core_347get_style_color_vec_4(PyObject *__pyx_self, PyObject *__pyx_arg_idx) {
  ImGuiCol __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style_color_vec_4 (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_idx); if (unlikely((__pyx_v_idx == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6872, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_style_color_vec_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_346get_style_color_vec_4(__pyx_self, ((ImGuiCol)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_346get_style_color_vec_4(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style_color_vec_4", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_get_style_color_vec_4(__pyx_v_idx, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_style_color_vec_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6875
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 * cpdef get_font_tex_uv_white_pixel():             # <<<<<<<<<<<<<<
 *     return _cast_ImVec2_tuple(cimgui.GetFontTexUvWhitePixel())
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_349get_font_tex_uv_white_pixel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_font_tex_uv_white_pixel(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_tex_uv_white_pixel", 0);

  /* "imgui/core.pyx":6876
 * 
 * cpdef get_font_tex_uv_white_pixel():
 *     return _cast_ImVec2_tuple(cimgui.GetFontTexUvWhitePixel())             # <<<<<<<<<<<<<<
 * 
 * # TODO: Can we implement function overloading? Prefer these are all named 'get_color_u32' with different signatures
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFontTexUvWhitePixel();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6876, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6875
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 * cpdef get_font_tex_uv_white_pixel():             # <<<<<<<<<<<<<<
 *     return _cast_ImVec2_tuple(cimgui.GetFontTexUvWhitePixel())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_font_tex_uv_white_pixel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_349get_font_tex_uv_white_pixel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_348get_font_tex_uv_white_pixel[] = "get_font_tex_uv_white_pixel()";
static PyObject *__pyx_pw_5imgui_4core_349get_font_tex_uv_white_pixel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_font_tex_uv_white_pixel (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_348get_font_tex_uv_white_pixel(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_348get_font_tex_uv_white_pixel(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_tex_uv_white_pixel", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_get_font_tex_uv_white_pixel(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_font_tex_uv_white_pixel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6882
 * # Neither singledispatch nor multipledispatch seems to be available in Cython :-/
 * 
 * cpdef get_color_u32_idx(cimgui.ImGuiCol idx, float alpha_mul = 1.0):             # <<<<<<<<<<<<<<
 *     """ retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_351get_color_u32_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_color_u32_idx(ImGuiCol __pyx_v_idx, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_get_color_u32_idx *__pyx_optional_args) {
  float __pyx_v_alpha_mul = ((float)1.0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImU32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_idx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_alpha_mul = __pyx_optional_args->alpha_mul;
    }
  }

  /* "imgui/core.pyx":6891
 *         ImU32 GetColorU32(ImGuiCol idx, alpha_mul)
 *     """
 *     return cimgui.GetColorU32(idx, alpha_mul)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColorU32(__pyx_v_idx, __pyx_v_alpha_mul);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6891, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImU32(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6882
 * # Neither singledispatch nor multipledispatch seems to be available in Cython :-/
 * 
 * cpdef get_color_u32_idx(cimgui.ImGuiCol idx, float alpha_mul = 1.0):             # <<<<<<<<<<<<<<
 *     """ retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_color_u32_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_351get_color_u32_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_350get_color_u32_idx[] = "get_color_u32_idx(ImGuiCol idx, float alpha_mul=1.0)\n retrieve given style color with style alpha applied and optional extra alpha multiplier\n\n    Returns:\n        ImU32: 32-bit RGBA color\n\n    .. wraps::\n        ImU32 GetColorU32(ImGuiCol idx, alpha_mul)\n    ";
static PyObject *__pyx_pw_5imgui_4core_351get_color_u32_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiCol __pyx_v_idx;
  float __pyx_v_alpha_mul;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_color_u32_idx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_idx,&__pyx_n_s_alpha_mul,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha_mul);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_color_u32_idx") < 0)) __PYX_ERR(0, 6882, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_idx = __Pyx_PyInt_As_ImGuiCol(values[0]); if (unlikely((__pyx_v_idx == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6882, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_alpha_mul = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_alpha_mul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6882, __pyx_L3_error)
    } else {
      __pyx_v_alpha_mul = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_color_u32_idx", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6882, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_color_u32_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_350get_color_u32_idx(__pyx_self, __pyx_v_idx, __pyx_v_alpha_mul);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_350get_color_u32_idx(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx, float __pyx_v_alpha_mul) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_get_color_u32_idx __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_idx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.alpha_mul = __pyx_v_alpha_mul;
  __pyx_t_1 = __pyx_f_5imgui_4core_get_color_u32_idx(__pyx_v_idx, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_color_u32_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6894
 * 
 * 
 * cpdef get_color_u32_rgba(float r, float g, float b, float a):             # <<<<<<<<<<<<<<
 *     """ retrieve given color with style alpha applied
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_353get_color_u32_rgba(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_color_u32_rgba(float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImU32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_rgba", 0);

  /* "imgui/core.pyx":6903
 *         ImU32 GetColorU32(const ImVec4& col)
 *     """
 *     return cimgui.GetColorU32( _cast_args_ImVec4(r, g, b, a) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColorU32(__pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6903, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImU32(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6894
 * 
 * 
 * cpdef get_color_u32_rgba(float r, float g, float b, float a):             # <<<<<<<<<<<<<<
 *     """ retrieve given color with style alpha applied
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_color_u32_rgba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_353get_color_u32_rgba(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_352get_color_u32_rgba[] = "get_color_u32_rgba(float r, float g, float b, float a)\n retrieve given color with style alpha applied\n\n    Returns:\n        ImU32: 32-bit RGBA color\n\n    .. wraps::\n        ImU32 GetColorU32(const ImVec4& col)\n    ";
static PyObject *__pyx_pw_5imgui_4core_353get_color_u32_rgba(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_color_u32_rgba (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, 1); __PYX_ERR(0, 6894, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, 2); __PYX_ERR(0, 6894, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, 3); __PYX_ERR(0, 6894, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_color_u32_rgba") < 0)) __PYX_ERR(0, 6894, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6894, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6894, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6894, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6894, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6894, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_color_u32_rgba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_352get_color_u32_rgba(__pyx_self, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_352get_color_u32_rgba(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_rgba", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_get_color_u32_rgba(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_color_u32_rgba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6906
 * 
 * 
 * cpdef get_color_u32(cimgui.ImU32 col):             # <<<<<<<<<<<<<<
 *     """retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_355get_color_u32(PyObject *__pyx_self, PyObject *__pyx_arg_col); /*proto*/
static PyObject *__pyx_f_5imgui_4core_get_color_u32(ImU32 __pyx_v_col, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImU32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32", 0);

  /* "imgui/core.pyx":6915
 *         ImU32 GetColorU32(ImU32 col)
 *     """
 *     return cimgui.GetColorU32(col)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColorU32(__pyx_v_col);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6915, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImU32(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6906
 * 
 * 
 * cpdef get_color_u32(cimgui.ImU32 col):             # <<<<<<<<<<<<<<
 *     """retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_color_u32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_355get_color_u32(PyObject *__pyx_self, PyObject *__pyx_arg_col); /*proto*/
static char __pyx_doc_5imgui_4core_354get_color_u32[] = "get_color_u32(ImU32 col)\nretrieve given style color with style alpha applied and optional extra alpha multiplier\n\n    Returns:\n        ImU32: 32-bit RGBA color\n\n    .. wraps::\n        ImU32 GetColorU32(ImU32 col)\n    ";
static PyObject *__pyx_pw_5imgui_4core_355get_color_u32(PyObject *__pyx_self, PyObject *__pyx_arg_col) {
  ImU32 __pyx_v_col;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_color_u32 (wrapper)", 0);
  assert(__pyx_arg_col); {
    __pyx_v_col = __Pyx_PyInt_As_ImU32(__pyx_arg_col); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6906, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_color_u32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_354get_color_u32(__pyx_self, ((ImU32)__pyx_v_col));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_354get_color_u32(CYTHON_UNUSED PyObject *__pyx_self, ImU32 __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_get_color_u32(__pyx_v_col, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_color_u32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6919
 * 
 * 
 * cpdef push_item_width(float item_width):             # <<<<<<<<<<<<<<
 *     """Push item width in the stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_357push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_item_width(float __pyx_v_item_width, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_item_width", 0);

  /* "imgui/core.pyx":6958
 *         void PushItemWidth(float item_width)
 *     """
 *     cimgui.PushItemWidth(item_width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PushItemWidth(__pyx_v_item_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6958, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6919
 * 
 * 
 * cpdef push_item_width(float item_width):             # <<<<<<<<<<<<<<
 *     """Push item width in the stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_357push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width); /*proto*/
static char __pyx_doc_5imgui_4core_356push_item_width[] = "push_item_width(float item_width)\nPush item width in the stack.\n\n    **Note:** sizing of child region allows for three modes:\n\n    * ``0.0`` - default to ~2/3 of windows width\n    * ``>0.0`` - width in pixels\n    * ``<0.0`` - align xx pixels to the right of window\n      (so -1.0f always align width to the right side)\n\n    **Note:** width pushed on stack need to be poped using\n    :func:`pop_item_width()` or it will be applied to all subsequent\n    children components.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 200\n        :height: 200\n\n        imgui.begin(\"Example: item width\")\n\n        # custom width\n        imgui.push_item_width(imgui.get_window_width() * 0.33)\n        imgui.text('Lorem Ipsum ...')\n        imgui.slider_float('float slider', 10.2, 0.0, 20.0, '%.2f', 1.0)\n        imgui.pop_item_width()\n\n        # default width\n        imgui.text('Lorem Ipsum ...')\n        imgui.slider_float('float slider', 10.2, 0.0, 20.0, '%.2f', 1.0)\n\n        imgui.end()\n\n    Args:\n        item_width (float): width of the component\n\n    .. wraps::\n        void PushItemWidth(float item_width)\n    ";
static PyObject *__pyx_pw_5imgui_4core_357push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width) {
  float __pyx_v_item_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_item_width (wrapper)", 0);
  assert(__pyx_arg_item_width); {
    __pyx_v_item_width = __pyx_PyFloat_AsFloat(__pyx_arg_item_width); if (unlikely((__pyx_v_item_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6919, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_356push_item_width(__pyx_self, ((float)__pyx_v_item_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_356push_item_width(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_item_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_push_item_width(__pyx_v_item_width, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6961
 * 
 * 
 * cpdef pop_item_width():             # <<<<<<<<<<<<<<
 *     """Reset width back to the default width.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_359pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_item_width(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_item_width", 0);

  /* "imgui/core.pyx":6972
 *         void PopItemWidth()
 *     """
 *     cimgui.PopItemWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopItemWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6972, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6961
 * 
 * 
 * cpdef pop_item_width():             # <<<<<<<<<<<<<<
 *     """Reset width back to the default width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_359pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_358pop_item_width[] = "pop_item_width()\nReset width back to the default width.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :any:`push_item_width()`.\n\n    .. wraps::\n        void PopItemWidth()\n    ";
static PyObject *__pyx_pw_5imgui_4core_359pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_item_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_358pop_item_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_358pop_item_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_item_width(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6975
 * 
 * 
 * cpdef calculate_item_width():             # <<<<<<<<<<<<<<
 *     """Calculate and return the current item width.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_361calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_calculate_item_width(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_item_width", 0);

  /* "imgui/core.pyx":6984
 *         float CalcItemWidth()
 *     """
 *     return cimgui.CalcItemWidth()             # <<<<<<<<<<<<<<
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::CalcItemWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6984, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":6975
 * 
 * 
 * cpdef calculate_item_width():             # <<<<<<<<<<<<<<
 *     """Calculate and return the current item width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.calculate_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_361calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_360calculate_item_width[] = "calculate_item_width()\nCalculate and return the current item width.\n\n    Returns:\n        float: calculated item width.\n\n    .. wraps::\n        float CalcItemWidth()\n    ";
static PyObject *__pyx_pw_5imgui_4core_361calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_item_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_360calculate_item_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_360calculate_item_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_calculate_item_width(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.calculate_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":6986
 *     return cimgui.CalcItemWidth()
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_363push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_text_wrap_pos(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos *__pyx_optional_args) {
  float __pyx_v_wrap_pos_x = ((float)0.0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_text_wrap_pos", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_wrap_pos_x = __pyx_optional_args->wrap_pos_x;
    }
  }

  /* "imgui/core.pyx":7000
 *         float PushTextWrapPos(float wrap_pos_x = 0.0f)
 *     """
 *     cimgui.PushTextWrapPos(wrap_pos_x)             # <<<<<<<<<<<<<<
 * 
 * push_text_wrap_position = push_text_wrap_pos
 */
  try {
    ImGui::PushTextWrapPos(__pyx_v_wrap_pos_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7000, __pyx_L1_error)
  }

  /* "imgui/core.pyx":6986
 *     return cimgui.CalcItemWidth()
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_363push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_362push_text_wrap_pos[] = "push_text_wrap_pos(float wrap_pos_x=0.0)\nWord-wrapping function for text*() commands.\n\n    **Note:** wrapping position allows these modes:\n    * ``0.0`` - wrap to end of window (or column)\n    * ``>0.0`` - wrap at 'wrap_pos_x' position in window local space\n    * ``<0.0`` - no wrapping\n\n    Args:\n        wrap_pos_x (float): calculated item width.\n\n    .. wraps::\n        float PushTextWrapPos(float wrap_pos_x = 0.0f)\n    ";
static PyObject *__pyx_pw_5imgui_4core_363push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_wrap_pos_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_text_wrap_pos (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wrap_pos_x,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_pos_x);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_text_wrap_pos") < 0)) __PYX_ERR(0, 6986, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_wrap_pos_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_wrap_pos_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6986, __pyx_L3_error)
    } else {
      __pyx_v_wrap_pos_x = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_text_wrap_pos", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6986, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_362push_text_wrap_pos(__pyx_self, __pyx_v_wrap_pos_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_362push_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_wrap_pos_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_text_wrap_pos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.wrap_pos_x = __pyx_v_wrap_pos_x;
  __pyx_t_1 = __pyx_f_5imgui_4core_push_text_wrap_pos(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7004
 * push_text_wrap_position = push_text_wrap_pos
 * 
 * cpdef pop_text_wrap_pos():             # <<<<<<<<<<<<<<
 *     """Pop the text wrapping position from the stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_365pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_text_wrap_pos(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_text_wrap_pos", 0);

  /* "imgui/core.pyx":7015
 *         void PopTextWrapPos()
 *     """
 *     cimgui.PopTextWrapPos()             # <<<<<<<<<<<<<<
 * 
 * pop_text_wrap_position = pop_text_wrap_pos
 */
  try {
    ImGui::PopTextWrapPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7015, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7004
 * push_text_wrap_position = push_text_wrap_pos
 * 
 * cpdef pop_text_wrap_pos():             # <<<<<<<<<<<<<<
 *     """Pop the text wrapping position from the stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_365pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_364pop_text_wrap_pos[] = "pop_text_wrap_pos()\nPop the text wrapping position from the stack.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :func:`push_text_wrap_pos()`.\n\n    .. wraps::\n        void PopTextWrapPos()\n    ";
static PyObject *__pyx_pw_5imgui_4core_365pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_text_wrap_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_364pop_text_wrap_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_364pop_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_text_wrap_pos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_text_wrap_pos(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7019
 * pop_text_wrap_position = pop_text_wrap_pos
 * 
 * cpdef push_allow_keyboard_focus(bool allow_focus):             # <<<<<<<<<<<<<<
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_367push_allow_keyboard_focus(PyObject *__pyx_self, PyObject *__pyx_arg_allow_focus); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_allow_keyboard_focus(bool __pyx_v_allow_focus, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_allow_keyboard_focus", 0);

  /* "imgui/core.pyx":7020
 * 
 * cpdef push_allow_keyboard_focus(bool allow_focus):
 *     cimgui.PushAllowKeyboardFocus(allow_focus)             # <<<<<<<<<<<<<<
 * 
 * cpdef pop_allow_keyboard_focus():
 */
  try {
    ImGui::PushAllowKeyboardFocus(__pyx_v_allow_focus);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7020, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7019
 * pop_text_wrap_position = pop_text_wrap_pos
 * 
 * cpdef push_allow_keyboard_focus(bool allow_focus):             # <<<<<<<<<<<<<<
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_367push_allow_keyboard_focus(PyObject *__pyx_self, PyObject *__pyx_arg_allow_focus); /*proto*/
static char __pyx_doc_5imgui_4core_366push_allow_keyboard_focus[] = "push_allow_keyboard_focus(bool allow_focus)";
static PyObject *__pyx_pw_5imgui_4core_367push_allow_keyboard_focus(PyObject *__pyx_self, PyObject *__pyx_arg_allow_focus) {
  bool __pyx_v_allow_focus;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_allow_keyboard_focus (wrapper)", 0);
  assert(__pyx_arg_allow_focus); {
    __pyx_v_allow_focus = __Pyx_PyObject_IsTrue(__pyx_arg_allow_focus); if (unlikely((__pyx_v_allow_focus == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7019, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_366push_allow_keyboard_focus(__pyx_self, ((bool)__pyx_v_allow_focus));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_366push_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_allow_focus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_allow_keyboard_focus", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_push_allow_keyboard_focus(__pyx_v_allow_focus, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7022
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 * cpdef pop_allow_keyboard_focus():             # <<<<<<<<<<<<<<
 *     cimgui.PopAllowKeyboardFocus()
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_369pop_allow_keyboard_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_allow_keyboard_focus(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_allow_keyboard_focus", 0);

  /* "imgui/core.pyx":7023
 * 
 * cpdef pop_allow_keyboard_focus():
 *     cimgui.PopAllowKeyboardFocus()             # <<<<<<<<<<<<<<
 * 
 * cpdef push_button_repeat(bool repeat):
 */
  try {
    ImGui::PopAllowKeyboardFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7023, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7022
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 * cpdef pop_allow_keyboard_focus():             # <<<<<<<<<<<<<<
 *     cimgui.PopAllowKeyboardFocus()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_369pop_allow_keyboard_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_368pop_allow_keyboard_focus[] = "pop_allow_keyboard_focus()";
static PyObject *__pyx_pw_5imgui_4core_369pop_allow_keyboard_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_allow_keyboard_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_368pop_allow_keyboard_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_368pop_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_allow_keyboard_focus", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_allow_keyboard_focus(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7025
 *     cimgui.PopAllowKeyboardFocus()
 * 
 * cpdef push_button_repeat(bool repeat):             # <<<<<<<<<<<<<<
 *     cimgui.PushButtonRepeat(repeat)
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_371push_button_repeat(PyObject *__pyx_self, PyObject *__pyx_arg_repeat); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_button_repeat(bool __pyx_v_repeat, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_button_repeat", 0);

  /* "imgui/core.pyx":7026
 * 
 * cpdef push_button_repeat(bool repeat):
 *     cimgui.PushButtonRepeat(repeat)             # <<<<<<<<<<<<<<
 * 
 * cpdef pop_button_repeat():
 */
  try {
    ImGui::PushButtonRepeat(__pyx_v_repeat);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7026, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7025
 *     cimgui.PopAllowKeyboardFocus()
 * 
 * cpdef push_button_repeat(bool repeat):             # <<<<<<<<<<<<<<
 *     cimgui.PushButtonRepeat(repeat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_371push_button_repeat(PyObject *__pyx_self, PyObject *__pyx_arg_repeat); /*proto*/
static char __pyx_doc_5imgui_4core_370push_button_repeat[] = "push_button_repeat(bool repeat)";
static PyObject *__pyx_pw_5imgui_4core_371push_button_repeat(PyObject *__pyx_self, PyObject *__pyx_arg_repeat) {
  bool __pyx_v_repeat;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_button_repeat (wrapper)", 0);
  assert(__pyx_arg_repeat); {
    __pyx_v_repeat = __Pyx_PyObject_IsTrue(__pyx_arg_repeat); if (unlikely((__pyx_v_repeat == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7025, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_370push_button_repeat(__pyx_self, ((bool)__pyx_v_repeat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_370push_button_repeat(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_repeat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_button_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_push_button_repeat(__pyx_v_repeat, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7028
 *     cimgui.PushButtonRepeat(repeat)
 * 
 * cpdef pop_button_repeat():             # <<<<<<<<<<<<<<
 *     cimgui.PopButtonRepeat()
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_373pop_button_repeat(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_button_repeat(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_button_repeat", 0);

  /* "imgui/core.pyx":7029
 * 
 * cpdef pop_button_repeat():
 *     cimgui.PopButtonRepeat()             # <<<<<<<<<<<<<<
 * 
 * cpdef pop_style_color(unsigned int count=1):
 */
  try {
    ImGui::PopButtonRepeat();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7029, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7028
 *     cimgui.PushButtonRepeat(repeat)
 * 
 * cpdef pop_button_repeat():             # <<<<<<<<<<<<<<
 *     cimgui.PopButtonRepeat()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_373pop_button_repeat(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_372pop_button_repeat[] = "pop_button_repeat()";
static PyObject *__pyx_pw_5imgui_4core_373pop_button_repeat(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_button_repeat (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_372pop_button_repeat(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_372pop_button_repeat(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_button_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_button_repeat(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7031
 *     cimgui.PopButtonRepeat()
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_375pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_color(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_color *__pyx_optional_args) {
  unsigned int __pyx_v_count = ((unsigned int)1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_color", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_count = __pyx_optional_args->count;
    }
  }

  /* "imgui/core.pyx":7045
 *         void PopStyleColor(int count = 1)
 *     """
 *     cimgui.PopStyleColor(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopStyleColor(__pyx_v_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7045, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7031
 *     cimgui.PopButtonRepeat()
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_375pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_374pop_style_color[] = "pop_style_color(unsigned int count=1)\nPop style color from stack.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :any:`push_style_color()`.\n\n    Args:\n        count (int): number of variables to pop from style color stack.\n\n    .. wraps::\n        void PopStyleColor(int count = 1)\n    ";
static PyObject *__pyx_pw_5imgui_4core_375pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop_style_color") < 0)) __PYX_ERR(0, 7031, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_count == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7031, __pyx_L3_error)
    } else {
      __pyx_v_count = ((unsigned int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop_style_color", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7031, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_374pop_style_color(__pyx_self, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_374pop_style_color(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_pop_style_color __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.count = __pyx_v_count;
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_style_color(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7048
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_377separator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_376separator[] = "separator()\nAdd vertical line as a separator beween elements.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: separators\")\n\n        imgui.text(\"Some text with bullets\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.separator()\n\n        imgui.text(\"Another text with bullets\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.end()\n\n    .. wraps::\n        void Separator()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_377separator = {"separator", (PyCFunction)__pyx_pw_5imgui_4core_377separator, METH_NOARGS, __pyx_doc_5imgui_4core_376separator};
static PyObject *__pyx_pw_5imgui_4core_377separator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("separator (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_376separator(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_376separator(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("separator", 0);

  /* "imgui/core.pyx":7072
 *         void Separator()
 *     """
 *     cimgui.Separator()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Separator();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7072, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7048
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.separator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7075
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_379same_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_378same_line[] = "same_line(float position=0.0, float spacing=-1.0)\nCall between widgets or groups to layout them horizontally.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: same line widgets\")\n\n        imgui.text(\"same_line() with defaults:\")\n        imgui.button(\"yes\"); imgui.same_line()\n        imgui.button(\"no\")\n\n        imgui.text(\"same_line() with fixed position:\")\n        imgui.button(\"yes\"); imgui.same_line(position=50)\n        imgui.button(\"no\")\n\n        imgui.text(\"same_line() with spacing:\")\n        imgui.button(\"yes\"); imgui.same_line(spacing=50)\n        imgui.button(\"no\")\n\n        imgui.end()\n\n    Args:\n        position (float): fixed horizontal position position.\n        spacing (float): spacing between elements.\n\n    .. wraps::\n        void SameLine(float pos_x = 0.0f, float spacing_w = -1.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_379same_line = {"same_line", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_379same_line, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_378same_line};
static PyObject *__pyx_pw_5imgui_4core_379same_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_position;
  float __pyx_v_spacing;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("same_line (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position,&__pyx_n_s_spacing,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_spacing);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "same_line") < 0)) __PYX_ERR(0, 7075, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_position = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_position == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7075, __pyx_L3_error)
    } else {
      __pyx_v_position = ((float)0.0);
    }
    if (values[1]) {
      __pyx_v_spacing = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_spacing == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7075, __pyx_L3_error)
    } else {
      __pyx_v_spacing = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("same_line", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7075, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.same_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_378same_line(__pyx_self, __pyx_v_position, __pyx_v_spacing);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_378same_line(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position, float __pyx_v_spacing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("same_line", 0);

  /* "imgui/core.pyx":7105
 *         void SameLine(float pos_x = 0.0f, float spacing_w = -1.0f)
 *     """
 *     cimgui.SameLine(position, spacing)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ImGui::SameLine(__pyx_v_position, __pyx_v_spacing);

  /* "imgui/core.pyx":7075
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7108
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_381new_line(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_380new_line[] = "new_line()\nUndo :any:`same_line()` call.\n\n    .. wraps::\n        void NewLine()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_381new_line = {"new_line", (PyCFunction)__pyx_pw_5imgui_4core_381new_line, METH_NOARGS, __pyx_doc_5imgui_4core_380new_line};
static PyObject *__pyx_pw_5imgui_4core_381new_line(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_line (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_380new_line(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_380new_line(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_line", 0);

  /* "imgui/core.pyx":7114
 *         void NewLine()
 *     """
 *     cimgui.NewLine()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NewLine();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7114, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7108
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.new_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7117
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_383spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_382spacing[] = "spacing()\nAdd vertical spacing beween elements.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: vertical spacing\")\n\n        imgui.text(\"Some text with bullets:\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.spacing(); imgui.spacing()\n\n        imgui.text(\"Another text with bullets:\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.end()\n\n    .. wraps::\n        void Spacing()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_383spacing = {"spacing", (PyCFunction)__pyx_pw_5imgui_4core_383spacing, METH_NOARGS, __pyx_doc_5imgui_4core_382spacing};
static PyObject *__pyx_pw_5imgui_4core_383spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spacing (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_382spacing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_382spacing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("spacing", 0);

  /* "imgui/core.pyx":7141
 *         void Spacing()
 *     """
 *     cimgui.Spacing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Spacing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7141, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7117
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.spacing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7144
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_385dummy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_384dummy[] = "dummy(width, height)\nAdd dummy element of given size.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: dummy elements\")\n\n        imgui.text(\"Some text with bullets:\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet B\")\n\n        imgui.dummy(0, 50)\n        imgui.bullet_text(\"Text after dummy\")\n\n        imgui.end()\n\n    .. wraps::\n        void Dummy(const ImVec2& size)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_385dummy = {"dummy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_385dummy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_384dummy};
static PyObject *__pyx_pw_5imgui_4core_385dummy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dummy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dummy", 1, 2, 2, 1); __PYX_ERR(0, 7144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dummy") < 0)) __PYX_ERR(0, 7144, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dummy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.dummy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_384dummy(__pyx_self, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_384dummy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dummy", 0);

  /* "imgui/core.pyx":7165
 *         void Dummy(const ImVec2& size)
 *     """
 *     cimgui.Dummy(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7165, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7165, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_1, __pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 7165, __pyx_L1_error)
  try {
    ImGui::Dummy(__pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7165, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7144
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.dummy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7168
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_387indent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_386indent[] = "indent(float width=0.0)\nMove content to right by indent width.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: item indenting\")\n\n        imgui.text(\"Some text with bullets:\")\n\n        imgui.bullet_text(\"Bullet A\")\n        imgui.indent()\n        imgui.bullet_text(\"Bullet B (first indented)\")\n        imgui.bullet_text(\"Bullet C (indent continues)\")\n        imgui.unindent()\n        imgui.bullet_text(\"Bullet D (indent cleared)\")\n\n        imgui.end()\n\n    Args:\n        width (float): fixed width of indent. If less or equal 0 it defaults\n            to global indent spacing or value set using style value  stack\n            (see :any:`push_style_var`).\n\n    .. wraps::\n        void Indent(float indent_w = 0.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_387indent = {"indent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_387indent, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_386indent};
static PyObject *__pyx_pw_5imgui_4core_387indent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "indent") < 0)) __PYX_ERR(0, 7168, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7168, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indent", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.indent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_386indent(__pyx_self, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_386indent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("indent", 0);

  /* "imgui/core.pyx":7196
 *         void Indent(float indent_w = 0.0f)
 *     """
 *     cimgui.Indent(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Indent(__pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7196, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7168
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.indent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7199
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_389unindent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_388unindent[] = "unindent(float width=0.0)\nMove content to left by indent width.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: item unindenting\")\n\n        imgui.text(\"Some text with bullets:\")\n\n        imgui.bullet_text(\"Bullet A\")\n        imgui.unindent(10)\n        imgui.bullet_text(\"Bullet B (first unindented)\")\n        imgui.bullet_text(\"Bullet C (unindent continues)\")\n        imgui.indent(10)\n        imgui.bullet_text(\"Bullet C (unindent cleared)\")\n\n        imgui.end()\n\n    Args:\n        width (float): fixed width of indent. If less or equal 0 it defaults\n            to global indent spacing or value set using style value stack\n            (see :any:`push_style_var`).\n\n    .. wraps::\n        void Unindent(float indent_w = 0.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_389unindent = {"unindent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_389unindent, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_388unindent};
static PyObject *__pyx_pw_5imgui_4core_389unindent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unindent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unindent") < 0)) __PYX_ERR(0, 7199, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7199, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unindent", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7199, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.unindent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_388unindent(__pyx_self, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_388unindent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unindent", 0);

  /* "imgui/core.pyx":7227
 *         void Unindent(float indent_w = 0.0f)
 *     """
 *     cimgui.Unindent(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Unindent(__pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7227, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7199
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.unindent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7230
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_391columns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_390columns[] = "columns(int count=1, str identifier=None, bool border=True)\nSetup number of columns. Use an identifier to distinguish multiple\n    column sets. close with ``columns(1)``.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 500\n        :height: 300\n\n        imgui.begin(\"Example: Columns - File list\")\n        imgui.columns(4, 'fileLlist')\n        imgui.separator()\n        imgui.text(\"ID\")\n        imgui.next_column()\n        imgui.text(\"File\")\n        imgui.next_column()\n        imgui.text(\"Size\")\n        imgui.next_column()\n        imgui.text(\"Last Modified\")\n        imgui.next_column()\n        imgui.separator()\n        imgui.set_column_offset(1, 40)\n\n        imgui.next_column()\n        imgui.text('FileA.txt')\n        imgui.next_column()\n        imgui.text('57 Kb')\n        imgui.next_column()\n        imgui.text('12th Feb, 2016 12:19:01')\n        imgui.next_column()\n\n        imgui.next_column()\n        imgui.text('ImageQ.png')\n        imgui.next_column()\n        imgui.text('349 Kb')\n        imgui.next_column()\n        imgui.text('1st Mar, 2016 06:38:22')\n        imgui.next_column()\n\n        imgui.columns(1)\n        imgui.end()\n\n    Args:\n        count (int): Columns count.\n        identifier (str): Table identifier.\n        border (bool): Display border, defaults to ``True``.\n\n    .. wraps::\n        void Columns(\n            int count = 1,\n            const char* id = NULL,\n            bool border = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_391columns = {"columns", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_391columns, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_390columns};
static PyObject *__pyx_pw_5imgui_4core_391columns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  PyObject *__pyx_v_identifier = 0;
  bool __pyx_v_border;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("columns (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_identifier,&__pyx_n_s_border,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_identifier);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "columns") < 0)) __PYX_ERR(0, 7230, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7230, __pyx_L3_error)
    } else {
      __pyx_v_count = ((int)1);
    }
    __pyx_v_identifier = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7230, __pyx_L3_error)
    } else {
      __pyx_v_border = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("columns", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7230, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_identifier), (&PyString_Type), 1, "identifier", 1))) __PYX_ERR(0, 7230, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_390columns(__pyx_self, __pyx_v_count, __pyx_v_identifier, __pyx_v_border);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_390columns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_count, PyObject *__pyx_v_identifier, bool __pyx_v_border) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("columns", 0);

  /* "imgui/core.pyx":7284
 *         )
 *     """
 *     if identifier is None:             # <<<<<<<<<<<<<<
 *         cimgui.Columns(count, NULL, border)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_identifier == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":7285
 *     """
 *     if identifier is None:
 *         cimgui.Columns(count, NULL, border)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.Columns(count, _bytes(identifier), border)
 */
    try {
      ImGui::Columns(__pyx_v_count, NULL, __pyx_v_border);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7285, __pyx_L1_error)
    }

    /* "imgui/core.pyx":7284
 *         )
 *     """
 *     if identifier is None:             # <<<<<<<<<<<<<<
 *         cimgui.Columns(count, NULL, border)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":7287
 *         cimgui.Columns(count, NULL, border)
 *     else:
 *         cimgui.Columns(count, _bytes(identifier), border)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_identifier); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 7287, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 7287, __pyx_L1_error)
    try {
      ImGui::Columns(__pyx_v_count, __pyx_t_4, __pyx_v_border);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7287, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "imgui/core.pyx":7230
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7290
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_393next_column(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_392next_column[] = "next_column()\nMove to the next column drawing.\n\n    For a complete example see :func:`columns()`.\n\n    .. wraps::\n        void NextColumn()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_393next_column = {"next_column", (PyCFunction)__pyx_pw_5imgui_4core_393next_column, METH_NOARGS, __pyx_doc_5imgui_4core_392next_column};
static PyObject *__pyx_pw_5imgui_4core_393next_column(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next_column (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_392next_column(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_392next_column(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next_column", 0);

  /* "imgui/core.pyx":7298
 *         void NextColumn()
 *     """
 *     cimgui.NextColumn()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NextColumn();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7298, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7290
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.next_column", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7301
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_395get_column_index(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_394get_column_index[] = "get_column_index()\nReturns the current column index.\n\n    For a complete example see :func:`columns()`.\n\n    Returns:\n        int: the current column index.\n\n    .. wraps::\n        int GetColumnIndex()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_395get_column_index = {"get_column_index", (PyCFunction)__pyx_pw_5imgui_4core_395get_column_index, METH_NOARGS, __pyx_doc_5imgui_4core_394get_column_index};
static PyObject *__pyx_pw_5imgui_4core_395get_column_index(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_index (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_394get_column_index(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_394get_column_index(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_index", 0);

  /* "imgui/core.pyx":7312
 *         int GetColumnIndex()
 *     """
 *     return cimgui.GetColumnIndex()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnIndex();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7312, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7301
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_column_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7315
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_397get_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_396get_column_offset[] = "get_column_offset(int column_index=-1)\nReturns position of column line (in pixels, from the left side of the\n    contents region). Pass -1 to use current column, otherwise 0 to\n    :func:`get_columns_count()`. Column 0 is usually 0.0f and not resizable\n    unless you call this method.\n\n    For a complete example see :func:`columns()`.\n\n    Args:\n        column_index (int): index of the column to get the offset for.\n\n    Returns:\n        float: the position in pixels from the left side.\n\n    .. wraps::\n        float GetColumnOffset(int column_index = -1)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_397get_column_offset = {"get_column_offset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_397get_column_offset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_396get_column_offset};
static PyObject *__pyx_pw_5imgui_4core_397get_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_column_offset") < 0)) __PYX_ERR(0, 7315, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7315, __pyx_L3_error)
    } else {
      __pyx_v_column_index = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_offset", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7315, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_396get_column_offset(__pyx_self, __pyx_v_column_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_396get_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_offset", 0);

  /* "imgui/core.pyx":7332
 *         float GetColumnOffset(int column_index = -1)
 *     """
 *     return cimgui.GetColumnOffset(column_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnOffset(__pyx_v_column_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7332, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7315
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7335
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_399set_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_398set_column_offset[] = "set_column_offset(int column_index, float offset_x)\nSet the position of column line (in pixels, from the left side of the\n    contents region). Pass -1 to use current column.\n\n    For a complete example see :func:`columns()`.\n\n    Args:\n        column_index (int): index of the column to get the offset for.\n        offset_x (float): offset in pixels.\n\n    .. wraps::\n        void SetColumnOffset(int column_index, float offset_x)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_399set_column_offset = {"set_column_offset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_399set_column_offset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_398set_column_offset};
static PyObject *__pyx_pw_5imgui_4core_399set_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  float __pyx_v_offset_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_column_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,&__pyx_n_s_offset_x,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_column_offset", 1, 2, 2, 1); __PYX_ERR(0, 7335, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_column_offset") < 0)) __PYX_ERR(0, 7335, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7335, __pyx_L3_error)
    __pyx_v_offset_x = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_offset_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7335, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_column_offset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7335, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_398set_column_offset(__pyx_self, __pyx_v_column_index, __pyx_v_offset_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_398set_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_offset_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_column_offset", 0);

  /* "imgui/core.pyx":7348
 *         void SetColumnOffset(int column_index, float offset_x)
 *     """
 *     cimgui.SetColumnOffset(column_index, offset_x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetColumnOffset(__pyx_v_column_index, __pyx_v_offset_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7348, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7335
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7351
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_401get_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_400get_column_width[] = "get_column_width(int column_index=-1)\nReturn the column width.\n\n    For a complete example see :func:`columns()`.\n\n    Args:\n        column_index (int): index of the column to get the width for.\n\n    .. wraps::\n        float GetColumnWidth(int column_index = -1)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_401get_column_width = {"get_column_width", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_401get_column_width, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_400get_column_width};
static PyObject *__pyx_pw_5imgui_4core_401get_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_width (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_column_width") < 0)) __PYX_ERR(0, 7351, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7351, __pyx_L3_error)
    } else {
      __pyx_v_column_index = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_width", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7351, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_400get_column_width(__pyx_self, __pyx_v_column_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_400get_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_width", 0);

  /* "imgui/core.pyx":7362
 *         float GetColumnWidth(int column_index = -1)
 *     """
 *     return cimgui.GetColumnWidth(column_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnWidth(__pyx_v_column_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7362, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7351
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7365
 * 
 * 
 * def set_column_width(int column_index, float width):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_403set_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_402set_column_width[] = "set_column_width(int column_index, float width)\nSet the position of column line (in pixels, from the left side of the\n    contents region). Pass -1 to use current column.\n\n    For a complete example see :func:`columns()`.\n\n    Args:\n        column_index (int): index of the column to set the width for.\n        width (float): width in pixels.\n\n    .. wraps::\n        void SetColumnWidth(int column_index, float width)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_403set_column_width = {"set_column_width", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_403set_column_width, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_402set_column_width};
static PyObject *__pyx_pw_5imgui_4core_403set_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  float __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_column_width (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,&__pyx_n_s_width,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_column_width", 1, 2, 2, 1); __PYX_ERR(0, 7365, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_column_width") < 0)) __PYX_ERR(0, 7365, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7365, __pyx_L3_error)
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7365, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_column_width", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7365, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_402set_column_width(__pyx_self, __pyx_v_column_index, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_402set_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_column_width", 0);

  /* "imgui/core.pyx":7378
 *         void SetColumnWidth(int column_index, float width)
 *     """
 *     cimgui.SetColumnWidth(column_index, width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetColumnWidth(__pyx_v_column_index, __pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7378, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7365
 * 
 * 
 * def set_column_width(int column_index, float width):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7381
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_405get_columns_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_404get_columns_count[] = "get_columns_count()\nGet count of the columns in the current table.\n\n    For a complete example see :func:`columns()`.\n\n    Returns:\n        int: columns count.\n\n    .. wraps::\n        int GetColumnsCount()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_405get_columns_count = {"get_columns_count", (PyCFunction)__pyx_pw_5imgui_4core_405get_columns_count, METH_NOARGS, __pyx_doc_5imgui_4core_404get_columns_count};
static PyObject *__pyx_pw_5imgui_4core_405get_columns_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_columns_count (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_404get_columns_count(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_404get_columns_count(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_columns_count", 0);

  /* "imgui/core.pyx":7392
 *         int GetColumnsCount()
 *     """
 *     return cimgui.GetColumnsCount()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnsCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7392, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7381
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_columns_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7395
 * 
 * 
 * def begin_drag_drop_source(cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop source. If this return True, you
 *     can call :func:`set_drag_drop_payload` and :func:`end_drag_drop_source`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_407begin_drag_drop_source(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_406begin_drag_drop_source[] = "begin_drag_drop_source(ImGuiDragDropFlags flags=0)\nSet the current item as a drag and drop source. If this return True, you\n    can call :func:`set_drag_drop_payload` and :func:`end_drag_drop_source`.\n\n    **Note:** this is a beta API.\n\n    Args:\n        flags (ImGuiDragDropFlags): DragDrop flags.\n\n    Returns:\n        bool: True while a drag starting at this source is occurring\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: drag and drop\")\n\n        imgui.button('source')\n        if imgui.begin_drag_drop_source():\n            imgui.set_drag_drop_payload('itemtype', b'payload')\n            imgui.button('dragged source')\n            imgui.end_drag_drop_source()\n\n        imgui.button('dest')\n        if imgui.begin_drag_drop_target():\n            payload = imgui.accept_drag_drop_payload('itemtype')\n            if payload is not None:\n                print('Received:', payload)\n            imgui.end_drag_drop_target()\n\n        imgui.end()\n\n    .. wraps::\n        bool BeginDragDropSource(ImGuiDragDropFlags flags = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_407begin_drag_drop_source = {"begin_drag_drop_source", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_407begin_drag_drop_source, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_406begin_drag_drop_source};
static PyObject *__pyx_pw_5imgui_4core_407begin_drag_drop_source(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiDragDropFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_drag_drop_source (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_drag_drop_source") < 0)) __PYX_ERR(0, 7395, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiDragDropFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiDragDropFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7395, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiDragDropFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_drag_drop_source", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7395, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_drag_drop_source", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_406begin_drag_drop_source(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_406begin_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self, ImGuiDragDropFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_drag_drop_source", 0);

  /* "imgui/core.pyx":7431
 *         bool BeginDragDropSource(ImGuiDragDropFlags flags = 0)
 *     """
 *     return cimgui.BeginDragDropSource(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginDragDropSource(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7431, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7395
 * 
 * 
 * def begin_drag_drop_source(cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop source. If this return True, you
 *     can call :func:`set_drag_drop_payload` and :func:`end_drag_drop_source`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_drag_drop_source", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7434
 * 
 * 
 * def set_drag_drop_payload(str type, bytes data, cimgui.ImGuiCond condition=0):             # <<<<<<<<<<<<<<
 *     """Set the payload for a drag and drop source. Only call after
 *     :func:`begin_drag_drop_source` returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_409set_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_408set_drag_drop_payload[] = "set_drag_drop_payload(str type, bytes data, ImGuiCond condition=0)\nSet the payload for a drag and drop source. Only call after\n    :func:`begin_drag_drop_source` returns True.\n\n    **Note:** this is a beta API.\n\n    For a complete example see :func:`begin_drag_drop_source`.\n\n    Args:\n        type (str): user defined type with maximum 32 bytes.\n        data (bytes): the data for the payload; will be copied and stored internally.\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. wraps::\n        bool SetDragDropPayload(const char* type, const void* data, size_t size, ImGuiCond cond = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_409set_drag_drop_payload = {"set_drag_drop_payload", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_409set_drag_drop_payload, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_408set_drag_drop_payload};
static PyObject *__pyx_pw_5imgui_4core_409set_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_type = 0;
  PyObject *__pyx_v_data = 0;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_drag_drop_payload (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_data,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_drag_drop_payload", 0, 2, 3, 1); __PYX_ERR(0, 7434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_drag_drop_payload") < 0)) __PYX_ERR(0, 7434, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_type = ((PyObject*)values[0]);
    __pyx_v_data = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7434, __pyx_L3_error)
    } else {
      __pyx_v_condition = ((ImGuiCond)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_drag_drop_payload", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7434, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_type), (&PyString_Type), 1, "type", 1))) __PYX_ERR(0, 7434, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) __PYX_ERR(0, 7434, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_408set_drag_drop_payload(__pyx_self, __pyx_v_type, __pyx_v_data, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_408set_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, PyObject *__pyx_v_data, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_drag_drop_payload", 0);

  /* "imgui/core.pyx":7451
 *         bool SetDragDropPayload(const char* type, const void* data, size_t size, ImGuiCond cond = 0)
 *     """
 *     return cimgui.SetDragDropPayload(_bytes(type), <const char*>data, len(data), condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7451, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7451, __pyx_L1_error)
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7451, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_data); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 7451, __pyx_L1_error)
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 7451, __pyx_L1_error)
  }
  __pyx_t_4 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 7451, __pyx_L1_error)
  try {
    __pyx_t_5 = ImGui::SetDragDropPayload(__pyx_t_2, ((char const *)__pyx_t_3), __pyx_t_4, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7451, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7434
 * 
 * 
 * def set_drag_drop_payload(str type, bytes data, cimgui.ImGuiCond condition=0):             # <<<<<<<<<<<<<<
 *     """Set the payload for a drag and drop source. Only call after
 *     :func:`begin_drag_drop_source` returns True.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7454
 * 
 * 
 * def end_drag_drop_source():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_source`
 *     returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_411end_drag_drop_source(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_410end_drag_drop_source[] = "end_drag_drop_source()\nEnd the drag and drop source. Only call after :func:`begin_drag_drop_source`\n    returns True.\n\n    **Note:** this is a beta API.\n\n    For a complete example see :func:`begin_drag_drop_source`.\n\n    .. wraps::\n        void EndDragDropSource()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_411end_drag_drop_source = {"end_drag_drop_source", (PyCFunction)__pyx_pw_5imgui_4core_411end_drag_drop_source, METH_NOARGS, __pyx_doc_5imgui_4core_410end_drag_drop_source};
static PyObject *__pyx_pw_5imgui_4core_411end_drag_drop_source(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_drag_drop_source (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_410end_drag_drop_source(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_410end_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_drag_drop_source", 0);

  /* "imgui/core.pyx":7465
 *         void EndDragDropSource()
 *     """
 *     cimgui.EndDragDropSource()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndDragDropSource();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7465, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7454
 * 
 * 
 * def end_drag_drop_source():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_source`
 *     returns True.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_drag_drop_source", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7468
 * 
 * 
 * def begin_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop target. If this return True, you
 *     can call :func:`accept_drag_drop_payload` and :func:`end_drag_drop_target`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_413begin_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_412begin_drag_drop_target[] = "begin_drag_drop_target()\nSet the current item as a drag and drop target. If this return True, you\n    can call :func:`accept_drag_drop_payload` and :func:`end_drag_drop_target`.\n\n    **Note:** this is a beta API.\n\n    Returns:\n        bool: True when a drag hovers over the target\n\n    For a complete example see :func:`begin_drag_drop_source`.\n\n    .. wraps::\n        bool BeginDragDropTarget()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_413begin_drag_drop_target = {"begin_drag_drop_target", (PyCFunction)__pyx_pw_5imgui_4core_413begin_drag_drop_target, METH_NOARGS, __pyx_doc_5imgui_4core_412begin_drag_drop_target};
static PyObject *__pyx_pw_5imgui_4core_413begin_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_drag_drop_target (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_412begin_drag_drop_target(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_412begin_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_drag_drop_target", 0);

  /* "imgui/core.pyx":7482
 *         bool BeginDragDropTarget()
 *     """
 *     return cimgui.BeginDragDropTarget()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginDragDropTarget();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7482, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7468
 * 
 * 
 * def begin_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop target. If this return True, you
 *     can call :func:`accept_drag_drop_payload` and :func:`end_drag_drop_target`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_drag_drop_target", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7485
 * 
 * 
 * def accept_drag_drop_payload(str type, cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Get the drag and drop payload. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_415accept_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_414accept_drag_drop_payload[] = "accept_drag_drop_payload(str type, ImGuiDragDropFlags flags=0)\nGet the drag and drop payload. Only call after :func:`begin_drag_drop_target`\n    returns True.\n\n    **Note:** this is a beta API.\n\n    For a complete example see :func:`begin_drag_drop_source`.\n\n    Args:\n        type (str): user defined type with maximum 32 bytes.\n        flags (ImGuiDragDropFlags): DragDrop flags.\n\n    Returns:\n        bytes: the payload data that was set by :func:`set_drag_drop_payload`.\n\n    .. wraps::\n        const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_415accept_drag_drop_payload = {"accept_drag_drop_payload", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_415accept_drag_drop_payload, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_414accept_drag_drop_payload};
static PyObject *__pyx_pw_5imgui_4core_415accept_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_type = 0;
  ImGuiDragDropFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("accept_drag_drop_payload (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "accept_drag_drop_payload") < 0)) __PYX_ERR(0, 7485, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_type = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiDragDropFlags(values[1]); if (unlikely((__pyx_v_flags == ((ImGuiDragDropFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7485, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiDragDropFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("accept_drag_drop_payload", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7485, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.accept_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_type), (&PyString_Type), 1, "type", 1))) __PYX_ERR(0, 7485, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_414accept_drag_drop_payload(__pyx_self, __pyx_v_type, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_414accept_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, ImGuiDragDropFlags __pyx_v_flags) {
  ImGuiPayload const *__pyx_v_payload;
  char const *__pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImGuiPayload const *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("accept_drag_drop_payload", 0);

  /* "imgui/core.pyx":7503
 *         const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0)
 *     """
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)             # <<<<<<<<<<<<<<
 *     if payload == NULL:
 *         return None
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7503, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7503, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::AcceptDragDropPayload(__pyx_t_2, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7503, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_payload = __pyx_t_3;

  /* "imgui/core.pyx":7504
 *     """
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)
 *     if payload == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     cdef const char* data = <const char *>payload.Data
 */
  __pyx_t_4 = ((__pyx_v_payload == NULL) != 0);
  if (__pyx_t_4) {

    /* "imgui/core.pyx":7505
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)
 *     if payload == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     cdef const char* data = <const char *>payload.Data
 *     return <bytes>data[:payload.DataSize]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "imgui/core.pyx":7504
 *     """
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)
 *     if payload == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     cdef const char* data = <const char *>payload.Data
 */
  }

  /* "imgui/core.pyx":7506
 *     if payload == NULL:
 *         return None
 *     cdef const char* data = <const char *>payload.Data             # <<<<<<<<<<<<<<
 *     return <bytes>data[:payload.DataSize]
 * 
 */
  __pyx_v_data = ((char const *)__pyx_v_payload->Data);

  /* "imgui/core.pyx":7507
 *         return None
 *     cdef const char* data = <const char *>payload.Data
 *     return <bytes>data[:payload.DataSize]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_data + 0, __pyx_v_payload->DataSize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7485
 * 
 * 
 * def accept_drag_drop_payload(str type, cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Get the drag and drop payload. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.accept_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7510
 * 
 * 
 * def end_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_417end_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_416end_drag_drop_target[] = "end_drag_drop_target()\nEnd the drag and drop source. Only call after :func:`begin_drag_drop_target`\n    returns True.\n\n    **Note:** this is a beta API.\n\n    For a complete example see :func:`begin_drag_drop_source`.\n\n    .. wraps::\n        void EndDragDropTarget()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_417end_drag_drop_target = {"end_drag_drop_target", (PyCFunction)__pyx_pw_5imgui_4core_417end_drag_drop_target, METH_NOARGS, __pyx_doc_5imgui_4core_416end_drag_drop_target};
static PyObject *__pyx_pw_5imgui_4core_417end_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_drag_drop_target (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_416end_drag_drop_target(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_416end_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_drag_drop_target", 0);

  /* "imgui/core.pyx":7521
 *         void EndDragDropTarget()
 *     """
 *     cimgui.EndDragDropTarget()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndDragDropTarget();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7521, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7510
 * 
 * 
 * def end_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_drag_drop_target", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7524
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_419begin_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_418begin_group[] = "begin_group()\nStart item group and lock its horizontal starting position.\n\n    Captures group bounding box into one \"item\". Thanks to this you can use\n    :any:`is_item_hovered()` or layout primitives such as :any:`same_line()`\n    on whole group, etc.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 500\n\n        imgui.begin(\"Example: item groups\")\n\n        imgui.begin_group()\n        imgui.text(\"First group (buttons):\")\n        imgui.button(\"Button A\")\n        imgui.button(\"Button B\")\n        imgui.end_group()\n\n        imgui.same_line(spacing=50)\n\n        imgui.begin_group()\n        imgui.text(\"Second group (text and bullet texts):\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet B\")\n        imgui.end_group()\n\n        imgui.end()\n\n    .. wraps::\n        void BeginGroup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_419begin_group = {"begin_group", (PyCFunction)__pyx_pw_5imgui_4core_419begin_group, METH_NOARGS, __pyx_doc_5imgui_4core_418begin_group};
static PyObject *__pyx_pw_5imgui_4core_419begin_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_group (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_418begin_group(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_418begin_group(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_group", 0);

  /* "imgui/core.pyx":7556
 *         void BeginGroup()
 *     """
 *     cimgui.BeginGroup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::BeginGroup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7556, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7524
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.begin_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7559
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_421end_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_420end_group[] = "end_group()\nEnd group (see: :any:`begin_group`).\n\n    .. wraps::\n        void EndGroup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_421end_group = {"end_group", (PyCFunction)__pyx_pw_5imgui_4core_421end_group, METH_NOARGS, __pyx_doc_5imgui_4core_420end_group};
static PyObject *__pyx_pw_5imgui_4core_421end_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_group (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_420end_group(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_420end_group(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_group", 0);

  /* "imgui/core.pyx":7565
 *         void EndGroup()
 *     """
 *     cimgui.EndGroup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndGroup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7565, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7559
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7568
 * 
 * 
 * def get_cursor_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_423get_cursor_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_422get_cursor_pos[] = "get_cursor_pos()\nGet the cursor position.\n\n    .. wraps::\n        ImVec2 GetCursorPos()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_423get_cursor_pos = {"get_cursor_pos", (PyCFunction)__pyx_pw_5imgui_4core_423get_cursor_pos, METH_NOARGS, __pyx_doc_5imgui_4core_422get_cursor_pos};
static PyObject *__pyx_pw_5imgui_4core_423get_cursor_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_422get_cursor_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_422get_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_pos", 0);

  /* "imgui/core.pyx":7574
 *         ImVec2 GetCursorPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetCursorPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7574, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7568
 * 
 * 
 * def get_cursor_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_cursor_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7577
 * 
 * 
 * def get_cursor_pos_x():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosX()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_425get_cursor_pos_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_424get_cursor_pos_x[] = "get_cursor_pos_x()";
static PyMethodDef __pyx_mdef_5imgui_4core_425get_cursor_pos_x = {"get_cursor_pos_x", (PyCFunction)__pyx_pw_5imgui_4core_425get_cursor_pos_x, METH_NOARGS, __pyx_doc_5imgui_4core_424get_cursor_pos_x};
static PyObject *__pyx_pw_5imgui_4core_425get_cursor_pos_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_pos_x (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_424get_cursor_pos_x(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_424get_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_pos_x", 0);

  /* "imgui/core.pyx":7578
 * 
 * def get_cursor_pos_x():
 *     return cimgui.GetCursorPosX()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorPosX();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7578, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7577
 * 
 * 
 * def get_cursor_pos_x():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosX()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_cursor_pos_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7581
 * 
 * 
 * def get_cursor_pos_y():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosY()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_427get_cursor_pos_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_426get_cursor_pos_y[] = "get_cursor_pos_y()";
static PyMethodDef __pyx_mdef_5imgui_4core_427get_cursor_pos_y = {"get_cursor_pos_y", (PyCFunction)__pyx_pw_5imgui_4core_427get_cursor_pos_y, METH_NOARGS, __pyx_doc_5imgui_4core_426get_cursor_pos_y};
static PyObject *__pyx_pw_5imgui_4core_427get_cursor_pos_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_pos_y (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_426get_cursor_pos_y(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_426get_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_pos_y", 0);

  /* "imgui/core.pyx":7582
 * 
 * def get_cursor_pos_y():
 *     return cimgui.GetCursorPosY()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorPosY();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7582, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7581
 * 
 * 
 * def get_cursor_pos_y():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosY()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_cursor_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7585
 * 
 * 
 * def set_cursor_pos(local_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in local coordinates [0..<window size>] (useful to work with ImDrawList API)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_429set_cursor_pos(PyObject *__pyx_self, PyObject *__pyx_v_local_pos); /*proto*/
static char __pyx_doc_5imgui_4core_428set_cursor_pos[] = "set_cursor_pos(local_pos)\nSet the cursor position in local coordinates [0..<window size>] (useful to work with ImDrawList API)\n\n    .. wraps::\n        ImVec2 SetCursorScreenPos(const ImVec2& screen_pos)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_429set_cursor_pos = {"set_cursor_pos", (PyCFunction)__pyx_pw_5imgui_4core_429set_cursor_pos, METH_O, __pyx_doc_5imgui_4core_428set_cursor_pos};
static PyObject *__pyx_pw_5imgui_4core_429set_cursor_pos(PyObject *__pyx_self, PyObject *__pyx_v_local_pos) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_428set_cursor_pos(__pyx_self, ((PyObject *)__pyx_v_local_pos));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_428set_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_local_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_pos", 0);

  /* "imgui/core.pyx":7591
 *         ImVec2 SetCursorScreenPos(const ImVec2& screen_pos)
 *     """
 *     cimgui.SetCursorPos(_cast_tuple_ImVec2(local_pos))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_local_pos); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 7591, __pyx_L1_error)
  try {
    ImGui::SetCursorPos(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7591, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7585
 * 
 * 
 * def set_cursor_pos(local_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in local coordinates [0..<window size>] (useful to work with ImDrawList API)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_cursor_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7594
 * 
 * 
 * def set_cursor_pos_x(float x):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosX(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_431set_cursor_pos_x(PyObject *__pyx_self, PyObject *__pyx_arg_x); /*proto*/
static char __pyx_doc_5imgui_4core_430set_cursor_pos_x[] = "set_cursor_pos_x(float x)";
static PyMethodDef __pyx_mdef_5imgui_4core_431set_cursor_pos_x = {"set_cursor_pos_x", (PyCFunction)__pyx_pw_5imgui_4core_431set_cursor_pos_x, METH_O, __pyx_doc_5imgui_4core_430set_cursor_pos_x};
static PyObject *__pyx_pw_5imgui_4core_431set_cursor_pos_x(PyObject *__pyx_self, PyObject *__pyx_arg_x) {
  float __pyx_v_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_pos_x (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsFloat(__pyx_arg_x); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7594, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_cursor_pos_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_430set_cursor_pos_x(__pyx_self, ((float)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_430set_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_pos_x", 0);

  /* "imgui/core.pyx":7595
 * 
 * def set_cursor_pos_x(float x):
 *     cimgui.SetCursorPosX(x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetCursorPosX(__pyx_v_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7595, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7594
 * 
 * 
 * def set_cursor_pos_x(float x):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosX(x)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_cursor_pos_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7598
 * 
 * 
 * def set_cursor_pos_y(float y):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosY(y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_433set_cursor_pos_y(PyObject *__pyx_self, PyObject *__pyx_arg_y); /*proto*/
static char __pyx_doc_5imgui_4core_432set_cursor_pos_y[] = "set_cursor_pos_y(float y)";
static PyMethodDef __pyx_mdef_5imgui_4core_433set_cursor_pos_y = {"set_cursor_pos_y", (PyCFunction)__pyx_pw_5imgui_4core_433set_cursor_pos_y, METH_O, __pyx_doc_5imgui_4core_432set_cursor_pos_y};
static PyObject *__pyx_pw_5imgui_4core_433set_cursor_pos_y(PyObject *__pyx_self, PyObject *__pyx_arg_y) {
  float __pyx_v_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_pos_y (wrapper)", 0);
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsFloat(__pyx_arg_y); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7598, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_cursor_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_432set_cursor_pos_y(__pyx_self, ((float)__pyx_v_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_432set_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_pos_y", 0);

  /* "imgui/core.pyx":7599
 * 
 * def set_cursor_pos_y(float y):
 *     cimgui.SetCursorPosY(y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetCursorPosY(__pyx_v_y);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7599, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7598
 * 
 * 
 * def set_cursor_pos_y(float y):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosY(y)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_cursor_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7602
 * 
 * 
 * def get_cursor_start_pos():             # <<<<<<<<<<<<<<
 *     """Get the initial cursor position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_435get_cursor_start_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_434get_cursor_start_pos[] = "get_cursor_start_pos()\nGet the initial cursor position.\n\n    .. wraps::\n        ImVec2 GetCursorStartPos()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_435get_cursor_start_pos = {"get_cursor_start_pos", (PyCFunction)__pyx_pw_5imgui_4core_435get_cursor_start_pos, METH_NOARGS, __pyx_doc_5imgui_4core_434get_cursor_start_pos};
static PyObject *__pyx_pw_5imgui_4core_435get_cursor_start_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_start_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_434get_cursor_start_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_434get_cursor_start_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_start_pos", 0);

  /* "imgui/core.pyx":7608
 *         ImVec2 GetCursorStartPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetCursorStartPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorStartPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7608, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7602
 * 
 * 
 * def get_cursor_start_pos():             # <<<<<<<<<<<<<<
 *     """Get the initial cursor position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_cursor_start_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7611
 * 
 * 
 * def get_cursor_screen_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_437get_cursor_screen_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_436get_cursor_screen_pos[] = "get_cursor_screen_pos()\nGet the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)\n\n    .. wraps::\n        ImVec2 GetCursorScreenPos()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_437get_cursor_screen_pos = {"get_cursor_screen_pos", (PyCFunction)__pyx_pw_5imgui_4core_437get_cursor_screen_pos, METH_NOARGS, __pyx_doc_5imgui_4core_436get_cursor_screen_pos};
static PyObject *__pyx_pw_5imgui_4core_437get_cursor_screen_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_screen_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_436get_cursor_screen_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_436get_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_screen_pos", 0);

  /* "imgui/core.pyx":7617
 *         ImVec2 GetCursorScreenPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetCursorScreenPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorScreenPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7617, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7611
 * 
 * 
 * def get_cursor_screen_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_cursor_screen_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7620
 * 
 * 
 * def set_cursor_screen_pos(screen_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_439set_cursor_screen_pos(PyObject *__pyx_self, PyObject *__pyx_v_screen_pos); /*proto*/
static char __pyx_doc_5imgui_4core_438set_cursor_screen_pos[] = "set_cursor_screen_pos(screen_pos)\nSet the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)\n\n    .. wraps::\n        ImVec2 SetCursorScreenPos(const ImVec2& screen_pos)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_439set_cursor_screen_pos = {"set_cursor_screen_pos", (PyCFunction)__pyx_pw_5imgui_4core_439set_cursor_screen_pos, METH_O, __pyx_doc_5imgui_4core_438set_cursor_screen_pos};
static PyObject *__pyx_pw_5imgui_4core_439set_cursor_screen_pos(PyObject *__pyx_self, PyObject *__pyx_v_screen_pos) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_screen_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_438set_cursor_screen_pos(__pyx_self, ((PyObject *)__pyx_v_screen_pos));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_438set_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_screen_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_screen_pos", 0);

  /* "imgui/core.pyx":7626
 *         ImVec2 SetCursorScreenPos(const ImVec2& screen_pos)
 *     """
 *     cimgui.SetCursorScreenPos(_cast_tuple_ImVec2(screen_pos))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_screen_pos); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 7626, __pyx_L1_error)
  try {
    ImGui::SetCursorScreenPos(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7626, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7620
 * 
 * 
 * def set_cursor_screen_pos(screen_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_cursor_screen_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7635
 * set_cursor_screen_position = set_cursor_screen_pos
 * 
 * def align_text_to_frame_padding():             # <<<<<<<<<<<<<<
 *     cimgui.AlignTextToFramePadding()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_441align_text_to_frame_padding(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_440align_text_to_frame_padding[] = "align_text_to_frame_padding()";
static PyMethodDef __pyx_mdef_5imgui_4core_441align_text_to_frame_padding = {"align_text_to_frame_padding", (PyCFunction)__pyx_pw_5imgui_4core_441align_text_to_frame_padding, METH_NOARGS, __pyx_doc_5imgui_4core_440align_text_to_frame_padding};
static PyObject *__pyx_pw_5imgui_4core_441align_text_to_frame_padding(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("align_text_to_frame_padding (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_440align_text_to_frame_padding(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_440align_text_to_frame_padding(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("align_text_to_frame_padding", 0);

  /* "imgui/core.pyx":7636
 * 
 * def align_text_to_frame_padding():
 *     cimgui.AlignTextToFramePadding()             # <<<<<<<<<<<<<<
 * 
 * def get_text_line_height():
 */
  try {
    ImGui::AlignTextToFramePadding();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7636, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7635
 * set_cursor_screen_position = set_cursor_screen_pos
 * 
 * def align_text_to_frame_padding():             # <<<<<<<<<<<<<<
 *     cimgui.AlignTextToFramePadding()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.align_text_to_frame_padding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7638
 *     cimgui.AlignTextToFramePadding()
 * 
 * def get_text_line_height():             # <<<<<<<<<<<<<<
 *     """Get text line height.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_443get_text_line_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_442get_text_line_height[] = "get_text_line_height()\nGet text line height.\n\n    Returns:\n        int: text line height.\n\n    .. wraps::\n        void GetTextLineHeight()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_443get_text_line_height = {"get_text_line_height", (PyCFunction)__pyx_pw_5imgui_4core_443get_text_line_height, METH_NOARGS, __pyx_doc_5imgui_4core_442get_text_line_height};
static PyObject *__pyx_pw_5imgui_4core_443get_text_line_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_text_line_height (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_442get_text_line_height(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_442get_text_line_height(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_text_line_height", 0);

  /* "imgui/core.pyx":7647
 *         void GetTextLineHeight()
 *     """
 *     return cimgui.GetTextLineHeight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetTextLineHeight();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7647, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7638
 *     cimgui.AlignTextToFramePadding()
 * 
 * def get_text_line_height():             # <<<<<<<<<<<<<<
 *     """Get text line height.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_text_line_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7650
 * 
 * 
 * def get_text_line_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """Get text line height, with spacing.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_445get_text_line_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_444get_text_line_height_with_spacing[] = "get_text_line_height_with_spacing()\nGet text line height, with spacing.\n\n    Returns:\n        int: text line height, with spacing.\n\n    .. wraps::\n        void GetTextLineHeightWithSpacing()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_445get_text_line_height_with_spacing = {"get_text_line_height_with_spacing", (PyCFunction)__pyx_pw_5imgui_4core_445get_text_line_height_with_spacing, METH_NOARGS, __pyx_doc_5imgui_4core_444get_text_line_height_with_spacing};
static PyObject *__pyx_pw_5imgui_4core_445get_text_line_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_text_line_height_with_spacing (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_444get_text_line_height_with_spacing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_444get_text_line_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_text_line_height_with_spacing", 0);

  /* "imgui/core.pyx":7659
 *         void GetTextLineHeightWithSpacing()
 *     """
 *     return cimgui.GetTextLineHeightWithSpacing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetTextLineHeightWithSpacing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7659, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7650
 * 
 * 
 * def get_text_line_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """Get text line height, with spacing.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_text_line_height_with_spacing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7662
 * 
 * 
 * def get_frame_height():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_447get_frame_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_446get_frame_height[] = "get_frame_height()\n~ FontSize + style.FramePadding.y * 2\n\n    .. wraps::\n        float GetFrameHeight()\n    float GetFrameHeightWithSpacing() except +\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_447get_frame_height = {"get_frame_height", (PyCFunction)__pyx_pw_5imgui_4core_447get_frame_height, METH_NOARGS, __pyx_doc_5imgui_4core_446get_frame_height};
static PyObject *__pyx_pw_5imgui_4core_447get_frame_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frame_height (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_446get_frame_height(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_446get_frame_height(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frame_height", 0);

  /* "imgui/core.pyx":7669
 *     float GetFrameHeightWithSpacing() except +
 *     """
 *     return cimgui.GetFrameHeight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFrameHeight();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7669, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7662
 * 
 * 
 * def get_frame_height():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_frame_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7672
 * 
 * 
 * def get_frame_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_449get_frame_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_448get_frame_height_with_spacing[] = "get_frame_height_with_spacing()\n~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)\n\n    .. wraps::\n        float GetFrameHeightWithSpacing()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_449get_frame_height_with_spacing = {"get_frame_height_with_spacing", (PyCFunction)__pyx_pw_5imgui_4core_449get_frame_height_with_spacing, METH_NOARGS, __pyx_doc_5imgui_4core_448get_frame_height_with_spacing};
static PyObject *__pyx_pw_5imgui_4core_449get_frame_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frame_height_with_spacing (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_448get_frame_height_with_spacing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_448get_frame_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frame_height_with_spacing", 0);

  /* "imgui/core.pyx":7678
 *         float GetFrameHeightWithSpacing()
 *     """
 *     return cimgui.GetFrameHeightWithSpacing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFrameHeightWithSpacing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7678, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7672
 * 
 * 
 * def get_frame_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_frame_height_with_spacing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7681
 * 
 * 
 * def create_context(_FontAtlas shared_font_atlas = None):             # <<<<<<<<<<<<<<
 *     """CreateContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_451create_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_450create_context[] = "create_context(_FontAtlas shared_font_atlas=None)\nCreateContext\n\n    .. todo::\n        Add an example\n\n    .. wraps::\n        ImGuiContext* CreateContext(\n                # note: optional\n                ImFontAtlas* shared_font_atlas = NULL);\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_451create_context = {"create_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_451create_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_450create_context};
static PyObject *__pyx_pw_5imgui_4core_451create_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_shared_font_atlas = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_context (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shared_font_atlas,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_5imgui_4core__FontAtlas *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shared_font_atlas);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_context") < 0)) __PYX_ERR(0, 7681, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shared_font_atlas = ((struct __pyx_obj_5imgui_4core__FontAtlas *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_context", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7681, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.create_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shared_font_atlas), __pyx_ptype_5imgui_4core__FontAtlas, 1, "shared_font_atlas", 0))) __PYX_ERR(0, 7681, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_450create_context(__pyx_self, __pyx_v_shared_font_atlas);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_450create_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_shared_font_atlas) {
  ImGuiContext *__pyx_v__ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  ImGuiContext *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_context", 0);

  /* "imgui/core.pyx":7696
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 *     if (shared_font_atlas):             # <<<<<<<<<<<<<<
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_shared_font_atlas)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 7696, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":7697
 * 
 *     if (shared_font_atlas):
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         _ptr = cimgui.CreateContext(NULL)
 */
    try {
      __pyx_t_2 = ImGui::CreateContext(__pyx_v_shared_font_atlas->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7697, __pyx_L1_error)
    }
    __pyx_v__ptr = __pyx_t_2;

    /* "imgui/core.pyx":7696
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 *     if (shared_font_atlas):             # <<<<<<<<<<<<<<
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":7699
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)
 *     else:
 *         _ptr = cimgui.CreateContext(NULL)             # <<<<<<<<<<<<<<
 * 
 *     return _ImGuiContext.from_ptr(_ptr)
 */
  /*else*/ {
    try {
      __pyx_t_2 = ImGui::CreateContext(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7699, __pyx_L1_error)
    }
    __pyx_v__ptr = __pyx_t_2;
  }
  __pyx_L3:;

  /* "imgui/core.pyx":7701
 *         _ptr = cimgui.CreateContext(NULL)
 * 
 *     return _ImGuiContext.from_ptr(_ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_5imgui_4core_13_ImGuiContext_from_ptr(__pyx_v__ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7681
 * 
 * 
 * def create_context(_FontAtlas shared_font_atlas = None):             # <<<<<<<<<<<<<<
 *     """CreateContext
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.create_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7704
 * 
 * 
 * def destroy_context(_ImGuiContext ctx = None):             # <<<<<<<<<<<<<<
 *     """DestroyContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_453destroy_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_452destroy_context[] = "destroy_context(_ImGuiContext ctx=None)\nDestroyContext\n\n    .. wraps::\n        DestroyContext(\n                # note: optional\n                ImGuiContext* ctx = NULL);\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_453destroy_context = {"destroy_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_453destroy_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_452destroy_context};
static PyObject *__pyx_pw_5imgui_4core_453destroy_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_ctx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy_context (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ctx,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_5imgui_4core__ImGuiContext *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ctx);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "destroy_context") < 0)) __PYX_ERR(0, 7704, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ctx = ((struct __pyx_obj_5imgui_4core__ImGuiContext *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroy_context", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7704, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.destroy_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ctx), __pyx_ptype_5imgui_4core__ImGuiContext, 1, "ctx", 0))) __PYX_ERR(0, 7704, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_452destroy_context(__pyx_self, __pyx_v_ctx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_452destroy_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_ctx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy_context", 0);

  /* "imgui/core.pyx":7713
 *     """
 * 
 *     if ctx and ctx._ptr != NULL:             # <<<<<<<<<<<<<<
 *         cimgui.DestroyContext(ctx._ptr)
 *         ctx._ptr = NULL
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_ctx)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 7713, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_ctx->_ptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "imgui/core.pyx":7714
 * 
 *     if ctx and ctx._ptr != NULL:
 *         cimgui.DestroyContext(ctx._ptr)             # <<<<<<<<<<<<<<
 *         ctx._ptr = NULL
 *     else:
 */
    try {
      ImGui::DestroyContext(__pyx_v_ctx->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7714, __pyx_L1_error)
    }

    /* "imgui/core.pyx":7715
 *     if ctx and ctx._ptr != NULL:
 *         cimgui.DestroyContext(ctx._ptr)
 *         ctx._ptr = NULL             # <<<<<<<<<<<<<<
 *     else:
 *         raise RuntimeError("Context invalid (None or destroyed)")
 */
    __pyx_v_ctx->_ptr = NULL;

    /* "imgui/core.pyx":7713
 *     """
 * 
 *     if ctx and ctx._ptr != NULL:             # <<<<<<<<<<<<<<
 *         cimgui.DestroyContext(ctx._ptr)
 *         ctx._ptr = NULL
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":7717
 *         ctx._ptr = NULL
 *     else:
 *         raise RuntimeError("Context invalid (None or destroyed)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 7717, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "imgui/core.pyx":7704
 * 
 * 
 * def destroy_context(_ImGuiContext ctx = None):             # <<<<<<<<<<<<<<
 *     """DestroyContext
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.destroy_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7720
 * 
 * 
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     """GetCurrentContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_455get_current_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_454get_current_context[] = "get_current_context()\nGetCurrentContext\n\n    .. wraps::\n        ImGuiContext* GetCurrentContext();\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_455get_current_context = {"get_current_context", (PyCFunction)__pyx_pw_5imgui_4core_455get_current_context, METH_NOARGS, __pyx_doc_5imgui_4core_454get_current_context};
static PyObject *__pyx_pw_5imgui_4core_455get_current_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_context (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_454get_current_context(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_454get_current_context(CYTHON_UNUSED PyObject *__pyx_self) {
  ImGuiContext *__pyx_v__ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiContext *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_current_context", 0);

  /* "imgui/core.pyx":7728
 * 
 *     cdef cimgui.ImGuiContext* _ptr
 *     _ptr = cimgui.GetCurrentContext()             # <<<<<<<<<<<<<<
 *     return _ImGuiContext.from_ptr(_ptr)
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7728, __pyx_L1_error)
  }
  __pyx_v__ptr = __pyx_t_1;

  /* "imgui/core.pyx":7729
 *     cdef cimgui.ImGuiContext* _ptr
 *     _ptr = cimgui.GetCurrentContext()
 *     return _ImGuiContext.from_ptr(_ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5imgui_4core_13_ImGuiContext_from_ptr(__pyx_v__ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7720
 * 
 * 
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     """GetCurrentContext
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_current_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7732
 * 
 * 
 * def set_current_context(_ImGuiContext ctx):             # <<<<<<<<<<<<<<
 *     """SetCurrentContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_457set_current_context(PyObject *__pyx_self, PyObject *__pyx_v_ctx); /*proto*/
static char __pyx_doc_5imgui_4core_456set_current_context[] = "set_current_context(_ImGuiContext ctx)\nSetCurrentContext\n\n    .. wraps::\n        SetCurrentContext(\n                ImGuiContext *ctx);\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_457set_current_context = {"set_current_context", (PyCFunction)__pyx_pw_5imgui_4core_457set_current_context, METH_O, __pyx_doc_5imgui_4core_456set_current_context};
static PyObject *__pyx_pw_5imgui_4core_457set_current_context(PyObject *__pyx_self, PyObject *__pyx_v_ctx) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_current_context (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ctx), __pyx_ptype_5imgui_4core__ImGuiContext, 1, "ctx", 0))) __PYX_ERR(0, 7732, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_456set_current_context(__pyx_self, ((struct __pyx_obj_5imgui_4core__ImGuiContext *)__pyx_v_ctx));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_456set_current_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__ImGuiContext *__pyx_v_ctx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_current_context", 0);

  /* "imgui/core.pyx":7739
 *                 ImGuiContext *ctx);
 *     """
 *     cimgui.SetCurrentContext(ctx._ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetCurrentContext(__pyx_v_ctx->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7739, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7732
 * 
 * 
 * def set_current_context(_ImGuiContext ctx):             # <<<<<<<<<<<<<<
 *     """SetCurrentContext
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_current_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7742
 * 
 * 
 * def push_id(str str_id):             # <<<<<<<<<<<<<<
 *     """Push an ID into the ID stack
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_459push_id(PyObject *__pyx_self, PyObject *__pyx_v_str_id); /*proto*/
static char __pyx_doc_5imgui_4core_458push_id[] = "push_id(str str_id)\nPush an ID into the ID stack\n\n    Args:\n        str_id (str): ID to push\n\n      wraps::\n        PushID(const char* str_id)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_459push_id = {"push_id", (PyCFunction)__pyx_pw_5imgui_4core_459push_id, METH_O, __pyx_doc_5imgui_4core_458push_id};
static PyObject *__pyx_pw_5imgui_4core_459push_id(PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_id (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_str_id), (&PyString_Type), 1, "str_id", 1))) __PYX_ERR(0, 7742, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_458push_id(__pyx_self, ((PyObject*)__pyx_v_str_id));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_458push_id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_id", 0);

  /* "imgui/core.pyx":7751
 *         PushID(const char* str_id)
 *     """
 *     cimgui.PushID(_bytes(str_id))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_str_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7751, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7751, __pyx_L1_error)
  try {
    ImGui::PushID(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7751, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7742
 * 
 * 
 * def push_id(str str_id):             # <<<<<<<<<<<<<<
 *     """Push an ID into the ID stack
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7754
 * 
 * 
 * def pop_id():             # <<<<<<<<<<<<<<
 *     """Pop from the ID stack
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_461pop_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_460pop_id[] = "pop_id()\nPop from the ID stack\n\n      wraps::\n        PopID()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_461pop_id = {"pop_id", (PyCFunction)__pyx_pw_5imgui_4core_461pop_id, METH_NOARGS, __pyx_doc_5imgui_4core_460pop_id};
static PyObject *__pyx_pw_5imgui_4core_461pop_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_id (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_460pop_id(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_460pop_id(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_id", 0);

  /* "imgui/core.pyx":7760
 *         PopID()
 *     """
 *     cimgui.PopID()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7760, __pyx_L1_error)
  }

  /* "imgui/core.pyx":7754
 * 
 * 
 * def pop_id():             # <<<<<<<<<<<<<<
 *     """Pop from the ID stack
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7774
 * # === ansifeed extras ===
 * 
 * def _ansifeed_text_ansi(str text):             # <<<<<<<<<<<<<<
 *     """Add ANSI-escape-formatted text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_463_ansifeed_text_ansi(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_462_ansifeed_text_ansi[] = "_ansifeed_text_ansi(str text)\nAdd ANSI-escape-formatted text to current widget stack.\n\n    Similar to imgui.text, but with ANSI parsing.\n    imgui.text documentation below:\n\n    .. visual-example::\n        :title: simple text widget\n        :height: 80\n        :auto_layout:\n\n        imgui.begin(\"Example: simple text\")\n        imgui.extra.text_ansi(\"Default \033[31m colored \033[m default\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        Text(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_463_ansifeed_text_ansi = {"_ansifeed_text_ansi", (PyCFunction)__pyx_pw_5imgui_4core_463_ansifeed_text_ansi, METH_O, __pyx_doc_5imgui_4core_462_ansifeed_text_ansi};
static PyObject *__pyx_pw_5imgui_4core_463_ansifeed_text_ansi(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 7774, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_462_ansifeed_text_ansi(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_462_ansifeed_text_ansi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi", 0);

  /* "imgui/core.pyx":7796
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     ansifeed.TextAnsi("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7796, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7796, __pyx_L1_error)
  try {
    ImGui::TextAnsi(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7796, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7774
 * # === ansifeed extras ===
 * 
 * def _ansifeed_text_ansi(str text):             # <<<<<<<<<<<<<<
 *     """Add ANSI-escape-formatted text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._ansifeed_text_ansi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7799
 * 
 * 
 * def _ansifeed_text_ansi_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add pre-colored ANSI-escape-formatted text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_465_ansifeed_text_ansi_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_464_ansifeed_text_ansi_colored[] = "_ansifeed_text_ansi_colored(str text, float r, float g, float b, float a=1.)\nAdd pre-colored ANSI-escape-formatted text to current widget stack.\n\n    Similar to imgui.text_colored, but with ANSI parsing.\n    imgui.text_colored documentation below:\n\n    It is a shortcut for:\n\n    .. code-block:: python\n\n        imgui.push_style_color(imgui.COLOR_TEXT, r, g, b, a)\n        imgui.extra.text_ansi(text)\n        imgui.pop_style_color()\n\n\n    .. visual-example::\n        :title: colored text widget\n        :height: 100\n        :auto_layout:\n\n        imgui.begin(\"Example: colored text\")\n        imgui.text_ansi_colored(\"Default \033[31m colored \033[m default\", 1, 0, 0)\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n\n    .. wraps::\n        TextColored(const ImVec4& col, const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_465_ansifeed_text_ansi_colored = {"_ansifeed_text_ansi_colored", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_465_ansifeed_text_ansi_colored, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_464_ansifeed_text_ansi_colored};
static PyObject *__pyx_pw_5imgui_4core_465_ansifeed_text_ansi_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi_colored (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, 1); __PYX_ERR(0, 7799, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, 2); __PYX_ERR(0, 7799, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, 3); __PYX_ERR(0, 7799, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_ansifeed_text_ansi_colored") < 0)) __PYX_ERR(0, 7799, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7799, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7799, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7799, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7799, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7799, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._ansifeed_text_ansi_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 7799, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_464_ansifeed_text_ansi_colored(__pyx_self, __pyx_v_text, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_464_ansifeed_text_ansi_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi_colored", 0);

  /* "imgui/core.pyx":7834
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     ansifeed.TextAnsiColored(_cast_args_ImVec4(r, g, b, a), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7834, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7834, __pyx_L1_error)
  try {
    ImGui::TextAnsiColored(__pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a), ((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7834, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7799
 * 
 * 
 * def _ansifeed_text_ansi_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add pre-colored ANSI-escape-formatted text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._ansifeed_text_ansi_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_468generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":7840
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_467_py_font(PyObject *__pyx_self, PyObject *__pyx_v_font); /*proto*/
static char __pyx_doc_5imgui_4core_466_py_font[] = "_py_font(_Font font)\nUse specified font in given context.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 320\n\n        io = imgui.get_io()\n\n        new_font = io.fonts.add_font_from_file_ttf(\"DroidSans.ttf\", 20)\n        impl.refresh_font_texture()\n\n        # later in frame code\n\n        imgui.begin(\"Default Window\")\n\n        imgui.text(\"Text displayed using default font\")\n        with imgui.font(new_font):\n            imgui.text(\"Text displayed using custom font\")\n\n        imgui.end()\n\n    Args:\n        font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_467_py_font = {"_py_font", (PyCFunction)__pyx_pw_5imgui_4core_467_py_font, METH_O, __pyx_doc_5imgui_4core_466_py_font};
static PyObject *__pyx_pw_5imgui_4core_467_py_font(PyObject *__pyx_self, PyObject *__pyx_v_font) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_font (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_font), __pyx_ptype_5imgui_4core__Font, 1, "font", 0))) __PYX_ERR(0, 7840, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_466_py_font(__pyx_self, ((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_font));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_466_py_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_font", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *)__pyx_tp_new_5imgui_4core___pyx_scope_struct___py_font(__pyx_ptype_5imgui_4core___pyx_scope_struct___py_font, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7840, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_font = __pyx_v_font;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_font);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_font);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_468generator, __pyx_codeobj__60, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_font, __pyx_n_s_py_font, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 7840, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._py_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_468generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_font", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7840, __pyx_L1_error)

  /* "imgui/core.pyx":7866
 *         font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.
 *     """
 *     push_font(font)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_font()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_push_font); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_font)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_cur_scope->__pyx_v_font));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7867
 *     """
 *     push_font(font)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_font()
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7867, __pyx_L1_error)

  /* "imgui/core.pyx":7868
 *     push_font(font)
 *     yield
 *     pop_font()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pop_font); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":7840
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_py_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_471generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":7872
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_470_py_styled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_469_py_styled[] = "_py_styled(ImGuiStyleVar variable, value)";
static PyMethodDef __pyx_mdef_5imgui_4core_470_py_styled = {"_py_styled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_470_py_styled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_469_py_styled};
static PyObject *__pyx_pw_5imgui_4core_470_py_styled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiStyleVar __pyx_v_variable;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_styled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_styled", 1, 2, 2, 1); __PYX_ERR(0, 7872, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_py_styled") < 0)) __PYX_ERR(0, 7872, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiStyleVar(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7872, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_py_styled", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7872, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._py_styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_469_py_styled(__pyx_self, __pyx_v_variable, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_469_py_styled(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_styled", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *)__pyx_tp_new_5imgui_4core___pyx_scope_struct_1__py_styled(__pyx_ptype_5imgui_4core___pyx_scope_struct_1__py_styled, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7872, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variable = __pyx_v_variable;
  __pyx_cur_scope->__pyx_v_value = __pyx_v_value;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_value);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_value);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_471generator1, __pyx_codeobj__61, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_styled, __pyx_n_s_py_styled, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 7872, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._py_styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_471generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  struct __pyx_opt_args_5imgui_4core_pop_style_var __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_styled", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7872, __pyx_L1_error)

  /* "imgui/core.pyx":7875
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_var(variable, value)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_style_var(count)
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_push_style_var(__pyx_cur_scope->__pyx_v_variable, __pyx_cur_scope->__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":7876
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_var(variable, value)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_style_var(count)
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7876, __pyx_L1_error)

  /* "imgui/core.pyx":7877
 *     count = push_style_var(variable, value)
 *     yield
 *     pop_style_var(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7877, __pyx_L1_error)
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.count = __pyx_t_2;
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_style_var(0, &__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":7872
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_py_styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_474generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":7881
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_473_py_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_472_py_colored[] = "_py_colored(ImGuiCol variable, float r, float g, float b, float a=1.)";
static PyMethodDef __pyx_mdef_5imgui_4core_473_py_colored = {"_py_colored", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_473_py_colored, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_472_py_colored};
static PyObject *__pyx_pw_5imgui_4core_473_py_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiCol __pyx_v_variable;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_colored (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, 1); __PYX_ERR(0, 7881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, 2); __PYX_ERR(0, 7881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, 3); __PYX_ERR(0, 7881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_py_colored") < 0)) __PYX_ERR(0, 7881, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7882, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7883, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7884, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7885, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7886, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7881, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._py_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_472_py_colored(__pyx_self, __pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_472_py_colored(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_colored", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *)__pyx_tp_new_5imgui_4core___pyx_scope_struct_2__py_colored(__pyx_ptype_5imgui_4core___pyx_scope_struct_2__py_colored, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7881, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variable = __pyx_v_variable;
  __pyx_cur_scope->__pyx_v_r = __pyx_v_r;
  __pyx_cur_scope->__pyx_v_g = __pyx_v_g;
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_474generator2, __pyx_codeobj__62, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_colored, __pyx_n_s_py_colored, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 7881, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._py_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_474generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_push_style_color __pyx_t_2;
  unsigned int __pyx_t_3;
  struct __pyx_opt_args_5imgui_4core_pop_style_color __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_colored", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7881, __pyx_L1_error)

  /* "imgui/core.pyx":7890
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_color(variable, r, g, b, a)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_style_color(count)
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.a = __pyx_cur_scope->__pyx_v_a;
  __pyx_t_1 = __pyx_f_5imgui_4core_push_style_color(__pyx_cur_scope->__pyx_v_variable, __pyx_cur_scope->__pyx_v_r, __pyx_cur_scope->__pyx_v_g, __pyx_cur_scope->__pyx_v_b, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":7891
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_color(variable, r, g, b, a)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_style_color(count)
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7891, __pyx_L1_error)

  /* "imgui/core.pyx":7892
 *     count = push_style_color(variable, r, g, b, a)
 *     yield
 *     pop_style_color(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7892, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.count = __pyx_t_3;
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_style_color(0, &__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":7881
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_py_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_477generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":7896
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_476_py_istyled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_475_py_istyled[] = "_py_istyled(*variables_and_values)";
static PyMethodDef __pyx_mdef_5imgui_4core_476_py_istyled = {"_py_istyled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_476_py_istyled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_475_py_istyled};
static PyObject *__pyx_pw_5imgui_4core_476_py_istyled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_variables_and_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_istyled (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_py_istyled", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_variables_and_values = __pyx_args;
  __pyx_r = __pyx_pf_5imgui_4core_475_py_istyled(__pyx_self, __pyx_v_variables_and_values);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_variables_and_values);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_475_py_istyled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variables_and_values) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_istyled", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *)__pyx_tp_new_5imgui_4core___pyx_scope_struct_3__py_istyled(__pyx_ptype_5imgui_4core___pyx_scope_struct_3__py_istyled, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7896, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variables_and_values = __pyx_v_variables_and_values;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_variables_and_values);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_variables_and_values);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_477generator3, __pyx_codeobj__63, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_istyled, __pyx_n_s_py_istyled, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 7896, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._py_istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_477generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  ImGuiStyleVar __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_istyled", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L18_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7896, __pyx_L1_error)

  /* "imgui/core.pyx":7898
 * def _py_istyled(*variables_and_values):
 *     # todo: rename to nstyled?
 *     count = 0             # <<<<<<<<<<<<<<
 *     iterator = iter(variables_and_values)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_cur_scope->__pyx_v_count = __pyx_int_0;

  /* "imgui/core.pyx":7899
 *     # todo: rename to nstyled?
 *     count = 0
 *     iterator = iter(variables_and_values)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_variables_and_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":7901
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
  /*try:*/ {
    {
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "imgui/core.pyx":7903
 *     try:
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):             # <<<<<<<<<<<<<<
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_izip_longest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7903, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 7903, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterator);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterator);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_iterator);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterator);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterator);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_iterator);
        __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 7903, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_fillvalue, Py_None) < 0) __PYX_ERR(0, 7903, __pyx_L7_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 7903, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 7903, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7903, __pyx_L7_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 7903, __pyx_L7_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 7903, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 7903, __pyx_L7_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 7903, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_9(__pyx_t_6);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 7903, __pyx_L7_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
            PyObject* sequence = __pyx_t_7;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 7903, __pyx_L7_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            #else
            __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 7903, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7903, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 7903, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_5 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_5);
            index = 1; __pyx_t_1 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_1)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_1);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 7903, __pyx_L7_error)
            __pyx_t_11 = NULL;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 7903, __pyx_L7_error)
            __pyx_L16_unpacking_done:;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_var);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_var, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_val);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_val, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "imgui/core.pyx":7906
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 *             if val is not None:             # <<<<<<<<<<<<<<
 *                 count += push_style_var(var, val)
 *             else:
 */
          __pyx_t_12 = (__pyx_cur_scope->__pyx_v_val != Py_None);
          __pyx_t_13 = (__pyx_t_12 != 0);
          if (likely(__pyx_t_13)) {

            /* "imgui/core.pyx":7907
 *             #       var equal to None
 *             if val is not None:
 *                 count += push_style_var(var, val)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(
 */
            __pyx_t_14 = __Pyx_PyInt_As_ImGuiStyleVar(__pyx_cur_scope->__pyx_v_var); if (unlikely((__pyx_t_14 == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7907, __pyx_L7_error)
            __pyx_t_7 = __pyx_f_5imgui_4core_push_style_var(__pyx_t_14, __pyx_cur_scope->__pyx_v_val, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 7907, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_count, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7907, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_count);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_count, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "imgui/core.pyx":7906
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 *             if val is not None:             # <<<<<<<<<<<<<<
 *                 count += push_style_var(var, val)
 *             else:
 */
            goto __pyx_L17;
          }

          /* "imgui/core.pyx":7909
 *                 count += push_style_var(var, val)
 *             else:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)
 */
          /*else*/ {

            /* "imgui/core.pyx":7911
 *                 raise ValueError(
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)             # <<<<<<<<<<<<<<
 *                 )
 *     except:
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unsufficient_style_info_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 7911, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
              }
            }
            __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_cur_scope->__pyx_v_var) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_cur_scope->__pyx_v_var);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7911, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "imgui/core.pyx":7909
 *                 count += push_style_var(var, val)
 *             else:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)
 */
            __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 7909, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_Raise(__pyx_t_7, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __PYX_ERR(0, 7909, __pyx_L7_error)
          }
          __pyx_L17:;

          /* "imgui/core.pyx":7903
 *     try:
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):             # <<<<<<<<<<<<<<
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 */
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "imgui/core.pyx":7901
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
      }

      /* "imgui/core.pyx":7916
 *         raise
 *     else:
 *         yield             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
      /*else:*/ {
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_t_4);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L18_resume_from_yield:;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_4);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7916, __pyx_L9_except_error)
      }
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "imgui/core.pyx":7913
 *                     "".format(var)
 *                 )
 *     except:             # <<<<<<<<<<<<<<
 *         raise
 *     else:
 */
      /*except:*/ {
        __Pyx_AddTraceback("imgui.core._py_istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_1) < 0) __PYX_ERR(0, 7913, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_1);

        /* "imgui/core.pyx":7914
 *                 )
 *     except:
 *         raise             # <<<<<<<<<<<<<<
 *     else:
 *         yield
 */
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_7, __pyx_t_1);
        __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_1 = 0; 
        __PYX_ERR(0, 7914, __pyx_L9_except_error)
      }
      __pyx_L9_except_error:;

      /* "imgui/core.pyx":7901
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L5_error;
      __pyx_L12_try_end:;
    }
  }

  /* "imgui/core.pyx":7920
 *     finally:
 *         # perf: short wiring despite we have a wrapper for this
 *         cimgui.PopStyleVar(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7920, __pyx_L1_error)
      try {
        ImGui::PopStyleVar(__pyx_t_15);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 7920, __pyx_L1_error)
      }
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_assign
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2) < 0)) __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __pyx_t_15 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7920, __pyx_L22_error)
        try {
          ImGui::PopStyleVar(__pyx_t_21);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 7920, __pyx_L22_error)
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_3, __pyx_t_2);
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
      __pyx_L22_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":7896
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("_py_istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_480generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":7924
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_479_py_scoped(PyObject *__pyx_self, PyObject *__pyx_v_str_id); /*proto*/
static char __pyx_doc_5imgui_4core_478_py_scoped[] = "_py_scoped(str str_id)\nUse scoped ID within a block of code.\n\n    This context manager can be used to distinguish widgets sharing\n    same implicit identifiers without manual calling of :func:`push_id`\n    :func:`pop_id` functions.\n\n    Example:\n\n    Args:\n        str_id (str): ID to push and pop within marked scope\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_479_py_scoped = {"_py_scoped", (PyCFunction)__pyx_pw_5imgui_4core_479_py_scoped, METH_O, __pyx_doc_5imgui_4core_478_py_scoped};
static PyObject *__pyx_pw_5imgui_4core_479_py_scoped(PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_scoped (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_str_id), (&PyString_Type), 1, "str_id", 1))) __PYX_ERR(0, 7924, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_478_py_scoped(__pyx_self, ((PyObject*)__pyx_v_str_id));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_478_py_scoped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_scoped", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *)__pyx_tp_new_5imgui_4core___pyx_scope_struct_4__py_scoped(__pyx_ptype_5imgui_4core___pyx_scope_struct_4__py_scoped, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7924, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_str_id = __pyx_v_str_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_str_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_str_id);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_480generator4, __pyx_codeobj__64, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_scoped, __pyx_n_s_py_scoped, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 7924, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._py_scoped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_480generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_scoped", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7924, __pyx_L1_error)

  /* "imgui/core.pyx":7936
 *         str_id (str): ID to push and pop within marked scope
 *     """
 *     push_id(str_id)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_id()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_push_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_str_id) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_str_id);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7937
 *     """
 *     push_id(str_id)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_id()
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7937, __pyx_L1_error)

  /* "imgui/core.pyx":7938
 *     push_id(str_id)
 *     yield
 *     pop_id()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pop_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":7924
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_py_scoped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7941
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_482_py_vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_481_py_vertex_buffer_vertex_pos_offset[] = "_py_vertex_buffer_vertex_pos_offset()";
static PyMethodDef __pyx_mdef_5imgui_4core_482_py_vertex_buffer_vertex_pos_offset = {"_py_vertex_buffer_vertex_pos_offset", (PyCFunction)__pyx_pw_5imgui_4core_482_py_vertex_buffer_vertex_pos_offset, METH_NOARGS, __pyx_doc_5imgui_4core_481_py_vertex_buffer_vertex_pos_offset};
static PyObject *__pyx_pw_5imgui_4core_482_py_vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_pos_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_481_py_vertex_buffer_vertex_pos_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_481_py_vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_pos_offset", 0);

  /* "imgui/core.pyx":7942
 * 
 * def _py_vertex_buffer_vertex_pos_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_uv_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->pos)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7941
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._py_vertex_buffer_vertex_pos_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7944
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_484_py_vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_483_py_vertex_buffer_vertex_uv_offset[] = "_py_vertex_buffer_vertex_uv_offset()";
static PyMethodDef __pyx_mdef_5imgui_4core_484_py_vertex_buffer_vertex_uv_offset = {"_py_vertex_buffer_vertex_uv_offset", (PyCFunction)__pyx_pw_5imgui_4core_484_py_vertex_buffer_vertex_uv_offset, METH_NOARGS, __pyx_doc_5imgui_4core_483_py_vertex_buffer_vertex_uv_offset};
static PyObject *__pyx_pw_5imgui_4core_484_py_vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_uv_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_483_py_vertex_buffer_vertex_uv_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_483_py_vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_uv_offset", 0);

  /* "imgui/core.pyx":7945
 * 
 * def _py_vertex_buffer_vertex_uv_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_col_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->uv)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7944
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._py_vertex_buffer_vertex_uv_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7947
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_486_py_vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_485_py_vertex_buffer_vertex_col_offset[] = "_py_vertex_buffer_vertex_col_offset()";
static PyMethodDef __pyx_mdef_5imgui_4core_486_py_vertex_buffer_vertex_col_offset = {"_py_vertex_buffer_vertex_col_offset", (PyCFunction)__pyx_pw_5imgui_4core_486_py_vertex_buffer_vertex_col_offset, METH_NOARGS, __pyx_doc_5imgui_4core_485_py_vertex_buffer_vertex_col_offset};
static PyObject *__pyx_pw_5imgui_4core_486_py_vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_col_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_485_py_vertex_buffer_vertex_col_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_485_py_vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_col_offset", 0);

  /* "imgui/core.pyx":7948
 * 
 * def _py_vertex_buffer_vertex_col_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->col)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7947
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._py_vertex_buffer_vertex_col_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7950
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_488_py_vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_487_py_vertex_buffer_vertex_size[] = "_py_vertex_buffer_vertex_size()";
static PyMethodDef __pyx_mdef_5imgui_4core_488_py_vertex_buffer_vertex_size = {"_py_vertex_buffer_vertex_size", (PyCFunction)__pyx_pw_5imgui_4core_488_py_vertex_buffer_vertex_size, METH_NOARGS, __pyx_doc_5imgui_4core_487_py_vertex_buffer_vertex_size};
static PyObject *__pyx_pw_5imgui_4core_488_py_vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_487_py_vertex_buffer_vertex_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_487_py_vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_size", 0);

  /* "imgui/core.pyx":7951
 * 
 * def _py_vertex_buffer_vertex_size():
 *     return sizeof(cimgui.ImDrawVert)             # <<<<<<<<<<<<<<
 * 
 * def _py_index_buffer_index_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawVert))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7950
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._py_vertex_buffer_vertex_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":7953
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_490_py_index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_489_py_index_buffer_index_size[] = "_py_index_buffer_index_size()";
static PyMethodDef __pyx_mdef_5imgui_4core_490_py_index_buffer_index_size = {"_py_index_buffer_index_size", (PyCFunction)__pyx_pw_5imgui_4core_490_py_index_buffer_index_size, METH_NOARGS, __pyx_doc_5imgui_4core_489_py_index_buffer_index_size};
static PyObject *__pyx_pw_5imgui_4core_490_py_index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_index_buffer_index_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_489_py_index_buffer_index_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_489_py_index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_index_buffer_index_size", 0);

  /* "imgui/core.pyx":7954
 * 
 * def _py_index_buffer_index_size():
 *     return sizeof(cimgui.ImDrawIdx)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawIdx))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":7953
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._py_index_buffer_index_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 445, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 446, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 456, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__76, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__79);
            __Pyx_GIVEREF(__pyx_slice__79);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__79);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__79); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__79);
        __Pyx_GIVEREF(__pyx_slice__79);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__79);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1265, __pyx_L1_error)
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1297, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1307, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5imgui_4core__Font __pyx_vtable_5imgui_4core__Font;

static PyObject *__pyx_tp_new_5imgui_4core__Font(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__Font *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__Font *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__Font;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__Font(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__Font[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_5_Font_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_5_Font___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_5_Font_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_5_Font_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__Font = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._Font", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__Font), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__Font, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__Font, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__Font, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__ImGuiContext __pyx_vtable_5imgui_4core__ImGuiContext;

static PyObject *__pyx_tp_new_5imgui_4core__ImGuiContext(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__ImGuiContext *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__ImGuiContext *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__ImGuiContext;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__ImGuiContext(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_richcompare_5imgui_4core__ImGuiContext(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_5imgui_4core_13_ImGuiContext_1__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_5imgui_4core_13_ImGuiContext_1__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyMethodDef __pyx_methods_5imgui_4core__ImGuiContext[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_13_ImGuiContext_3__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_13_ImGuiContext_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_13_ImGuiContext_5__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_13_ImGuiContext_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__ImGuiContext = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._ImGuiContext", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__ImGuiContext), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__ImGuiContext, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_5imgui_4core__ImGuiContext, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__ImGuiContext, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__ImGuiContext, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__DrawCmd __pyx_vtable_5imgui_4core__DrawCmd;

static PyObject *__pyx_tp_new_5imgui_4core__DrawCmd(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__DrawCmd *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__DrawCmd *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__DrawCmd;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__DrawCmd(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_8_DrawCmd_texture_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8_DrawCmd_10texture_id_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_8_DrawCmd_clip_rect(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8_DrawCmd_9clip_rect_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_8_DrawCmd_elem_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8_DrawCmd_10elem_count_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__DrawCmd[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8_DrawCmd_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_8_DrawCmd___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8_DrawCmd_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_8_DrawCmd_2__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__DrawCmd[] = {
  {(char *)"texture_id", __pyx_getprop_5imgui_4core_8_DrawCmd_texture_id, 0, (char *)0, 0},
  {(char *)"clip_rect", __pyx_getprop_5imgui_4core_8_DrawCmd_clip_rect, 0, (char *)0, 0},
  {(char *)"elem_count", __pyx_getprop_5imgui_4core_8_DrawCmd_elem_count, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__DrawCmd = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._DrawCmd", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__DrawCmd), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__DrawCmd, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__DrawCmd, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__DrawCmd, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__DrawCmd, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__DrawList __pyx_vtable_5imgui_4core__DrawList;

static PyObject *__pyx_tp_new_5imgui_4core__DrawList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__DrawList *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__DrawList *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__DrawList;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__DrawList(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_commands(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_8commands_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__DrawList[] = {
  {"add_line", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_1add_line, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_add_line},
  {"add_rect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_3add_rect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_2add_rect},
  {"add_rect_filled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_5add_rect_filled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_4add_rect_filled},
  {"add_circle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_7add_circle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_6add_circle},
  {"add_circle_filled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_9add_circle_filled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_8add_circle_filled},
  {"add_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_11add_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_10add_text},
  {"add_image", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_13add_image, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_12add_image},
  {"add_polyline", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawList_15add_polyline, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawList_14add_polyline},
  {"channels_split", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawList_17channels_split, METH_O, __pyx_doc_5imgui_4core_9_DrawList_16channels_split},
  {"channels_set_current", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawList_19channels_set_current, METH_O, __pyx_doc_5imgui_4core_9_DrawList_18channels_set_current},
  {"channels_merge", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawList_21channels_merge, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawList_20channels_merge},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawList_23__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawList_22__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawList_25__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_9_DrawList_24__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__DrawList[] = {
  {(char *)"cmd_buffer_size", __pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_size, 0, (char *)0, 0},
  {(char *)"cmd_buffer_data", __pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_data, 0, (char *)0, 0},
  {(char *)"vtx_buffer_size", __pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_size, 0, (char *)0, 0},
  {(char *)"vtx_buffer_data", __pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_data, 0, (char *)0, 0},
  {(char *)"idx_buffer_size", __pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_size, 0, (char *)0, 0},
  {(char *)"idx_buffer_data", __pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_data, 0, (char *)0, 0},
  {(char *)"commands", __pyx_getprop_5imgui_4core_9_DrawList_commands, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__DrawList = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._DrawList", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__DrawList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__DrawList, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " Low level drawing API.\n\n    _DrawList instance can be acquired by calling :func:`get_window_draw_list`.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__DrawList, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__DrawList, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__DrawList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__Colors __pyx_vtable_5imgui_4core__Colors;

static PyObject *__pyx_tp_new_5imgui_4core__Colors(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__Colors *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__Colors *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__Colors;
  p->_style = ((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5imgui_4core_7_Colors_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5imgui_4core__Colors(PyObject *o) {
  struct __pyx_obj_5imgui_4core__Colors *p = (struct __pyx_obj_5imgui_4core__Colors *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_style);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5imgui_4core__Colors(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core__Colors *p = (struct __pyx_obj_5imgui_4core__Colors *)o;
  if (p->_style) {
    e = (*v)(((PyObject *)p->_style), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5imgui_4core__Colors(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5imgui_4core__Colors *p = (struct __pyx_obj_5imgui_4core__Colors *)o;
  tmp = ((PyObject*)p->_style);
  p->_style = ((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5imgui_4core__Colors(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_5imgui_4core__Colors(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_5imgui_4core_7_Colors_7__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_5imgui_4core__Colors[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_7_Colors_9__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_7_Colors_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_7_Colors_11__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_7_Colors_10__setstate_cython__},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Colors = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5imgui_4core__Colors, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Colors = {
  0, /*mp_length*/
  __pyx_pw_5imgui_4core_7_Colors_5__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_5imgui_4core__Colors, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5imgui_4core__Colors = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._Colors", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__Colors), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__Colors, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Colors, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Colors, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "_Colors(GuiStyle gui_style)", /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core__Colors, /*tp_traverse*/
  __pyx_tp_clear_5imgui_4core__Colors, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__Colors, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5imgui_4core_7_Colors_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__Colors, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core_GuiStyle __pyx_vtable_5imgui_4core_GuiStyle;

static PyObject *__pyx_tp_new_5imgui_4core_GuiStyle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core_GuiStyle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core_GuiStyle *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core_GuiStyle;
  p->_colors = ((struct __pyx_obj_5imgui_4core__Colors *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5imgui_4core_8GuiStyle_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5imgui_4core_GuiStyle(PyObject *o) {
  struct __pyx_obj_5imgui_4core_GuiStyle *p = (struct __pyx_obj_5imgui_4core_GuiStyle *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5imgui_4core_8GuiStyle_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_colors);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5imgui_4core_GuiStyle(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core_GuiStyle *p = (struct __pyx_obj_5imgui_4core_GuiStyle *)o;
  if (p->_colors) {
    e = (*v)(((PyObject *)p->_colors), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5imgui_4core_GuiStyle(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5imgui_4core_GuiStyle *p = (struct __pyx_obj_5imgui_4core_GuiStyle *)o;
  tmp = ((PyObject*)p->_colors);
  p->_colors = ((struct __pyx_obj_5imgui_4core__Colors *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_5imgui_4core_GuiStyle(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_5imgui_4core_8GuiStyle_5__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_5imgui_4core_8GuiStyle_5__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_5alpha_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_alpha(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_5alpha_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_min_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_min_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18window_border_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18window_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_child_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14child_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_child_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14child_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_child_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_17child_border_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_child_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_17child_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_popup_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14popup_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_popup_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14popup_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_popup_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_17popup_border_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_popup_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_17popup_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_title_align(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18window_title_align_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_title_align(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18window_title_align_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_frame_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_frame_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_frame_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_frame_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_frame_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_17frame_border_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_frame_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_17frame_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_item_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_item_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_item_inner_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_item_inner_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_touch_extra_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_touch_extra_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_indent_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_indent_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_columns_min_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_columns_min_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_grab_min_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_grab_min_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_grab_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_grab_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_button_text_align(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_17button_text_align_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_button_text_align(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_17button_text_align_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_display_window_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_display_window_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_display_safe_area_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_display_safe_area_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_mouse_cursor_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18mouse_cursor_scale_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_mouse_cursor_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18mouse_cursor_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_lines(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_lines(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_fill(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_17anti_aliased_fill_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_fill(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_17anti_aliased_fill_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_colors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_6colors_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core_GuiStyle[] = {
  {"create", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_8GuiStyle_7create, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_8GuiStyle_6create},
  {"color", (PyCFunction)__pyx_pw_5imgui_4core_8GuiStyle_9color, METH_O, __pyx_doc_5imgui_4core_8GuiStyle_8color},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8GuiStyle_11__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_8GuiStyle_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8GuiStyle_13__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_8GuiStyle_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core_GuiStyle[] = {
  {(char *)"alpha", __pyx_getprop_5imgui_4core_8GuiStyle_alpha, __pyx_setprop_5imgui_4core_8GuiStyle_alpha, (char *)"Global alpha blending parameter for windows\n\n        Returns:\n            float\n        ", 0},
  {(char *)"window_padding", __pyx_getprop_5imgui_4core_8GuiStyle_window_padding, __pyx_setprop_5imgui_4core_8GuiStyle_window_padding, (char *)0, 0},
  {(char *)"window_min_size", __pyx_getprop_5imgui_4core_8GuiStyle_window_min_size, __pyx_setprop_5imgui_4core_8GuiStyle_window_min_size, (char *)0, 0},
  {(char *)"window_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_window_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_window_rounding, (char *)0, 0},
  {(char *)"window_border_size", __pyx_getprop_5imgui_4core_8GuiStyle_window_border_size, __pyx_setprop_5imgui_4core_8GuiStyle_window_border_size, (char *)0, 0},
  {(char *)"child_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_child_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_child_rounding, (char *)0, 0},
  {(char *)"child_border_size", __pyx_getprop_5imgui_4core_8GuiStyle_child_border_size, __pyx_setprop_5imgui_4core_8GuiStyle_child_border_size, (char *)0, 0},
  {(char *)"popup_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_popup_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_popup_rounding, (char *)0, 0},
  {(char *)"popup_border_size", __pyx_getprop_5imgui_4core_8GuiStyle_popup_border_size, __pyx_setprop_5imgui_4core_8GuiStyle_popup_border_size, (char *)0, 0},
  {(char *)"window_title_align", __pyx_getprop_5imgui_4core_8GuiStyle_window_title_align, __pyx_setprop_5imgui_4core_8GuiStyle_window_title_align, (char *)0, 0},
  {(char *)"frame_padding", __pyx_getprop_5imgui_4core_8GuiStyle_frame_padding, __pyx_setprop_5imgui_4core_8GuiStyle_frame_padding, (char *)0, 0},
  {(char *)"frame_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_frame_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_frame_rounding, (char *)0, 0},
  {(char *)"frame_border_size", __pyx_getprop_5imgui_4core_8GuiStyle_frame_border_size, __pyx_setprop_5imgui_4core_8GuiStyle_frame_border_size, (char *)0, 0},
  {(char *)"item_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_item_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_item_spacing, (char *)0, 0},
  {(char *)"item_inner_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_item_inner_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_item_inner_spacing, (char *)0, 0},
  {(char *)"touch_extra_padding", __pyx_getprop_5imgui_4core_8GuiStyle_touch_extra_padding, __pyx_setprop_5imgui_4core_8GuiStyle_touch_extra_padding, (char *)0, 0},
  {(char *)"indent_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_indent_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_indent_spacing, (char *)0, 0},
  {(char *)"columns_min_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_columns_min_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_columns_min_spacing, (char *)0, 0},
  {(char *)"scrollbar_size", __pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_size, __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_size, (char *)0, 0},
  {(char *)"scrollbar_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_rounding, (char *)0, 0},
  {(char *)"grab_min_size", __pyx_getprop_5imgui_4core_8GuiStyle_grab_min_size, __pyx_setprop_5imgui_4core_8GuiStyle_grab_min_size, (char *)0, 0},
  {(char *)"grab_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_grab_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_grab_rounding, (char *)0, 0},
  {(char *)"button_text_align", __pyx_getprop_5imgui_4core_8GuiStyle_button_text_align, __pyx_setprop_5imgui_4core_8GuiStyle_button_text_align, (char *)0, 0},
  {(char *)"display_window_padding", __pyx_getprop_5imgui_4core_8GuiStyle_display_window_padding, __pyx_setprop_5imgui_4core_8GuiStyle_display_window_padding, (char *)0, 0},
  {(char *)"display_safe_area_padding", __pyx_getprop_5imgui_4core_8GuiStyle_display_safe_area_padding, __pyx_setprop_5imgui_4core_8GuiStyle_display_safe_area_padding, (char *)0, 0},
  {(char *)"mouse_cursor_scale", __pyx_getprop_5imgui_4core_8GuiStyle_mouse_cursor_scale, __pyx_setprop_5imgui_4core_8GuiStyle_mouse_cursor_scale, (char *)0, 0},
  {(char *)"anti_aliased_lines", __pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_lines, __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_lines, (char *)0, 0},
  {(char *)"anti_aliased_fill", __pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_fill, __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_fill, (char *)0, 0},
  {(char *)"curve_tessellation_tolerance", __pyx_getprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance, __pyx_setprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance, (char *)0, 0},
  {(char *)"colors", __pyx_getprop_5imgui_4core_8GuiStyle_colors, 0, (char *)"Retrieve and modify style colors through list-like interface.\n\n        .. visual-example::\n            :width: 700\n            :height: 500\n            :auto_layout:\n\n            style = imgui.get_style()\n            imgui.begin(\"Color window\")\n            imgui.columns(4)\n            for color in range(0, imgui.COLOR_COUNT):\n                imgui.text(\"Color: {}\".format(color))\n                imgui.color_button(\"color#{}\".format(color), *style.colors[color])\n                imgui.next_column()\n\n            imgui.end()\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core_GuiStyle = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.GuiStyle", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core_GuiStyle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core_GuiStyle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Container for ImGui style information\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core_GuiStyle, /*tp_traverse*/
  __pyx_tp_clear_5imgui_4core_GuiStyle, /*tp_clear*/
  __pyx_tp_richcompare_5imgui_4core_GuiStyle, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core_GuiStyle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core_GuiStyle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core_GuiStyle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__DrawData __pyx_vtable_5imgui_4core__DrawData;

static PyObject *__pyx_tp_new_5imgui_4core__DrawData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__DrawData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__DrawData *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__DrawData;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__DrawData(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_valid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_5valid_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_cmd_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_9cmd_count_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_total_vtx_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_15total_vtx_count_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_total_idx_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_15total_idx_count_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_commands_lists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_14commands_lists_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__DrawData[] = {
  {"_require_pointer", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_3_require_pointer, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawData_2_require_pointer},
  {"deindex_all_buffers", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_5deindex_all_buffers, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawData_4deindex_all_buffers},
  {"scale_clip_rects", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_9_DrawData_7scale_clip_rects, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawData_6scale_clip_rects},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_9__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawData_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_11__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_9_DrawData_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__DrawData[] = {
  {(char *)"valid", __pyx_getprop_5imgui_4core_9_DrawData_valid, 0, (char *)0, 0},
  {(char *)"cmd_count", __pyx_getprop_5imgui_4core_9_DrawData_cmd_count, 0, (char *)0, 0},
  {(char *)"total_vtx_count", __pyx_getprop_5imgui_4core_9_DrawData_total_vtx_count, 0, (char *)0, 0},
  {(char *)"total_idx_count", __pyx_getprop_5imgui_4core_9_DrawData_total_idx_count, 0, (char *)0, 0},
  {(char *)"commands_lists", __pyx_getprop_5imgui_4core_9_DrawData_commands_lists, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__DrawData = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._DrawData", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__DrawData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__DrawData, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "_DrawData()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__DrawData, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__DrawData, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5imgui_4core_9_DrawData_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__DrawData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges __pyx_vtable_5imgui_4core__StaticGlyphRanges;

static PyObject *__pyx_tp_new_5imgui_4core__StaticGlyphRanges(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__StaticGlyphRanges *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__StaticGlyphRanges;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__StaticGlyphRanges(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__StaticGlyphRanges[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_18_StaticGlyphRanges_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_18_StaticGlyphRanges___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_18_StaticGlyphRanges_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__StaticGlyphRanges = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._StaticGlyphRanges", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__StaticGlyphRanges), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__StaticGlyphRanges, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__StaticGlyphRanges, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__StaticGlyphRanges, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__FontAtlas __pyx_vtable_5imgui_4core__FontAtlas;

static PyObject *__pyx_tp_new_5imgui_4core__FontAtlas(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__FontAtlas *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__FontAtlas *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__FontAtlas;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__FontAtlas(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_10_FontAtlas_texture_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_10_FontAtlas_texture_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_10_FontAtlas_texture_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_10_FontAtlas_13texture_width_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_10_FontAtlas_texture_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_10_FontAtlas_14texture_height_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__FontAtlas[] = {
  {"_require_pointer", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_3_require_pointer, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_2_require_pointer},
  {"add_font_default", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_5add_font_default, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_4add_font_default},
  {"add_font_from_file_ttf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_10_FontAtlas_7add_font_from_file_ttf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf},
  {"clear_tex_data", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_9clear_tex_data, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_8clear_tex_data},
  {"clear_input_data", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_11clear_input_data, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_10clear_input_data},
  {"clear_fonts", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_13clear_fonts, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_12clear_fonts},
  {"clear", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_15clear, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_14clear},
  {"get_glyph_ranges_default", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_17get_glyph_ranges_default, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default},
  {"get_glyph_ranges_korean", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_19get_glyph_ranges_korean, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean},
  {"get_glyph_ranges_japanese", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_21get_glyph_ranges_japanese, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese},
  {"get_glyph_ranges_chinese_full", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_23get_glyph_ranges_chinese_full, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese_full},
  {"get_glyph_ranges_chinese", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_25get_glyph_ranges_chinese, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_24get_glyph_ranges_chinese},
  {"get_glyph_ranges_cyrillic", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_27get_glyph_ranges_cyrillic, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_26get_glyph_ranges_cyrillic},
  {"get_glyph_ranges_latin", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_29get_glyph_ranges_latin, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_28get_glyph_ranges_latin},
  {"get_tex_data_as_alpha8", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_31get_tex_data_as_alpha8, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_30get_tex_data_as_alpha8},
  {"get_tex_data_as_rgba32", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_33get_tex_data_as_rgba32, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_32get_tex_data_as_rgba32},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_35__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_34__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_37__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_10_FontAtlas_36__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__FontAtlas[] = {
  {(char *)"texture_id", __pyx_getprop_5imgui_4core_10_FontAtlas_texture_id, __pyx_setprop_5imgui_4core_10_FontAtlas_texture_id, (char *)"\n        Note: difference in mapping (maps actual TexID and not TextureID)\n\n        Note: texture ID type is implementation dependent. It is usually\n        integer (at least for OpenGL).\n\n        ", 0},
  {(char *)"texture_width", __pyx_getprop_5imgui_4core_10_FontAtlas_texture_width, 0, (char *)0, 0},
  {(char *)"texture_height", __pyx_getprop_5imgui_4core_10_FontAtlas_texture_height, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__FontAtlas = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._FontAtlas", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__FontAtlas), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__FontAtlas, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "_FontAtlas()\nFont atlas object responsible for controling and loading fonts.\n\n    This class is not intended to be instantiated by user (thus `_`\n    name prefix). It should be accessed through :any:`_IO.fonts` attribute\n    of :class:`_IO` obtained with :func:`get_io` function.\n\n    Example::\n\n        import imgui\n\n        io = imgui.get_io()\n        io.fonts.add_font_default()\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__FontAtlas, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__FontAtlas, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5imgui_4core_10_FontAtlas_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__FontAtlas, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__IO __pyx_vtable_5imgui_4core__IO;

static PyObject *__pyx_tp_new_5imgui_4core__IO(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__IO *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__IO *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__IO;
  p->_fonts = Py_None; Py_INCREF(Py_None);
  p->_get_clipboard_text_fn = Py_None; Py_INCREF(Py_None);
  p->_set_clipboard_text_fn = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__IO(PyObject *o) {
  struct __pyx_obj_5imgui_4core__IO *p = (struct __pyx_obj_5imgui_4core__IO *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_fonts);
  Py_CLEAR(p->_get_clipboard_text_fn);
  Py_CLEAR(p->_set_clipboard_text_fn);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5imgui_4core__IO(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core__IO *p = (struct __pyx_obj_5imgui_4core__IO *)o;
  if (p->_fonts) {
    e = (*v)(p->_fonts, a); if (e) return e;
  }
  if (p->_get_clipboard_text_fn) {
    e = (*v)(p->_get_clipboard_text_fn, a); if (e) return e;
  }
  if (p->_set_clipboard_text_fn) {
    e = (*v)(p->_set_clipboard_text_fn, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5imgui_4core__IO(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5imgui_4core__IO *p = (struct __pyx_obj_5imgui_4core__IO *)o;
  tmp = ((PyObject*)p->_fonts);
  p->_fonts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_get_clipboard_text_fn);
  p->_get_clipboard_text_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_set_clipboard_text_fn);
  p->_set_clipboard_text_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_config_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_12config_flags_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_config_flags(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_12config_flags_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_backend_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_13backend_flags_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_backend_flags(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_13backend_flags_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_12display_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_12display_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_delta_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_10delta_time_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_delta_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_10delta_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_ini_saving_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_ini_saving_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_log_file_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_13log_file_name_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_log_file_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_13log_file_name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_ini_file_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_13ini_file_name_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_ini_file_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_13ini_file_name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_double_click_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_double_click_max_distance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_max_distance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_drag_threshold(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_drag_threshold(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_7key_map_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_repeat_delay(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_repeat_delay(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_repeat_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_repeat_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_fonts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_5fonts_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_font_global_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_17font_global_scale_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_font_global_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_17font_global_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_font_allow_user_scaling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_font_allow_user_scaling(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_fb_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_fb_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_visible_min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_19display_visible_min_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_visible_min(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_19display_visible_min_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_visible_max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_19display_visible_max_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_visible_max(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_19display_visible_max_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_config_mac_osx_behaviors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_24config_mac_osx_behaviors_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_config_mac_osx_behaviors(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_24config_mac_osx_behaviors_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_config_cursor_blink(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_19config_cursor_blink_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_config_cursor_blink(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_19config_cursor_blink_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_config_resize_windows_from_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_32config_resize_windows_from_edges_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_config_resize_windows_from_edges(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_32config_resize_windows_from_edges_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_get_clipboard_text_fn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_21get_clipboard_text_fn_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_get_clipboard_text_fn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_21get_clipboard_text_fn_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_set_clipboard_text_fn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_21set_clipboard_text_fn_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_set_clipboard_text_fn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_21set_clipboard_text_fn_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9mouse_pos_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_9mouse_pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_10mouse_down_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_wheel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_wheel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_wheel_horizontal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_22mouse_wheel_horizontal_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_wheel_horizontal(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_22mouse_wheel_horizontal_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_draw_cursor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_draw_cursor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_ctrl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_8key_ctrl_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_ctrl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_8key_ctrl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_shift(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9key_shift_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_shift(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_9key_shift_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_alt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_7key_alt_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_alt(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_7key_alt_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_super(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9key_super_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_super(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_9key_super_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_keys_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9keys_down_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_capture_mouse(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_18want_capture_mouse_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_capture_keyboard(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_21want_capture_keyboard_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_text_input(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_15want_text_input_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_set_mouse_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_18want_set_mouse_pos_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_save_ini_setting(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_21want_save_ini_setting_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_nav_active(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_10nav_active_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_nav_visible(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_11nav_visible_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_framerate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9framerate_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_metrics_render_vertices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_23metrics_render_vertices_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_metrics_active_windows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_22metrics_active_windows_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_delta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_11mouse_delta_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__IO[] = {
  {"add_input_character", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_3add_input_character, METH_O, __pyx_doc_5imgui_4core_3_IO_2add_input_character},
  {"add_input_characters_utf8", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_5add_input_characters_utf8, METH_O, __pyx_doc_5imgui_4core_3_IO_4add_input_characters_utf8},
  {"clear_input_characters", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_7clear_input_characters, METH_NOARGS, __pyx_doc_5imgui_4core_3_IO_6clear_input_characters},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_9__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_3_IO_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_11__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_3_IO_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__IO[] = {
  {(char *)"config_flags", __pyx_getprop_5imgui_4core_3_IO_config_flags, __pyx_setprop_5imgui_4core_3_IO_config_flags, (char *)0, 0},
  {(char *)"backend_flags", __pyx_getprop_5imgui_4core_3_IO_backend_flags, __pyx_setprop_5imgui_4core_3_IO_backend_flags, (char *)0, 0},
  {(char *)"display_size", __pyx_getprop_5imgui_4core_3_IO_display_size, __pyx_setprop_5imgui_4core_3_IO_display_size, (char *)0, 0},
  {(char *)"delta_time", __pyx_getprop_5imgui_4core_3_IO_delta_time, __pyx_setprop_5imgui_4core_3_IO_delta_time, (char *)0, 0},
  {(char *)"ini_saving_rate", __pyx_getprop_5imgui_4core_3_IO_ini_saving_rate, __pyx_setprop_5imgui_4core_3_IO_ini_saving_rate, (char *)0, 0},
  {(char *)"log_file_name", __pyx_getprop_5imgui_4core_3_IO_log_file_name, __pyx_setprop_5imgui_4core_3_IO_log_file_name, (char *)0, 0},
  {(char *)"ini_file_name", __pyx_getprop_5imgui_4core_3_IO_ini_file_name, __pyx_setprop_5imgui_4core_3_IO_ini_file_name, (char *)0, 0},
  {(char *)"mouse_double_click_time", __pyx_getprop_5imgui_4core_3_IO_mouse_double_click_time, __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_time, (char *)0, 0},
  {(char *)"mouse_double_click_max_distance", __pyx_getprop_5imgui_4core_3_IO_mouse_double_click_max_distance, __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_max_distance, (char *)0, 0},
  {(char *)"mouse_drag_threshold", __pyx_getprop_5imgui_4core_3_IO_mouse_drag_threshold, __pyx_setprop_5imgui_4core_3_IO_mouse_drag_threshold, (char *)0, 0},
  {(char *)"key_map", __pyx_getprop_5imgui_4core_3_IO_key_map, 0, (char *)0, 0},
  {(char *)"key_repeat_delay", __pyx_getprop_5imgui_4core_3_IO_key_repeat_delay, __pyx_setprop_5imgui_4core_3_IO_key_repeat_delay, (char *)0, 0},
  {(char *)"key_repeat_rate", __pyx_getprop_5imgui_4core_3_IO_key_repeat_rate, __pyx_setprop_5imgui_4core_3_IO_key_repeat_rate, (char *)0, 0},
  {(char *)"fonts", __pyx_getprop_5imgui_4core_3_IO_fonts, 0, (char *)0, 0},
  {(char *)"font_global_scale", __pyx_getprop_5imgui_4core_3_IO_font_global_scale, __pyx_setprop_5imgui_4core_3_IO_font_global_scale, (char *)0, 0},
  {(char *)"font_allow_user_scaling", __pyx_getprop_5imgui_4core_3_IO_font_allow_user_scaling, __pyx_setprop_5imgui_4core_3_IO_font_allow_user_scaling, (char *)0, 0},
  {(char *)"display_fb_scale", __pyx_getprop_5imgui_4core_3_IO_display_fb_scale, __pyx_setprop_5imgui_4core_3_IO_display_fb_scale, (char *)0, 0},
  {(char *)"display_visible_min", __pyx_getprop_5imgui_4core_3_IO_display_visible_min, __pyx_setprop_5imgui_4core_3_IO_display_visible_min, (char *)0, 0},
  {(char *)"display_visible_max", __pyx_getprop_5imgui_4core_3_IO_display_visible_max, __pyx_setprop_5imgui_4core_3_IO_display_visible_max, (char *)0, 0},
  {(char *)"config_mac_osx_behaviors", __pyx_getprop_5imgui_4core_3_IO_config_mac_osx_behaviors, __pyx_setprop_5imgui_4core_3_IO_config_mac_osx_behaviors, (char *)0, 0},
  {(char *)"config_cursor_blink", __pyx_getprop_5imgui_4core_3_IO_config_cursor_blink, __pyx_setprop_5imgui_4core_3_IO_config_cursor_blink, (char *)0, 0},
  {(char *)"config_resize_windows_from_edges", __pyx_getprop_5imgui_4core_3_IO_config_resize_windows_from_edges, __pyx_setprop_5imgui_4core_3_IO_config_resize_windows_from_edges, (char *)0, 0},
  {(char *)"get_clipboard_text_fn", __pyx_getprop_5imgui_4core_3_IO_get_clipboard_text_fn, __pyx_setprop_5imgui_4core_3_IO_get_clipboard_text_fn, (char *)0, 0},
  {(char *)"set_clipboard_text_fn", __pyx_getprop_5imgui_4core_3_IO_set_clipboard_text_fn, __pyx_setprop_5imgui_4core_3_IO_set_clipboard_text_fn, (char *)0, 0},
  {(char *)"mouse_pos", __pyx_getprop_5imgui_4core_3_IO_mouse_pos, __pyx_setprop_5imgui_4core_3_IO_mouse_pos, (char *)0, 0},
  {(char *)"mouse_down", __pyx_getprop_5imgui_4core_3_IO_mouse_down, 0, (char *)0, 0},
  {(char *)"mouse_wheel", __pyx_getprop_5imgui_4core_3_IO_mouse_wheel, __pyx_setprop_5imgui_4core_3_IO_mouse_wheel, (char *)0, 0},
  {(char *)"mouse_wheel_horizontal", __pyx_getprop_5imgui_4core_3_IO_mouse_wheel_horizontal, __pyx_setprop_5imgui_4core_3_IO_mouse_wheel_horizontal, (char *)0, 0},
  {(char *)"mouse_draw_cursor", __pyx_getprop_5imgui_4core_3_IO_mouse_draw_cursor, __pyx_setprop_5imgui_4core_3_IO_mouse_draw_cursor, (char *)0, 0},
  {(char *)"key_ctrl", __pyx_getprop_5imgui_4core_3_IO_key_ctrl, __pyx_setprop_5imgui_4core_3_IO_key_ctrl, (char *)0, 0},
  {(char *)"key_shift", __pyx_getprop_5imgui_4core_3_IO_key_shift, __pyx_setprop_5imgui_4core_3_IO_key_shift, (char *)0, 0},
  {(char *)"key_alt", __pyx_getprop_5imgui_4core_3_IO_key_alt, __pyx_setprop_5imgui_4core_3_IO_key_alt, (char *)0, 0},
  {(char *)"key_super", __pyx_getprop_5imgui_4core_3_IO_key_super, __pyx_setprop_5imgui_4core_3_IO_key_super, (char *)0, 0},
  {(char *)"keys_down", __pyx_getprop_5imgui_4core_3_IO_keys_down, 0, (char *)0, 0},
  {(char *)"want_capture_mouse", __pyx_getprop_5imgui_4core_3_IO_want_capture_mouse, 0, (char *)0, 0},
  {(char *)"want_capture_keyboard", __pyx_getprop_5imgui_4core_3_IO_want_capture_keyboard, 0, (char *)0, 0},
  {(char *)"want_text_input", __pyx_getprop_5imgui_4core_3_IO_want_text_input, 0, (char *)0, 0},
  {(char *)"want_set_mouse_pos", __pyx_getprop_5imgui_4core_3_IO_want_set_mouse_pos, 0, (char *)0, 0},
  {(char *)"want_save_ini_setting", __pyx_getprop_5imgui_4core_3_IO_want_save_ini_setting, 0, (char *)0, 0},
  {(char *)"nav_active", __pyx_getprop_5imgui_4core_3_IO_nav_active, 0, (char *)0, 0},
  {(char *)"nav_visible", __pyx_getprop_5imgui_4core_3_IO_nav_visible, 0, (char *)0, 0},
  {(char *)"framerate", __pyx_getprop_5imgui_4core_3_IO_framerate, 0, (char *)0, 0},
  {(char *)"metrics_render_vertices", __pyx_getprop_5imgui_4core_3_IO_metrics_render_vertices, 0, (char *)0, 0},
  {(char *)"metrics_active_windows", __pyx_getprop_5imgui_4core_3_IO_metrics_active_windows, 0, (char *)0, 0},
  {(char *)"mouse_delta", __pyx_getprop_5imgui_4core_3_IO_mouse_delta, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__IO = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._IO", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__IO), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__IO, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "_IO()\nMain ImGui I/O context class used for ImGui configuration.\n\n    This class is not intended to be instantiated by user (thus `_`\n    name prefix). It should be accessed through obtained with :func:`get_io`\n    function.\n\n    Example::\n\n        import imgui\n\n        io = imgui.get_io()\n    ", /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core__IO, /*tp_traverse*/
  __pyx_tp_clear_5imgui_4core__IO, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__IO, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__IO, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5imgui_4core_3_IO_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__IO, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *__pyx_freelist_5imgui_4core___pyx_scope_struct___py_font[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct___py_font = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct___py_font(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct___py_font > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct___py_font[--__pyx_freecount_5imgui_4core___pyx_scope_struct___py_font];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct___py_font(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_font);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct___py_font < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct___py_font[__pyx_freecount_5imgui_4core___pyx_scope_struct___py_font++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5imgui_4core___pyx_scope_struct___py_font(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font *)o;
  if (p->__pyx_v_font) {
    e = (*v)(((PyObject *)p->__pyx_v_font), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct___py_font = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct___py_font", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct___py_font), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct___py_font, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core___pyx_scope_struct___py_font, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct___py_font, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *__pyx_freelist_5imgui_4core___pyx_scope_struct_1__py_styled[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct_1__py_styled = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_1__py_styled(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct_1__py_styled > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct_1__py_styled[--__pyx_freecount_5imgui_4core___pyx_scope_struct_1__py_styled];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_1__py_styled(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_count);
  Py_CLEAR(p->__pyx_v_value);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct_1__py_styled < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct_1__py_styled[__pyx_freecount_5imgui_4core___pyx_scope_struct_1__py_styled++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_1__py_styled(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled *)o;
  if (p->__pyx_v_count) {
    e = (*v)(p->__pyx_v_count, a); if (e) return e;
  }
  if (p->__pyx_v_value) {
    e = (*v)(p->__pyx_v_value, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct_1__py_styled = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct_1__py_styled", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1__py_styled), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_1__py_styled, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_1__py_styled, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct_1__py_styled, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *__pyx_freelist_5imgui_4core___pyx_scope_struct_2__py_colored[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct_2__py_colored = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_2__py_colored(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct_2__py_colored > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct_2__py_colored[--__pyx_freecount_5imgui_4core___pyx_scope_struct_2__py_colored];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_2__py_colored(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_count);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct_2__py_colored < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct_2__py_colored[__pyx_freecount_5imgui_4core___pyx_scope_struct_2__py_colored++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_2__py_colored(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored *)o;
  if (p->__pyx_v_count) {
    e = (*v)(p->__pyx_v_count, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct_2__py_colored = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct_2__py_colored", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2__py_colored), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_2__py_colored, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_2__py_colored, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct_2__py_colored, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *__pyx_freelist_5imgui_4core___pyx_scope_struct_3__py_istyled[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct_3__py_istyled = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_3__py_istyled(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct_3__py_istyled > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct_3__py_istyled[--__pyx_freecount_5imgui_4core___pyx_scope_struct_3__py_istyled];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_3__py_istyled(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_count);
  Py_CLEAR(p->__pyx_v_iterator);
  Py_CLEAR(p->__pyx_v_val);
  Py_CLEAR(p->__pyx_v_var);
  Py_CLEAR(p->__pyx_v_variables_and_values);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct_3__py_istyled < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct_3__py_istyled[__pyx_freecount_5imgui_4core___pyx_scope_struct_3__py_istyled++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_3__py_istyled(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled *)o;
  if (p->__pyx_v_count) {
    e = (*v)(p->__pyx_v_count, a); if (e) return e;
  }
  if (p->__pyx_v_iterator) {
    e = (*v)(p->__pyx_v_iterator, a); if (e) return e;
  }
  if (p->__pyx_v_val) {
    e = (*v)(p->__pyx_v_val, a); if (e) return e;
  }
  if (p->__pyx_v_var) {
    e = (*v)(p->__pyx_v_var, a); if (e) return e;
  }
  if (p->__pyx_v_variables_and_values) {
    e = (*v)(p->__pyx_v_variables_and_values, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct_3__py_istyled = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct_3__py_istyled", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_3__py_istyled), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_3__py_istyled, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_3__py_istyled, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct_3__py_istyled, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *__pyx_freelist_5imgui_4core___pyx_scope_struct_4__py_scoped[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct_4__py_scoped = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_4__py_scoped(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct_4__py_scoped > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct_4__py_scoped[--__pyx_freecount_5imgui_4core___pyx_scope_struct_4__py_scoped];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_4__py_scoped(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *)o;
  Py_CLEAR(p->__pyx_v_str_id);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct_4__py_scoped < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct_4__py_scoped[__pyx_freecount_5imgui_4core___pyx_scope_struct_4__py_scoped++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct_4__py_scoped = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct_4__py_scoped", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_4__py_scoped), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_4__py_scoped, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct_4__py_scoped, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"calc_text_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_337calc_text_size, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_336calc_text_size},
  {"push_style_var", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_339push_style_var, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_338push_style_var},
  {"push_style_color", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_341push_style_color, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_340push_style_color},
  {"pop_style_var", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_343pop_style_var, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_342pop_style_var},
  {"get_font_size", (PyCFunction)__pyx_pw_5imgui_4core_345get_font_size, METH_NOARGS, __pyx_doc_5imgui_4core_344get_font_size},
  {"get_style_color_vec_4", (PyCFunction)__pyx_pw_5imgui_4core_347get_style_color_vec_4, METH_O, __pyx_doc_5imgui_4core_346get_style_color_vec_4},
  {"get_font_tex_uv_white_pixel", (PyCFunction)__pyx_pw_5imgui_4core_349get_font_tex_uv_white_pixel, METH_NOARGS, __pyx_doc_5imgui_4core_348get_font_tex_uv_white_pixel},
  {"get_color_u32_idx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_351get_color_u32_idx, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_350get_color_u32_idx},
  {"get_color_u32_rgba", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_353get_color_u32_rgba, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_352get_color_u32_rgba},
  {"get_color_u32", (PyCFunction)__pyx_pw_5imgui_4core_355get_color_u32, METH_O, __pyx_doc_5imgui_4core_354get_color_u32},
  {"push_item_width", (PyCFunction)__pyx_pw_5imgui_4core_357push_item_width, METH_O, __pyx_doc_5imgui_4core_356push_item_width},
  {"pop_item_width", (PyCFunction)__pyx_pw_5imgui_4core_359pop_item_width, METH_NOARGS, __pyx_doc_5imgui_4core_358pop_item_width},
  {"calculate_item_width", (PyCFunction)__pyx_pw_5imgui_4core_361calculate_item_width, METH_NOARGS, __pyx_doc_5imgui_4core_360calculate_item_width},
  {"push_text_wrap_pos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_363push_text_wrap_pos, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_362push_text_wrap_pos},
  {"pop_text_wrap_pos", (PyCFunction)__pyx_pw_5imgui_4core_365pop_text_wrap_pos, METH_NOARGS, __pyx_doc_5imgui_4core_364pop_text_wrap_pos},
  {"push_allow_keyboard_focus", (PyCFunction)__pyx_pw_5imgui_4core_367push_allow_keyboard_focus, METH_O, __pyx_doc_5imgui_4core_366push_allow_keyboard_focus},
  {"pop_allow_keyboard_focus", (PyCFunction)__pyx_pw_5imgui_4core_369pop_allow_keyboard_focus, METH_NOARGS, __pyx_doc_5imgui_4core_368pop_allow_keyboard_focus},
  {"push_button_repeat", (PyCFunction)__pyx_pw_5imgui_4core_371push_button_repeat, METH_O, __pyx_doc_5imgui_4core_370push_button_repeat},
  {"pop_button_repeat", (PyCFunction)__pyx_pw_5imgui_4core_373pop_button_repeat, METH_NOARGS, __pyx_doc_5imgui_4core_372pop_button_repeat},
  {"pop_style_color", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imgui_4core_375pop_style_color, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_374pop_style_color},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_core(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_core},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "core",
    __pyx_k_todo_consider_inlining_every_oc, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_3f, __pyx_k_3f, sizeof(__pyx_k_3f), 0, 0, 1, 0},
  {&__pyx_kp_s_6f, __pyx_k_6f, sizeof(__pyx_k_6f), 0, 0, 1, 0},
  {&__pyx_n_s_ALWAYS, __pyx_k_ALWAYS, sizeof(__pyx_k_ALWAYS), 0, 0, 1, 1},
  {&__pyx_n_s_APPEARING, __pyx_k_APPEARING, sizeof(__pyx_k_APPEARING), 0, 0, 1, 1},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_BACKEND_HAS_GAMEPAD, __pyx_k_BACKEND_HAS_GAMEPAD, sizeof(__pyx_k_BACKEND_HAS_GAMEPAD), 0, 0, 1, 1},
  {&__pyx_n_s_BACKEND_HAS_MOUSE_CURSORS, __pyx_k_BACKEND_HAS_MOUSE_CURSORS, sizeof(__pyx_k_BACKEND_HAS_MOUSE_CURSORS), 0, 0, 1, 1},
  {&__pyx_n_s_BACKEND_HAS_SET_MOUSE_POS, __pyx_k_BACKEND_HAS_SET_MOUSE_POS, sizeof(__pyx_k_BACKEND_HAS_SET_MOUSE_POS), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_COLOR_BORDER, __pyx_k_COLOR_BORDER, sizeof(__pyx_k_COLOR_BORDER), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BORDER_SHADOW, __pyx_k_COLOR_BORDER_SHADOW, sizeof(__pyx_k_COLOR_BORDER_SHADOW), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BUTTON, __pyx_k_COLOR_BUTTON, sizeof(__pyx_k_COLOR_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BUTTON_ACTIVE, __pyx_k_COLOR_BUTTON_ACTIVE, sizeof(__pyx_k_COLOR_BUTTON_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BUTTON_HOVERED, __pyx_k_COLOR_BUTTON_HOVERED, sizeof(__pyx_k_COLOR_BUTTON_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_CHECK_MARK, __pyx_k_COLOR_CHECK_MARK, sizeof(__pyx_k_COLOR_CHECK_MARK), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_CHILD_BACKGROUND, __pyx_k_COLOR_CHILD_BACKGROUND, sizeof(__pyx_k_COLOR_CHILD_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_COUNT, __pyx_k_COLOR_COUNT, sizeof(__pyx_k_COLOR_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_DRAG_DROP_TARGET, __pyx_k_COLOR_DRAG_DROP_TARGET, sizeof(__pyx_k_COLOR_DRAG_DROP_TARGET), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_FRAME_BACKGROUND, __pyx_k_COLOR_FRAME_BACKGROUND, sizeof(__pyx_k_COLOR_FRAME_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_FRAME_BACKGROUND_ACTIVE, __pyx_k_COLOR_FRAME_BACKGROUND_ACTIVE, sizeof(__pyx_k_COLOR_FRAME_BACKGROUND_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_FRAME_BACKGROUND_HOVERED, __pyx_k_COLOR_FRAME_BACKGROUND_HOVERED, sizeof(__pyx_k_COLOR_FRAME_BACKGROUND_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_HEADER, __pyx_k_COLOR_HEADER, sizeof(__pyx_k_COLOR_HEADER), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_HEADER_ACTIVE, __pyx_k_COLOR_HEADER_ACTIVE, sizeof(__pyx_k_COLOR_HEADER_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_HEADER_HOVERED, __pyx_k_COLOR_HEADER_HOVERED, sizeof(__pyx_k_COLOR_HEADER_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_MENUBAR_BACKGROUND, __pyx_k_COLOR_MENUBAR_BACKGROUND, sizeof(__pyx_k_COLOR_MENUBAR_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_MODAL_WINDOW_DIM_BACKGROUN, __pyx_k_COLOR_MODAL_WINDOW_DIM_BACKGROUN, sizeof(__pyx_k_COLOR_MODAL_WINDOW_DIM_BACKGROUN), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_NAV_HIGHLIGHT, __pyx_k_COLOR_NAV_HIGHLIGHT, sizeof(__pyx_k_COLOR_NAV_HIGHLIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_NAV_WINDOWING_DIM_BACKGROU, __pyx_k_COLOR_NAV_WINDOWING_DIM_BACKGROU, sizeof(__pyx_k_COLOR_NAV_WINDOWING_DIM_BACKGROU), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_NAV_WINDOWING_HIGHLIGHT, __pyx_k_COLOR_NAV_WINDOWING_HIGHLIGHT, sizeof(__pyx_k_COLOR_NAV_WINDOWING_HIGHLIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_HISTOGRAM, __pyx_k_COLOR_PLOT_HISTOGRAM, sizeof(__pyx_k_COLOR_PLOT_HISTOGRAM), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_HISTOGRAM_HOVERED, __pyx_k_COLOR_PLOT_HISTOGRAM_HOVERED, sizeof(__pyx_k_COLOR_PLOT_HISTOGRAM_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_LINES, __pyx_k_COLOR_PLOT_LINES, sizeof(__pyx_k_COLOR_PLOT_LINES), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_LINES_HOVERED, __pyx_k_COLOR_PLOT_LINES_HOVERED, sizeof(__pyx_k_COLOR_PLOT_LINES_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_POPUP_BACKGROUND, __pyx_k_COLOR_POPUP_BACKGROUND, sizeof(__pyx_k_COLOR_POPUP_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_RESIZE_GRIP, __pyx_k_COLOR_RESIZE_GRIP, sizeof(__pyx_k_COLOR_RESIZE_GRIP), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_RESIZE_GRIP_ACTIVE, __pyx_k_COLOR_RESIZE_GRIP_ACTIVE, sizeof(__pyx_k_COLOR_RESIZE_GRIP_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_RESIZE_GRIP_HOVERED, __pyx_k_COLOR_RESIZE_GRIP_HOVERED, sizeof(__pyx_k_COLOR_RESIZE_GRIP_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_BACKGROUND, __pyx_k_COLOR_SCROLLBAR_BACKGROUND, sizeof(__pyx_k_COLOR_SCROLLBAR_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_GRAB, __pyx_k_COLOR_SCROLLBAR_GRAB, sizeof(__pyx_k_COLOR_SCROLLBAR_GRAB), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_GRAB_ACTIVE, __pyx_k_COLOR_SCROLLBAR_GRAB_ACTIVE, sizeof(__pyx_k_COLOR_SCROLLBAR_GRAB_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_GRAB_HOVERED, __pyx_k_COLOR_SCROLLBAR_GRAB_HOVERED, sizeof(__pyx_k_COLOR_SCROLLBAR_GRAB_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SEPARATOR, __pyx_k_COLOR_SEPARATOR, sizeof(__pyx_k_COLOR_SEPARATOR), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SEPARATOR_ACTIVE, __pyx_k_COLOR_SEPARATOR_ACTIVE, sizeof(__pyx_k_COLOR_SEPARATOR_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SEPARATOR_HOVERED, __pyx_k_COLOR_SEPARATOR_HOVERED, sizeof(__pyx_k_COLOR_SEPARATOR_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SLIDER_GRAB, __pyx_k_COLOR_SLIDER_GRAB, sizeof(__pyx_k_COLOR_SLIDER_GRAB), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SLIDER_GRAB_ACTIVE, __pyx_k_COLOR_SLIDER_GRAB_ACTIVE, sizeof(__pyx_k_COLOR_SLIDER_GRAB_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TEXT, __pyx_k_COLOR_TEXT, sizeof(__pyx_k_COLOR_TEXT), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TEXT_DISABLED, __pyx_k_COLOR_TEXT_DISABLED, sizeof(__pyx_k_COLOR_TEXT_DISABLED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TEXT_SELECTED_BACKGROUND, __pyx_k_COLOR_TEXT_SELECTED_BACKGROUND, sizeof(__pyx_k_COLOR_TEXT_SELECTED_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TITLE_BACKGROUND, __pyx_k_COLOR_TITLE_BACKGROUND, sizeof(__pyx_k_COLOR_TITLE_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TITLE_BACKGROUND_ACTIVE, __pyx_k_COLOR_TITLE_BACKGROUND_ACTIVE, sizeof(__pyx_k_COLOR_TITLE_BACKGROUND_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TITLE_BACKGROUND_COLLAPSED, __pyx_k_COLOR_TITLE_BACKGROUND_COLLAPSED, sizeof(__pyx_k_COLOR_TITLE_BACKGROUND_COLLAPSED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_WINDOW_BACKGROUND, __pyx_k_COLOR_WINDOW_BACKGROUND, sizeof(__pyx_k_COLOR_WINDOW_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_HEIGHT_LARGE, __pyx_k_COMBO_HEIGHT_LARGE, sizeof(__pyx_k_COMBO_HEIGHT_LARGE), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_HEIGHT_LARGEST, __pyx_k_COMBO_HEIGHT_LARGEST, sizeof(__pyx_k_COMBO_HEIGHT_LARGEST), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_HEIGHT_MASK, __pyx_k_COMBO_HEIGHT_MASK, sizeof(__pyx_k_COMBO_HEIGHT_MASK), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_HEIGHT_REGULAR, __pyx_k_COMBO_HEIGHT_REGULAR, sizeof(__pyx_k_COMBO_HEIGHT_REGULAR), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_HEIGHT_SMALL, __pyx_k_COMBO_HEIGHT_SMALL, sizeof(__pyx_k_COMBO_HEIGHT_SMALL), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_NO_ARROW_BUTTON, __pyx_k_COMBO_NO_ARROW_BUTTON, sizeof(__pyx_k_COMBO_NO_ARROW_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_NO_PREVIEW, __pyx_k_COMBO_NO_PREVIEW, sizeof(__pyx_k_COMBO_NO_PREVIEW), 0, 0, 1, 1},
  {&__pyx_n_s_COMBO_POPUP_ALIGN_LEFT, __pyx_k_COMBO_POPUP_ALIGN_LEFT, sizeof(__pyx_k_COMBO_POPUP_ALIGN_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_IS_RGB, __pyx_k_CONFIG_IS_RGB, sizeof(__pyx_k_CONFIG_IS_RGB), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_IS_TOUCH_SCREEN, __pyx_k_CONFIG_IS_TOUCH_SCREEN, sizeof(__pyx_k_CONFIG_IS_TOUCH_SCREEN), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_NAV_ENABLE_GAMEPAD, __pyx_k_CONFIG_NAV_ENABLE_GAMEPAD, sizeof(__pyx_k_CONFIG_NAV_ENABLE_GAMEPAD), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_NAV_ENABLE_KEYBOARD, __pyx_k_CONFIG_NAV_ENABLE_KEYBOARD, sizeof(__pyx_k_CONFIG_NAV_ENABLE_KEYBOARD), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_NAV_ENABLE_SET_MOUSE_POS, __pyx_k_CONFIG_NAV_ENABLE_SET_MOUSE_POS, sizeof(__pyx_k_CONFIG_NAV_ENABLE_SET_MOUSE_POS), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_NAV_NO_CAPTURE_KEYBOARD, __pyx_k_CONFIG_NAV_NO_CAPTURE_KEYBOARD, sizeof(__pyx_k_CONFIG_NAV_NO_CAPTURE_KEYBOARD), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_NO_MOUSE, __pyx_k_CONFIG_NO_MOUSE, sizeof(__pyx_k_CONFIG_NO_MOUSE), 0, 0, 1, 1},
  {&__pyx_n_s_CONFIG_NO_MOUSE_CURSOR_CHARGE, __pyx_k_CONFIG_NO_MOUSE_CURSOR_CHARGE, sizeof(__pyx_k_CONFIG_NO_MOUSE_CURSOR_CHARGE), 0, 0, 1, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Colors, __pyx_k_Colors, sizeof(__pyx_k_Colors), 0, 0, 1, 1},
  {&__pyx_kp_s_Context_invalid_None_or_destroye, __pyx_k_Context_invalid_None_or_destroye, sizeof(__pyx_k_Context_invalid_None_or_destroye), 0, 0, 1, 0},
  {&__pyx_n_s_DIRECTION_DOWN, __pyx_k_DIRECTION_DOWN, sizeof(__pyx_k_DIRECTION_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_DIRECTION_LEFT, __pyx_k_DIRECTION_LEFT, sizeof(__pyx_k_DIRECTION_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_DIRECTION_NONE, __pyx_k_DIRECTION_NONE, sizeof(__pyx_k_DIRECTION_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_DIRECTION_RIGHT, __pyx_k_DIRECTION_RIGHT, sizeof(__pyx_k_DIRECTION_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_DIRECTION_UP, __pyx_k_DIRECTION_UP, sizeof(__pyx_k_DIRECTION_UP), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_ACCEPT_BEFORE_DELIVERY, __pyx_k_DRAG_DROP_ACCEPT_BEFORE_DELIVERY, sizeof(__pyx_k_DRAG_DROP_ACCEPT_BEFORE_DELIVERY), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT, __pyx_k_DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT, sizeof(__pyx_k_DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_ACCEPT_NO_PREVIEW_TOOL, __pyx_k_DRAG_DROP_ACCEPT_NO_PREVIEW_TOOL, sizeof(__pyx_k_DRAG_DROP_ACCEPT_NO_PREVIEW_TOOL), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_ACCEPT_PEEK_ONLY, __pyx_k_DRAG_DROP_ACCEPT_PEEK_ONLY, sizeof(__pyx_k_DRAG_DROP_ACCEPT_PEEK_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_SOURCE_ALLOW_NULL_ID, __pyx_k_DRAG_DROP_SOURCE_ALLOW_NULL_ID, sizeof(__pyx_k_DRAG_DROP_SOURCE_ALLOW_NULL_ID), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_SOURCE_AUTO_EXPIRE_PAY, __pyx_k_DRAG_DROP_SOURCE_AUTO_EXPIRE_PAY, sizeof(__pyx_k_DRAG_DROP_SOURCE_AUTO_EXPIRE_PAY), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_SOURCE_EXTERN, __pyx_k_DRAG_DROP_SOURCE_EXTERN, sizeof(__pyx_k_DRAG_DROP_SOURCE_EXTERN), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_SOURCE_NO_DISABLE_HOVE, __pyx_k_DRAG_DROP_SOURCE_NO_DISABLE_HOVE, sizeof(__pyx_k_DRAG_DROP_SOURCE_NO_DISABLE_HOVE), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN, __pyx_k_DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN, sizeof(__pyx_k_DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_DRAG_DROP_SOURCE_NO_PREVIEW_TOOL, __pyx_k_DRAG_DROP_SOURCE_NO_PREVIEW_TOOL, sizeof(__pyx_k_DRAG_DROP_SOURCE_NO_PREVIEW_TOOL), 0, 0, 1, 1},
  {&__pyx_kp_s_Direction_wasn_t_specified, __pyx_k_Direction_wasn_t_specified, sizeof(__pyx_k_Direction_wasn_t_specified), 0, 0, 1, 0},
  {&__pyx_n_s_DrawCmd, __pyx_k_DrawCmd, sizeof(__pyx_k_DrawCmd), 0, 0, 1, 1},
  {&__pyx_n_s_DrawData, __pyx_k_DrawData, sizeof(__pyx_k_DrawData), 0, 0, 1, 1},
  {&__pyx_n_s_DrawList, __pyx_k_DrawList, sizeof(__pyx_k_DrawList), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_k_Expected_at_least_d_argument_s_g, sizeof(__pyx_k_Expected_at_least_d_argument_s_g), 0, 0, 1, 0},
  {&__pyx_n_s_FIRST_USE_EVER, __pyx_k_FIRST_USE_EVER, sizeof(__pyx_k_FIRST_USE_EVER), 0, 0, 1, 1},
  {&__pyx_n_s_FOCUS_ANY_WINDOW, __pyx_k_FOCUS_ANY_WINDOW, sizeof(__pyx_k_FOCUS_ANY_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_FOCUS_CHILD_WINDOWS, __pyx_k_FOCUS_CHILD_WINDOWS, sizeof(__pyx_k_FOCUS_CHILD_WINDOWS), 0, 0, 1, 1},
  {&__pyx_n_s_FOCUS_ROOT_AND_CHILD_WINDOWS, __pyx_k_FOCUS_ROOT_AND_CHILD_WINDOWS, sizeof(__pyx_k_FOCUS_ROOT_AND_CHILD_WINDOWS), 0, 0, 1, 1},
  {&__pyx_n_s_FOCUS_ROOT_WINDOW, __pyx_k_FOCUS_ROOT_WINDOW, sizeof(__pyx_k_FOCUS_ROOT_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_Font, __pyx_k_Font, sizeof(__pyx_k_Font), 0, 0, 1, 1},
  {&__pyx_n_s_FontAtlas, __pyx_k_FontAtlas, sizeof(__pyx_k_FontAtlas), 0, 0, 1, 1},
  {&__pyx_kp_s_Function_call_with_ambiguous_arg, __pyx_k_Function_call_with_ambiguous_arg, sizeof(__pyx_k_Function_call_with_ambiguous_arg), 0, 0, 1, 0},
  {&__pyx_n_s_GuiStyle, __pyx_k_GuiStyle, sizeof(__pyx_k_GuiStyle), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_AC, __pyx_k_HOVERED_ALLOW_WHEN_BLOCKED_BY_AC, sizeof(__pyx_k_HOVERED_ALLOW_WHEN_BLOCKED_BY_AC), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_PO, __pyx_k_HOVERED_ALLOW_WHEN_BLOCKED_BY_PO, sizeof(__pyx_k_HOVERED_ALLOW_WHEN_BLOCKED_BY_PO), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_ALLOW_WHEN_OVERLAPPED, __pyx_k_HOVERED_ALLOW_WHEN_OVERLAPPED, sizeof(__pyx_k_HOVERED_ALLOW_WHEN_OVERLAPPED), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_ANY_WINDOW, __pyx_k_HOVERED_ANY_WINDOW, sizeof(__pyx_k_HOVERED_ANY_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_CHILD_WINDOWS, __pyx_k_HOVERED_CHILD_WINDOWS, sizeof(__pyx_k_HOVERED_CHILD_WINDOWS), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_NONE, __pyx_k_HOVERED_NONE, sizeof(__pyx_k_HOVERED_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_RECT_ONLY, __pyx_k_HOVERED_RECT_ONLY, sizeof(__pyx_k_HOVERED_RECT_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_ROOT_AND_CHILD_WINDOWS, __pyx_k_HOVERED_ROOT_AND_CHILD_WINDOWS, sizeof(__pyx_k_HOVERED_ROOT_AND_CHILD_WINDOWS), 0, 0, 1, 1},
  {&__pyx_n_s_HOVERED_ROOT_WINDOW, __pyx_k_HOVERED_ROOT_WINDOW, sizeof(__pyx_k_HOVERED_ROOT_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_ALLOW_TAB_INPUT, __pyx_k_INPUT_TEXT_ALLOW_TAB_INPUT, sizeof(__pyx_k_INPUT_TEXT_ALLOW_TAB_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_ALWAYS_INSERT_MODE, __pyx_k_INPUT_TEXT_ALWAYS_INSERT_MODE, sizeof(__pyx_k_INPUT_TEXT_ALWAYS_INSERT_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_AUTO_SELECT_ALL, __pyx_k_INPUT_TEXT_AUTO_SELECT_ALL, sizeof(__pyx_k_INPUT_TEXT_AUTO_SELECT_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_ALWAYS, __pyx_k_INPUT_TEXT_CALLBACK_ALWAYS, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_ALWAYS), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_CHAR_FILTER, __pyx_k_INPUT_TEXT_CALLBACK_CHAR_FILTER, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_CHAR_FILTER), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_COMPLETION, __pyx_k_INPUT_TEXT_CALLBACK_COMPLETION, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_COMPLETION), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_HISTORY, __pyx_k_INPUT_TEXT_CALLBACK_HISTORY, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_HISTORY), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_DECIMAL, __pyx_k_INPUT_TEXT_CHARS_DECIMAL, sizeof(__pyx_k_INPUT_TEXT_CHARS_DECIMAL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_HEXADECIMAL, __pyx_k_INPUT_TEXT_CHARS_HEXADECIMAL, sizeof(__pyx_k_INPUT_TEXT_CHARS_HEXADECIMAL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_NO_BLANK, __pyx_k_INPUT_TEXT_CHARS_NO_BLANK, sizeof(__pyx_k_INPUT_TEXT_CHARS_NO_BLANK), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_UPPERCASE, __pyx_k_INPUT_TEXT_CHARS_UPPERCASE, sizeof(__pyx_k_INPUT_TEXT_CHARS_UPPERCASE), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI, __pyx_k_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI, sizeof(__pyx_k_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_ENTER_RETURNS_TRUE, __pyx_k_INPUT_TEXT_ENTER_RETURNS_TRUE, sizeof(__pyx_k_INPUT_TEXT_ENTER_RETURNS_TRUE), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_NO_HORIZONTAL_SCROLL, __pyx_k_INPUT_TEXT_NO_HORIZONTAL_SCROLL, sizeof(__pyx_k_INPUT_TEXT_NO_HORIZONTAL_SCROLL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_NO_UNDO_REDO, __pyx_k_INPUT_TEXT_NO_UNDO_REDO, sizeof(__pyx_k_INPUT_TEXT_NO_UNDO_REDO), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_PASSWORD, __pyx_k_INPUT_TEXT_PASSWORD, sizeof(__pyx_k_INPUT_TEXT_PASSWORD), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_READ_ONLY, __pyx_k_INPUT_TEXT_READ_ONLY, sizeof(__pyx_k_INPUT_TEXT_READ_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_IO, __pyx_k_IO, sizeof(__pyx_k_IO), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiContext, __pyx_k_ImGuiContext, sizeof(__pyx_k_ImGuiContext), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiError, __pyx_k_ImGuiError, sizeof(__pyx_k_ImGuiError), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiID, __pyx_k_ImGuiID, sizeof(__pyx_k_ImGuiID), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Improperly_initialized_use_imgui, __pyx_k_Improperly_initialized_use_imgui, sizeof(__pyx_k_Improperly_initialized_use_imgui), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_KEY_A, __pyx_k_KEY_A, sizeof(__pyx_k_KEY_A), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_BACKSPACE, __pyx_k_KEY_BACKSPACE, sizeof(__pyx_k_KEY_BACKSPACE), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_C, __pyx_k_KEY_C, sizeof(__pyx_k_KEY_C), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_DELETE, __pyx_k_KEY_DELETE, sizeof(__pyx_k_KEY_DELETE), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_DOWN_ARROW, __pyx_k_KEY_DOWN_ARROW, sizeof(__pyx_k_KEY_DOWN_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_END, __pyx_k_KEY_END, sizeof(__pyx_k_KEY_END), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_ENTER, __pyx_k_KEY_ENTER, sizeof(__pyx_k_KEY_ENTER), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_ESCAPE, __pyx_k_KEY_ESCAPE, sizeof(__pyx_k_KEY_ESCAPE), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_HOME, __pyx_k_KEY_HOME, sizeof(__pyx_k_KEY_HOME), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_INSERT, __pyx_k_KEY_INSERT, sizeof(__pyx_k_KEY_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_LEFT_ARROW, __pyx_k_KEY_LEFT_ARROW, sizeof(__pyx_k_KEY_LEFT_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_PAGE_DOWN, __pyx_k_KEY_PAGE_DOWN, sizeof(__pyx_k_KEY_PAGE_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_PAGE_UP, __pyx_k_KEY_PAGE_UP, sizeof(__pyx_k_KEY_PAGE_UP), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_RIGHT_ARROW, __pyx_k_KEY_RIGHT_ARROW, sizeof(__pyx_k_KEY_RIGHT_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_SPACE, __pyx_k_KEY_SPACE, sizeof(__pyx_k_KEY_SPACE), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_TAB, __pyx_k_KEY_TAB, sizeof(__pyx_k_KEY_TAB), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_UP_ARROW, __pyx_k_KEY_UP_ARROW, sizeof(__pyx_k_KEY_UP_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_V, __pyx_k_KEY_V, sizeof(__pyx_k_KEY_V), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_X, __pyx_k_KEY_X, sizeof(__pyx_k_KEY_X), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_Y, __pyx_k_KEY_Y, sizeof(__pyx_k_KEY_Y), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_Z, __pyx_k_KEY_Z, sizeof(__pyx_k_KEY_Z), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_ARROW, __pyx_k_MOUSE_CURSOR_ARROW, sizeof(__pyx_k_MOUSE_CURSOR_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_HAND, __pyx_k_MOUSE_CURSOR_HAND, sizeof(__pyx_k_MOUSE_CURSOR_HAND), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_NONE, __pyx_k_MOUSE_CURSOR_NONE, sizeof(__pyx_k_MOUSE_CURSOR_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_ALL, __pyx_k_MOUSE_CURSOR_RESIZE_ALL, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_EW, __pyx_k_MOUSE_CURSOR_RESIZE_EW, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_EW), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_NESW, __pyx_k_MOUSE_CURSOR_RESIZE_NESW, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_NESW), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_NS, __pyx_k_MOUSE_CURSOR_RESIZE_NS, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_NS), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_NWSE, __pyx_k_MOUSE_CURSOR_RESIZE_NWSE, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_NWSE), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_TEXT_INPUT, __pyx_k_MOUSE_CURSOR_TEXT_INPUT, sizeof(__pyx_k_MOUSE_CURSOR_TEXT_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_kp_s_No_matching_signature_found, __pyx_k_No_matching_signature_found, sizeof(__pyx_k_No_matching_signature_found), 0, 0, 1, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_n_s_ONCE, __pyx_k_ONCE, sizeof(__pyx_k_ONCE), 0, 0, 1, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_ALLOW_DOUBLE_CLICK, __pyx_k_SELECTABLE_ALLOW_DOUBLE_CLICK, sizeof(__pyx_k_SELECTABLE_ALLOW_DOUBLE_CLICK), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_DONT_CLOSE_POPUPS, __pyx_k_SELECTABLE_DONT_CLOSE_POPUPS, sizeof(__pyx_k_SELECTABLE_DONT_CLOSE_POPUPS), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_SPAN_ALL_COLUMNS, __pyx_k_SELECTABLE_SPAN_ALL_COLUMNS, sizeof(__pyx_k_SELECTABLE_SPAN_ALL_COLUMNS), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_ALPHA, __pyx_k_STYLE_ALPHA, sizeof(__pyx_k_STYLE_ALPHA), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_BUTTON_TEXT_ALIGN, __pyx_k_STYLE_BUTTON_TEXT_ALIGN, sizeof(__pyx_k_STYLE_BUTTON_TEXT_ALIGN), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_CHILD_BORDERSIZE, __pyx_k_STYLE_CHILD_BORDERSIZE, sizeof(__pyx_k_STYLE_CHILD_BORDERSIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_CHILD_ROUNDING, __pyx_k_STYLE_CHILD_ROUNDING, sizeof(__pyx_k_STYLE_CHILD_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_FRAME_BORDERSIZE, __pyx_k_STYLE_FRAME_BORDERSIZE, sizeof(__pyx_k_STYLE_FRAME_BORDERSIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_FRAME_PADDING, __pyx_k_STYLE_FRAME_PADDING, sizeof(__pyx_k_STYLE_FRAME_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_FRAME_ROUNDING, __pyx_k_STYLE_FRAME_ROUNDING, sizeof(__pyx_k_STYLE_FRAME_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_GRAB_MIN_SIZE, __pyx_k_STYLE_GRAB_MIN_SIZE, sizeof(__pyx_k_STYLE_GRAB_MIN_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_GRAB_ROUNDING, __pyx_k_STYLE_GRAB_ROUNDING, sizeof(__pyx_k_STYLE_GRAB_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_INDENT_SPACING, __pyx_k_STYLE_INDENT_SPACING, sizeof(__pyx_k_STYLE_INDENT_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_ITEM_INNER_SPACING, __pyx_k_STYLE_ITEM_INNER_SPACING, sizeof(__pyx_k_STYLE_ITEM_INNER_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_ITEM_SPACING, __pyx_k_STYLE_ITEM_SPACING, sizeof(__pyx_k_STYLE_ITEM_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_POPUP_BORDERSIZE, __pyx_k_STYLE_POPUP_BORDERSIZE, sizeof(__pyx_k_STYLE_POPUP_BORDERSIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_POPUP_ROUNDING, __pyx_k_STYLE_POPUP_ROUNDING, sizeof(__pyx_k_STYLE_POPUP_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_SCROLLBAR_ROUNDING, __pyx_k_STYLE_SCROLLBAR_ROUNDING, sizeof(__pyx_k_STYLE_SCROLLBAR_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_SCROLLBAR_SIZE, __pyx_k_STYLE_SCROLLBAR_SIZE, sizeof(__pyx_k_STYLE_SCROLLBAR_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_BORDERSIZE, __pyx_k_STYLE_WINDOW_BORDERSIZE, sizeof(__pyx_k_STYLE_WINDOW_BORDERSIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_MIN_SIZE, __pyx_k_STYLE_WINDOW_MIN_SIZE, sizeof(__pyx_k_STYLE_WINDOW_MIN_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_PADDING, __pyx_k_STYLE_WINDOW_PADDING, sizeof(__pyx_k_STYLE_WINDOW_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_ROUNDING, __pyx_k_STYLE_WINDOW_ROUNDING, sizeof(__pyx_k_STYLE_WINDOW_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_TITLE_ALIGN, __pyx_k_STYLE_WINDOW_TITLE_ALIGN, sizeof(__pyx_k_STYLE_WINDOW_TITLE_ALIGN), 0, 0, 1, 1},
  {&__pyx_n_s_StaticGlyphRanges, __pyx_k_StaticGlyphRanges, sizeof(__pyx_k_StaticGlyphRanges), 0, 0, 1, 1},
  {&__pyx_kp_s_Style_value_must_be_float_or_two, __pyx_k_Style_value_must_be_float_or_two, sizeof(__pyx_k_Style_value_must_be_float_or_two), 0, 0, 1, 0},
  {&__pyx_n_s_TREE_NODE_ALLOW_ITEM_OVERLAP, __pyx_k_TREE_NODE_ALLOW_ITEM_OVERLAP, sizeof(__pyx_k_TREE_NODE_ALLOW_ITEM_OVERLAP), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_BULLET, __pyx_k_TREE_NODE_BULLET, sizeof(__pyx_k_TREE_NODE_BULLET), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_COLLAPSING_HEADER, __pyx_k_TREE_NODE_COLLAPSING_HEADER, sizeof(__pyx_k_TREE_NODE_COLLAPSING_HEADER), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_DEFAULT_OPEN, __pyx_k_TREE_NODE_DEFAULT_OPEN, sizeof(__pyx_k_TREE_NODE_DEFAULT_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_FRAMED, __pyx_k_TREE_NODE_FRAMED, sizeof(__pyx_k_TREE_NODE_FRAMED), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_FRAME_PADDING, __pyx_k_TREE_NODE_FRAME_PADDING, sizeof(__pyx_k_TREE_NODE_FRAME_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_LEAF, __pyx_k_TREE_NODE_LEAF, sizeof(__pyx_k_TREE_NODE_LEAF), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_NO_AUTO_OPEN_ON_LOG, __pyx_k_TREE_NODE_NO_AUTO_OPEN_ON_LOG, sizeof(__pyx_k_TREE_NODE_NO_AUTO_OPEN_ON_LOG), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_NO_TREE_PUSH_ON_OPEN, __pyx_k_TREE_NODE_NO_TREE_PUSH_ON_OPEN, sizeof(__pyx_k_TREE_NODE_NO_TREE_PUSH_ON_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_OPEN_ON_ARROW, __pyx_k_TREE_NODE_OPEN_ON_ARROW, sizeof(__pyx_k_TREE_NODE_OPEN_ON_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_OPEN_ON_DOUBLE_CLICK, __pyx_k_TREE_NODE_OPEN_ON_DOUBLE_CLICK, sizeof(__pyx_k_TREE_NODE_OPEN_ON_DOUBLE_CLICK), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_SELECTED, __pyx_k_TREE_NODE_SELECTED, sizeof(__pyx_k_TREE_NODE_SELECTED), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_style_variable, __pyx_k_Unknown_style_variable, sizeof(__pyx_k_Unknown_style_variable), 0, 0, 1, 0},
  {&__pyx_kp_s_Unsufficient_style_info_variable, __pyx_k_Unsufficient_style_info_variable, sizeof(__pyx_k_Unsufficient_style_info_variable), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Vec2, __pyx_k_Vec2, sizeof(__pyx_k_Vec2), 0, 0, 1, 1},
  {&__pyx_n_s_Vec4, __pyx_k_Vec4, sizeof(__pyx_k_Vec4), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_AUTO_RESIZE, __pyx_k_WINDOW_ALWAYS_AUTO_RESIZE, sizeof(__pyx_k_WINDOW_ALWAYS_AUTO_RESIZE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_HORIZONTAL_SCROLLB, __pyx_k_WINDOW_ALWAYS_HORIZONTAL_SCROLLB, sizeof(__pyx_k_WINDOW_ALWAYS_HORIZONTAL_SCROLLB), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_USE_WINDOW_PADDING, __pyx_k_WINDOW_ALWAYS_USE_WINDOW_PADDING, sizeof(__pyx_k_WINDOW_ALWAYS_USE_WINDOW_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_VERTICAL_SCROLLBAR, __pyx_k_WINDOW_ALWAYS_VERTICAL_SCROLLBAR, sizeof(__pyx_k_WINDOW_ALWAYS_VERTICAL_SCROLLBAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_HORIZONTAL_SCROLLING_BAR, __pyx_k_WINDOW_HORIZONTAL_SCROLLING_BAR, sizeof(__pyx_k_WINDOW_HORIZONTAL_SCROLLING_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_MENU_BAR, __pyx_k_WINDOW_MENU_BAR, sizeof(__pyx_k_WINDOW_MENU_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_BRING_TO_FRONT_ON_FOCU, __pyx_k_WINDOW_NO_BRING_TO_FRONT_ON_FOCU, sizeof(__pyx_k_WINDOW_NO_BRING_TO_FRONT_ON_FOCU), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_COLLAPSE, __pyx_k_WINDOW_NO_COLLAPSE, sizeof(__pyx_k_WINDOW_NO_COLLAPSE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_FOCUS_ON_APPEARING, __pyx_k_WINDOW_NO_FOCUS_ON_APPEARING, sizeof(__pyx_k_WINDOW_NO_FOCUS_ON_APPEARING), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_INPUTS, __pyx_k_WINDOW_NO_INPUTS, sizeof(__pyx_k_WINDOW_NO_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_MOVE, __pyx_k_WINDOW_NO_MOVE, sizeof(__pyx_k_WINDOW_NO_MOVE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_NAV, __pyx_k_WINDOW_NO_NAV, sizeof(__pyx_k_WINDOW_NO_NAV), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_NAV_FOCUS, __pyx_k_WINDOW_NO_NAV_FOCUS, sizeof(__pyx_k_WINDOW_NO_NAV_FOCUS), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_NAV_INPUTS, __pyx_k_WINDOW_NO_NAV_INPUTS, sizeof(__pyx_k_WINDOW_NO_NAV_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_RESIZE, __pyx_k_WINDOW_NO_RESIZE, sizeof(__pyx_k_WINDOW_NO_RESIZE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_SAVED_SETTINGS, __pyx_k_WINDOW_NO_SAVED_SETTINGS, sizeof(__pyx_k_WINDOW_NO_SAVED_SETTINGS), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_SCROLLBAR, __pyx_k_WINDOW_NO_SCROLLBAR, sizeof(__pyx_k_WINDOW_NO_SCROLLBAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_SCROLL_WITH_MOUSE, __pyx_k_WINDOW_NO_SCROLL_WITH_MOUSE, sizeof(__pyx_k_WINDOW_NO_SCROLL_WITH_MOUSE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_TITLE_BAR, __pyx_k_WINDOW_NO_TITLE_BAR, sizeof(__pyx_k_WINDOW_NO_TITLE_BAR), 0, 0, 1, 1},
  {&__pyx_kp_s__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 0},
  {&__pyx_kp_s__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 0},
  {&__pyx_kp_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 0},
  {&__pyx_kp_s__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_accept_drag_drop_payload, __pyx_k_accept_drag_drop_payload, sizeof(__pyx_k_accept_drag_drop_payload), 0, 0, 1, 1},
  {&__pyx_n_s_active, __pyx_k_active, sizeof(__pyx_k_active), 0, 0, 1, 1},
  {&__pyx_n_s_align_text_to_frame_padding, __pyx_k_align_text_to_frame_padding, sizeof(__pyx_k_align_text_to_frame_padding), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_alpha_mul, __pyx_k_alpha_mul, sizeof(__pyx_k_alpha_mul), 0, 0, 1, 1},
  {&__pyx_n_s_also_over_items, __pyx_k_also_over_items, sizeof(__pyx_k_also_over_items), 0, 0, 1, 1},
  {&__pyx_n_s_ansifeed_text_ansi, __pyx_k_ansifeed_text_ansi, sizeof(__pyx_k_ansifeed_text_ansi), 0, 0, 1, 1},
  {&__pyx_n_s_ansifeed_text_ansi_colored, __pyx_k_ansifeed_text_ansi_colored, sizeof(__pyx_k_ansifeed_text_ansi_colored), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_arrow_button, __pyx_k_arrow_button, sizeof(__pyx_k_arrow_button), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {&__pyx_n_s_begin_child, __pyx_k_begin_child, sizeof(__pyx_k_begin_child), 0, 0, 1, 1},
  {&__pyx_n_s_begin_drag_drop_source, __pyx_k_begin_drag_drop_source, sizeof(__pyx_k_begin_drag_drop_source), 0, 0, 1, 1},
  {&__pyx_n_s_begin_drag_drop_target, __pyx_k_begin_drag_drop_target, sizeof(__pyx_k_begin_drag_drop_target), 0, 0, 1, 1},
  {&__pyx_n_s_begin_group, __pyx_k_begin_group, sizeof(__pyx_k_begin_group), 0, 0, 1, 1},
  {&__pyx_n_s_begin_main_menu_bar, __pyx_k_begin_main_menu_bar, sizeof(__pyx_k_begin_main_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_begin_menu, __pyx_k_begin_menu, sizeof(__pyx_k_begin_menu), 0, 0, 1, 1},
  {&__pyx_n_s_begin_menu_bar, __pyx_k_begin_menu_bar, sizeof(__pyx_k_begin_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup, __pyx_k_begin_popup, sizeof(__pyx_k_begin_popup), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup_context_item, __pyx_k_begin_popup_context_item, sizeof(__pyx_k_begin_popup_context_item), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup_context_window, __pyx_k_begin_popup_context_window, sizeof(__pyx_k_begin_popup_context_window), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup_modal, __pyx_k_begin_popup_modal, sizeof(__pyx_k_begin_popup_modal), 0, 0, 1, 1},
  {&__pyx_n_s_begin_tooltip, __pyx_k_begin_tooltip, sizeof(__pyx_k_begin_tooltip), 0, 0, 1, 1},
  {&__pyx_n_s_border, __pyx_k_border, sizeof(__pyx_k_border), 0, 0, 1, 1},
  {&__pyx_n_s_border_color, __pyx_k_border_color, sizeof(__pyx_k_border_color), 0, 0, 1, 1},
  {&__pyx_n_s_buffer_length, __pyx_k_buffer_length, sizeof(__pyx_k_buffer_length), 0, 0, 1, 1},
  {&__pyx_n_s_bullet, __pyx_k_bullet, sizeof(__pyx_k_bullet), 0, 0, 1, 1},
  {&__pyx_n_s_bullet_text, __pyx_k_bullet_text, sizeof(__pyx_k_bullet_text), 0, 0, 1, 1},
  {&__pyx_n_s_button, __pyx_k_button, sizeof(__pyx_k_button), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_c_string, __pyx_k_c_string, sizeof(__pyx_k_c_string), 0, 0, 1, 1},
  {&__pyx_n_s_center_y_ratio, __pyx_k_center_y_ratio, sizeof(__pyx_k_center_y_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_centre_x, __pyx_k_centre_x, sizeof(__pyx_k_centre_x), 0, 0, 1, 1},
  {&__pyx_n_s_centre_y, __pyx_k_centre_y, sizeof(__pyx_k_centre_y), 0, 0, 1, 1},
  {&__pyx_n_s_change_speed, __pyx_k_change_speed, sizeof(__pyx_k_change_speed), 0, 0, 1, 1},
  {&__pyx_n_s_changed, __pyx_k_changed, sizeof(__pyx_k_changed), 0, 0, 1, 1},
  {&__pyx_n_s_checkbox, __pyx_k_checkbox, sizeof(__pyx_k_checkbox), 0, 0, 1, 1},
  {&__pyx_n_s_checkbox_flags, __pyx_k_checkbox_flags, sizeof(__pyx_k_checkbox_flags), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_clicked, __pyx_k_clicked, sizeof(__pyx_k_clicked), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clip, __pyx_k_clip, sizeof(__pyx_k_clip), 0, 0, 1, 1},
  {&__pyx_n_s_closable, __pyx_k_closable, sizeof(__pyx_k_closable), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_close_current_popup, __pyx_k_close_current_popup, sizeof(__pyx_k_close_current_popup), 0, 0, 1, 1},
  {&__pyx_n_s_closed, __pyx_k_closed, sizeof(__pyx_k_closed), 0, 0, 1, 1},
  {&__pyx_n_s_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 0, 1, 1},
  {&__pyx_n_s_collapsed, __pyx_k_collapsed, sizeof(__pyx_k_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_collapsing_header, __pyx_k_collapsing_header, sizeof(__pyx_k_collapsing_header), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_color_button, __pyx_k_color_button, sizeof(__pyx_k_color_button), 0, 0, 1, 1},
  {&__pyx_n_s_color_edit3, __pyx_k_color_edit3, sizeof(__pyx_k_color_edit3), 0, 0, 1, 1},
  {&__pyx_n_s_color_edit4, __pyx_k_color_edit4, sizeof(__pyx_k_color_edit4), 0, 0, 1, 1},
  {&__pyx_n_s_column_index, __pyx_k_column_index, sizeof(__pyx_k_column_index), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_combo, __pyx_k_combo, sizeof(__pyx_k_combo), 0, 0, 1, 1},
  {&__pyx_n_s_condition, __pyx_k_condition, sizeof(__pyx_k_condition), 0, 0, 1, 1},
  {&__pyx_n_s_contextlib, __pyx_k_contextlib, sizeof(__pyx_k_contextlib), 0, 0, 1, 1},
  {&__pyx_n_s_contextmanager, __pyx_k_contextmanager, sizeof(__pyx_k_contextmanager), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_create, __pyx_k_create, sizeof(__pyx_k_create), 0, 0, 1, 1},
  {&__pyx_n_s_create_context, __pyx_k_create_context, sizeof(__pyx_k_create_context), 0, 0, 1, 1},
  {&__pyx_n_s_ctx, __pyx_k_ctx, sizeof(__pyx_k_ctx), 0, 0, 1, 1},
  {&__pyx_n_s_current, __pyx_k_current, sizeof(__pyx_k_current), 0, 0, 1, 1},
  {&__pyx_kp_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_defaults, __pyx_k_defaults, sizeof(__pyx_k_defaults), 0, 0, 1, 1},
  {&__pyx_n_s_desc_id, __pyx_k_desc_id, sizeof(__pyx_k_desc_id), 0, 0, 1, 1},
  {&__pyx_n_s_destroy_context, __pyx_k_destroy_context, sizeof(__pyx_k_destroy_context), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float, __pyx_k_drag_float, sizeof(__pyx_k_drag_float), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float2, __pyx_k_drag_float2, sizeof(__pyx_k_drag_float2), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float3, __pyx_k_drag_float3, sizeof(__pyx_k_drag_float3), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float4, __pyx_k_drag_float4, sizeof(__pyx_k_drag_float4), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int, __pyx_k_drag_int, sizeof(__pyx_k_drag_int), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int2, __pyx_k_drag_int2, sizeof(__pyx_k_drag_int2), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int3, __pyx_k_drag_int3, sizeof(__pyx_k_drag_int3), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int4, __pyx_k_drag_int4, sizeof(__pyx_k_drag_int4), 0, 0, 1, 1},
  {&__pyx_n_s_dst, __pyx_k_dst, sizeof(__pyx_k_dst), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_dummy, __pyx_k_dummy, sizeof(__pyx_k_dummy), 0, 0, 1, 1},
  {&__pyx_n_s_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_end_child, __pyx_k_end_child, sizeof(__pyx_k_end_child), 0, 0, 1, 1},
  {&__pyx_n_s_end_drag_drop_source, __pyx_k_end_drag_drop_source, sizeof(__pyx_k_end_drag_drop_source), 0, 0, 1, 1},
  {&__pyx_n_s_end_drag_drop_target, __pyx_k_end_drag_drop_target, sizeof(__pyx_k_end_drag_drop_target), 0, 0, 1, 1},
  {&__pyx_n_s_end_frame, __pyx_k_end_frame, sizeof(__pyx_k_end_frame), 0, 0, 1, 1},
  {&__pyx_n_s_end_group, __pyx_k_end_group, sizeof(__pyx_k_end_group), 0, 0, 1, 1},
  {&__pyx_n_s_end_main_menu_bar, __pyx_k_end_main_menu_bar, sizeof(__pyx_k_end_main_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_end_menu, __pyx_k_end_menu, sizeof(__pyx_k_end_menu), 0, 0, 1, 1},
  {&__pyx_n_s_end_menu_bar, __pyx_k_end_menu_bar, sizeof(__pyx_k_end_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_end_popup, __pyx_k_end_popup, sizeof(__pyx_k_end_popup), 0, 0, 1, 1},
  {&__pyx_n_s_end_tooltip, __pyx_k_end_tooltip, sizeof(__pyx_k_end_tooltip), 0, 0, 1, 1},
  {&__pyx_n_s_end_x, __pyx_k_end_x, sizeof(__pyx_k_end_x), 0, 0, 1, 1},
  {&__pyx_n_s_end_y, __pyx_k_end_y, sizeof(__pyx_k_end_y), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_kp_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 0},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_fillvalue, __pyx_k_fillvalue, sizeof(__pyx_k_fillvalue), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_flags_value, __pyx_k_flags_value, sizeof(__pyx_k_flags_value), 0, 0, 1, 1},
  {&__pyx_n_s_font, __pyx_k_font, sizeof(__pyx_k_font), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_fraction, __pyx_k_fraction, sizeof(__pyx_k_fraction), 0, 0, 1, 1},
  {&__pyx_n_s_frame_padding, __pyx_k_frame_padding, sizeof(__pyx_k_frame_padding), 0, 0, 1, 1},
  {&__pyx_kp_s_func_is_not_a_callable_s, __pyx_k_func_is_not_a_callable_s, sizeof(__pyx_k_func_is_not_a_callable_s), 0, 0, 1, 0},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_get_clipboard_text_fn, __pyx_k_get_clipboard_text_fn, sizeof(__pyx_k_get_clipboard_text_fn), 0, 0, 1, 1},
  {&__pyx_n_s_get_column_index, __pyx_k_get_column_index, sizeof(__pyx_k_get_column_index), 0, 0, 1, 1},
  {&__pyx_n_s_get_column_offset, __pyx_k_get_column_offset, sizeof(__pyx_k_get_column_offset), 0, 0, 1, 1},
  {&__pyx_n_s_get_column_width, __pyx_k_get_column_width, sizeof(__pyx_k_get_column_width), 0, 0, 1, 1},
  {&__pyx_n_s_get_columns_count, __pyx_k_get_columns_count, sizeof(__pyx_k_get_columns_count), 0, 0, 1, 1},
  {&__pyx_n_s_get_content_region_available, __pyx_k_get_content_region_available, sizeof(__pyx_k_get_content_region_available), 0, 0, 1, 1},
  {&__pyx_n_s_get_content_region_available_wid, __pyx_k_get_content_region_available_wid, sizeof(__pyx_k_get_content_region_available_wid), 0, 0, 1, 1},
  {&__pyx_n_s_get_content_region_max, __pyx_k_get_content_region_max, sizeof(__pyx_k_get_content_region_max), 0, 0, 1, 1},
  {&__pyx_n_s_get_current_context, __pyx_k_get_current_context, sizeof(__pyx_k_get_current_context), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_pos, __pyx_k_get_cursor_pos, sizeof(__pyx_k_get_cursor_pos), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_pos_x, __pyx_k_get_cursor_pos_x, sizeof(__pyx_k_get_cursor_pos_x), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_pos_y, __pyx_k_get_cursor_pos_y, sizeof(__pyx_k_get_cursor_pos_y), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_position, __pyx_k_get_cursor_position, sizeof(__pyx_k_get_cursor_position), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_screen_pos, __pyx_k_get_cursor_screen_pos, sizeof(__pyx_k_get_cursor_screen_pos), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_screen_position, __pyx_k_get_cursor_screen_position, sizeof(__pyx_k_get_cursor_screen_position), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_start_pos, __pyx_k_get_cursor_start_pos, sizeof(__pyx_k_get_cursor_start_pos), 0, 0, 1, 1},
  {&__pyx_n_s_get_cursor_start_position, __pyx_k_get_cursor_start_position, sizeof(__pyx_k_get_cursor_start_position), 0, 0, 1, 1},
  {&__pyx_n_s_get_draw_data, __pyx_k_get_draw_data, sizeof(__pyx_k_get_draw_data), 0, 0, 1, 1},
  {&__pyx_n_s_get_frame_height, __pyx_k_get_frame_height, sizeof(__pyx_k_get_frame_height), 0, 0, 1, 1},
  {&__pyx_n_s_get_frame_height_with_spacing, __pyx_k_get_frame_height_with_spacing, sizeof(__pyx_k_get_frame_height_with_spacing), 0, 0, 1, 1},
  {&__pyx_n_s_get_io, __pyx_k_get_io, sizeof(__pyx_k_get_io), 0, 0, 1, 1},
  {&__pyx_n_s_get_item_rect_max, __pyx_k_get_item_rect_max, sizeof(__pyx_k_get_item_rect_max), 0, 0, 1, 1},
  {&__pyx_n_s_get_item_rect_min, __pyx_k_get_item_rect_min, sizeof(__pyx_k_get_item_rect_min), 0, 0, 1, 1},
  {&__pyx_n_s_get_item_rect_size, __pyx_k_get_item_rect_size, sizeof(__pyx_k_get_item_rect_size), 0, 0, 1, 1},
  {&__pyx_n_s_get_mouse_cursor, __pyx_k_get_mouse_cursor, sizeof(__pyx_k_get_mouse_cursor), 0, 0, 1, 1},
  {&__pyx_n_s_get_mouse_drag_delta, __pyx_k_get_mouse_drag_delta, sizeof(__pyx_k_get_mouse_drag_delta), 0, 0, 1, 1},
  {&__pyx_n_s_get_mouse_pos, __pyx_k_get_mouse_pos, sizeof(__pyx_k_get_mouse_pos), 0, 0, 1, 1},
  {&__pyx_n_s_get_mouse_position, __pyx_k_get_mouse_position, sizeof(__pyx_k_get_mouse_position), 0, 0, 1, 1},
  {&__pyx_n_s_get_overlay_draw_list, __pyx_k_get_overlay_draw_list, sizeof(__pyx_k_get_overlay_draw_list), 0, 0, 1, 1},
  {&__pyx_n_s_get_scroll_max_x, __pyx_k_get_scroll_max_x, sizeof(__pyx_k_get_scroll_max_x), 0, 0, 1, 1},
  {&__pyx_n_s_get_scroll_max_y, __pyx_k_get_scroll_max_y, sizeof(__pyx_k_get_scroll_max_y), 0, 0, 1, 1},
  {&__pyx_n_s_get_scroll_x, __pyx_k_get_scroll_x, sizeof(__pyx_k_get_scroll_x), 0, 0, 1, 1},
  {&__pyx_n_s_get_scroll_y, __pyx_k_get_scroll_y, sizeof(__pyx_k_get_scroll_y), 0, 0, 1, 1},
  {&__pyx_n_s_get_style, __pyx_k_get_style, sizeof(__pyx_k_get_style), 0, 0, 1, 1},
  {&__pyx_n_s_get_style_color_name, __pyx_k_get_style_color_name, sizeof(__pyx_k_get_style_color_name), 0, 0, 1, 1},
  {&__pyx_n_s_get_text_line_height, __pyx_k_get_text_line_height, sizeof(__pyx_k_get_text_line_height), 0, 0, 1, 1},
  {&__pyx_n_s_get_text_line_height_with_spacin, __pyx_k_get_text_line_height_with_spacin, sizeof(__pyx_k_get_text_line_height_with_spacin), 0, 0, 1, 1},
  {&__pyx_n_s_get_time, __pyx_k_get_time, sizeof(__pyx_k_get_time), 0, 0, 1, 1},
  {&__pyx_n_s_get_version, __pyx_k_get_version, sizeof(__pyx_k_get_version), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_content_region_max, __pyx_k_get_window_content_region_max, sizeof(__pyx_k_get_window_content_region_max), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_content_region_min, __pyx_k_get_window_content_region_min, sizeof(__pyx_k_get_window_content_region_min), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_content_region_width, __pyx_k_get_window_content_region_width, sizeof(__pyx_k_get_window_content_region_width), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_draw_list, __pyx_k_get_window_draw_list, sizeof(__pyx_k_get_window_draw_list), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_height, __pyx_k_get_window_height, sizeof(__pyx_k_get_window_height), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_position, __pyx_k_get_window_position, sizeof(__pyx_k_get_window_position), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_size, __pyx_k_get_window_size, sizeof(__pyx_k_get_window_size), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_width, __pyx_k_get_window_width, sizeof(__pyx_k_get_window_width), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_glyph_ranges, __pyx_k_glyph_ranges, sizeof(__pyx_k_glyph_ranges), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_graph_size, __pyx_k_graph_size, sizeof(__pyx_k_graph_size), 0, 0, 1, 1},
  {&__pyx_n_s_gui_style, __pyx_k_gui_style, sizeof(__pyx_k_gui_style), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_height_in_items, __pyx_k_height_in_items, sizeof(__pyx_k_height_in_items), 0, 0, 1, 1},
  {&__pyx_n_s_hide_text_after_double_hash, __pyx_k_hide_text_after_double_hash, sizeof(__pyx_k_hide_text_after_double_hash), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_identifier, __pyx_k_identifier, sizeof(__pyx_k_identifier), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 0, 1, 1},
  {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
  {&__pyx_n_s_image_button, __pyx_k_image_button, sizeof(__pyx_k_image_button), 0, 0, 1, 1},
  {&__pyx_n_s_imgui_core, __pyx_k_imgui_core, sizeof(__pyx_k_imgui_core), 0, 0, 1, 1},
  {&__pyx_kp_s_imgui_core_pyx, __pyx_k_imgui_core_pyx, sizeof(__pyx_k_imgui_core_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_items, __pyx_k_in_items, sizeof(__pyx_k_in_items), 0, 0, 1, 1},
  {&__pyx_n_s_indent, __pyx_k_indent, sizeof(__pyx_k_indent), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_inout_color, __pyx_k_inout_color, sizeof(__pyx_k_inout_color), 0, 0, 1, 1},
  {&__pyx_n_s_inout_current, __pyx_k_inout_current, sizeof(__pyx_k_inout_current), 0, 0, 1, 1},
  {&__pyx_n_s_inout_flags, __pyx_k_inout_flags, sizeof(__pyx_k_inout_flags), 0, 0, 1, 1},
  {&__pyx_n_s_inout_opened, __pyx_k_inout_opened, sizeof(__pyx_k_inout_opened), 0, 0, 1, 1},
  {&__pyx_n_s_inout_selected, __pyx_k_inout_selected, sizeof(__pyx_k_inout_selected), 0, 0, 1, 1},
  {&__pyx_n_s_inout_state, __pyx_k_inout_state, sizeof(__pyx_k_inout_state), 0, 0, 1, 1},
  {&__pyx_n_s_inout_text, __pyx_k_inout_text, sizeof(__pyx_k_inout_text), 0, 0, 1, 1},
  {&__pyx_n_s_inout_value, __pyx_k_inout_value, sizeof(__pyx_k_inout_value), 0, 0, 1, 1},
  {&__pyx_n_s_inout_values, __pyx_k_inout_values, sizeof(__pyx_k_inout_values), 0, 0, 1, 1},
  {&__pyx_n_s_inout_visible, __pyx_k_inout_visible, sizeof(__pyx_k_inout_visible), 0, 0, 1, 1},
  {&__pyx_n_s_input_double, __pyx_k_input_double, sizeof(__pyx_k_input_double), 0, 0, 1, 1},
  {&__pyx_n_s_input_float, __pyx_k_input_float, sizeof(__pyx_k_input_float), 0, 0, 1, 1},
  {&__pyx_n_s_input_float2, __pyx_k_input_float2, sizeof(__pyx_k_input_float2), 0, 0, 1, 1},
  {&__pyx_n_s_input_float3, __pyx_k_input_float3, sizeof(__pyx_k_input_float3), 0, 0, 1, 1},
  {&__pyx_n_s_input_float4, __pyx_k_input_float4, sizeof(__pyx_k_input_float4), 0, 0, 1, 1},
  {&__pyx_n_s_input_int, __pyx_k_input_int, sizeof(__pyx_k_input_int), 0, 0, 1, 1},
  {&__pyx_n_s_input_int2, __pyx_k_input_int2, sizeof(__pyx_k_input_int2), 0, 0, 1, 1},
  {&__pyx_n_s_input_int3, __pyx_k_input_int3, sizeof(__pyx_k_input_int3), 0, 0, 1, 1},
  {&__pyx_n_s_input_int4, __pyx_k_input_int4, sizeof(__pyx_k_input_int4), 0, 0, 1, 1},
  {&__pyx_n_s_input_text, __pyx_k_input_text, sizeof(__pyx_k_input_text), 0, 0, 1, 1},
  {&__pyx_n_s_input_text_multiline, __pyx_k_input_text_multiline, sizeof(__pyx_k_input_text_multiline), 0, 0, 1, 1},
  {&__pyx_n_s_invisible_button, __pyx_k_invisible_button, sizeof(__pyx_k_invisible_button), 0, 0, 1, 1},
  {&__pyx_n_s_io, __pyx_k_io, sizeof(__pyx_k_io), 0, 0, 1, 1},
  {&__pyx_n_s_is_any_item_active, __pyx_k_is_any_item_active, sizeof(__pyx_k_is_any_item_active), 0, 0, 1, 1},
  {&__pyx_n_s_is_any_item_focused, __pyx_k_is_any_item_focused, sizeof(__pyx_k_is_any_item_focused), 0, 0, 1, 1},
  {&__pyx_n_s_is_any_item_hovered, __pyx_k_is_any_item_hovered, sizeof(__pyx_k_is_any_item_hovered), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_active, __pyx_k_is_item_active, sizeof(__pyx_k_is_item_active), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_clicked, __pyx_k_is_item_clicked, sizeof(__pyx_k_is_item_clicked), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_focused, __pyx_k_is_item_focused, sizeof(__pyx_k_is_item_focused), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_hovered, __pyx_k_is_item_hovered, sizeof(__pyx_k_is_item_hovered), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_visible, __pyx_k_is_item_visible, sizeof(__pyx_k_is_item_visible), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_clicked, __pyx_k_is_mouse_clicked, sizeof(__pyx_k_is_mouse_clicked), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_double_clicked, __pyx_k_is_mouse_double_clicked, sizeof(__pyx_k_is_mouse_double_clicked), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_down, __pyx_k_is_mouse_down, sizeof(__pyx_k_is_mouse_down), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_dragging, __pyx_k_is_mouse_dragging, sizeof(__pyx_k_is_mouse_dragging), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_hovering_rect, __pyx_k_is_mouse_hovering_rect, sizeof(__pyx_k_is_mouse_hovering_rect), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_released, __pyx_k_is_mouse_released, sizeof(__pyx_k_is_mouse_released), 0, 0, 1, 1},
  {&__pyx_n_s_is_rect_visible, __pyx_k_is_rect_visible, sizeof(__pyx_k_is_rect_visible), 0, 0, 1, 1},
  {&__pyx_n_s_is_window_appearing, __pyx_k_is_window_appearing, sizeof(__pyx_k_is_window_appearing), 0, 0, 1, 1},
  {&__pyx_n_s_is_window_collapsed, __pyx_k_is_window_collapsed, sizeof(__pyx_k_is_window_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_is_window_focused, __pyx_k_is_window_focused, sizeof(__pyx_k_is_window_focused), 0, 0, 1, 1},
  {&__pyx_n_s_is_window_hovered, __pyx_k_is_window_hovered, sizeof(__pyx_k_is_window_hovered), 0, 0, 1, 1},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iterator, __pyx_k_iterator, sizeof(__pyx_k_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip_longest, __pyx_k_izip_longest, sizeof(__pyx_k_izip_longest), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_label_text, __pyx_k_label_text, sizeof(__pyx_k_label_text), 0, 0, 1, 1},
  {&__pyx_n_s_listbox, __pyx_k_listbox, sizeof(__pyx_k_listbox), 0, 0, 1, 1},
  {&__pyx_n_s_listbox_footer, __pyx_k_listbox_footer, sizeof(__pyx_k_listbox_footer), 0, 0, 1, 1},
  {&__pyx_n_s_listbox_header, __pyx_k_listbox_header, sizeof(__pyx_k_listbox_header), 0, 0, 1, 1},
  {&__pyx_n_s_local_pos, __pyx_k_local_pos, sizeof(__pyx_k_local_pos), 0, 0, 1, 1},
  {&__pyx_n_s_lock_threshold, __pyx_k_lock_threshold, sizeof(__pyx_k_lock_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_lower_right_x, __pyx_k_lower_right_x, sizeof(__pyx_k_lower_right_x), 0, 0, 1, 1},
  {&__pyx_n_s_lower_right_y, __pyx_k_lower_right_y, sizeof(__pyx_k_lower_right_y), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_value, __pyx_k_max_value, sizeof(__pyx_k_max_value), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_menu_item, __pyx_k_menu_item, sizeof(__pyx_k_menu_item), 0, 0, 1, 1},
  {&__pyx_n_s_min_value, __pyx_k_min_value, sizeof(__pyx_k_min_value), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mouse_button, __pyx_k_mouse_button, sizeof(__pyx_k_mouse_button), 0, 0, 1, 1},
  {&__pyx_n_s_mouse_cursor_type, __pyx_k_mouse_cursor_type, sizeof(__pyx_k_mouse_cursor_type), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_frame, __pyx_k_new_frame, sizeof(__pyx_k_new_frame), 0, 0, 1, 1},
  {&__pyx_n_s_new_line, __pyx_k_new_line, sizeof(__pyx_k_new_line), 0, 0, 1, 1},
  {&__pyx_n_s_next_column, __pyx_k_next_column, sizeof(__pyx_k_next_column), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_num_segments, __pyx_k_num_segments, sizeof(__pyx_k_num_segments), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_n_s_offset_x, __pyx_k_offset_x, sizeof(__pyx_k_offset_x), 0, 0, 1, 1},
  {&__pyx_n_s_open_popup, __pyx_k_open_popup, sizeof(__pyx_k_open_popup), 0, 0, 1, 1},
  {&__pyx_n_s_opened, __pyx_k_opened, sizeof(__pyx_k_opened), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_overlay, __pyx_k_overlay, sizeof(__pyx_k_overlay), 0, 0, 1, 1},
  {&__pyx_n_s_overlay_text, __pyx_k_overlay_text, sizeof(__pyx_k_overlay_text), 0, 0, 1, 1},
  {&__pyx_n_s_overlay_text_b, __pyx_k_overlay_text_b, sizeof(__pyx_k_overlay_text_b), 0, 0, 1, 1},
  {&__pyx_n_s_overlay_text_ptr, __pyx_k_overlay_text_ptr, sizeof(__pyx_k_overlay_text_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_kp_s_pair_param_must_be_length_of_2, __pyx_k_pair_param_must_be_length_of_2, sizeof(__pyx_k_pair_param_must_be_length_of_2), 0, 0, 1, 0},
  {&__pyx_n_s_payload, __pyx_k_payload, sizeof(__pyx_k_payload), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pivot_x, __pyx_k_pivot_x, sizeof(__pyx_k_pivot_x), 0, 0, 1, 1},
  {&__pyx_n_s_pivot_y, __pyx_k_pivot_y, sizeof(__pyx_k_pivot_y), 0, 0, 1, 1},
  {&__pyx_n_s_plot_histogram, __pyx_k_plot_histogram, sizeof(__pyx_k_plot_histogram), 0, 0, 1, 1},
  {&__pyx_n_s_plot_lines, __pyx_k_plot_lines, sizeof(__pyx_k_plot_lines), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_pop_font, __pyx_k_pop_font, sizeof(__pyx_k_pop_font), 0, 0, 1, 1},
  {&__pyx_n_s_pop_id, __pyx_k_pop_id, sizeof(__pyx_k_pop_id), 0, 0, 1, 1},
  {&__pyx_n_s_pop_text_wrap_pos, __pyx_k_pop_text_wrap_pos, sizeof(__pyx_k_pop_text_wrap_pos), 0, 0, 1, 1},
  {&__pyx_n_s_pop_text_wrap_position, __pyx_k_pop_text_wrap_position, sizeof(__pyx_k_pop_text_wrap_position), 0, 0, 1, 1},
  {&__pyx_n_s_pos_x, __pyx_k_pos_x, sizeof(__pyx_k_pos_x), 0, 0, 1, 1},
  {&__pyx_n_s_pos_y, __pyx_k_pos_y, sizeof(__pyx_k_pos_y), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_power, __pyx_k_power, sizeof(__pyx_k_power), 0, 0, 1, 1},
  {&__pyx_n_s_progress_bar, __pyx_k_progress_bar, sizeof(__pyx_k_progress_bar), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_push_font, __pyx_k_push_font, sizeof(__pyx_k_push_font), 0, 0, 1, 1},
  {&__pyx_n_s_push_id, __pyx_k_push_id, sizeof(__pyx_k_push_id), 0, 0, 1, 1},
  {&__pyx_n_s_push_text_wrap_pos, __pyx_k_push_text_wrap_pos, sizeof(__pyx_k_push_text_wrap_pos), 0, 0, 1, 1},
  {&__pyx_n_s_push_text_wrap_position, __pyx_k_push_text_wrap_position, sizeof(__pyx_k_push_text_wrap_position), 0, 0, 1, 1},
  {&__pyx_n_s_py_colored, __pyx_k_py_colored, sizeof(__pyx_k_py_colored), 0, 0, 1, 1},
  {&__pyx_n_s_py_font, __pyx_k_py_font, sizeof(__pyx_k_py_font), 0, 0, 1, 1},
  {&__pyx_n_s_py_index_buffer_index_size, __pyx_k_py_index_buffer_index_size, sizeof(__pyx_k_py_index_buffer_index_size), 0, 0, 1, 1},
  {&__pyx_n_s_py_istyled, __pyx_k_py_istyled, sizeof(__pyx_k_py_istyled), 0, 0, 1, 1},
  {&__pyx_n_s_py_scoped, __pyx_k_py_scoped, sizeof(__pyx_k_py_scoped), 0, 0, 1, 1},
  {&__pyx_n_s_py_string, __pyx_k_py_string, sizeof(__pyx_k_py_string), 0, 0, 1, 1},
  {&__pyx_n_s_py_styled, __pyx_k_py_styled, sizeof(__pyx_k_py_styled), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_col_off, __pyx_k_py_vertex_buffer_vertex_col_off, sizeof(__pyx_k_py_vertex_buffer_vertex_col_off), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_pos_off, __pyx_k_py_vertex_buffer_vertex_pos_off, sizeof(__pyx_k_py_vertex_buffer_vertex_pos_off), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_size, __pyx_k_py_vertex_buffer_vertex_size, sizeof(__pyx_k_py_vertex_buffer_vertex_size), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_uv_offs, __pyx_k_py_vertex_buffer_vertex_uv_offs, sizeof(__pyx_k_py_vertex_buffer_vertex_uv_offs), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_kp_s_quadruple_param_must_be_length_o, __pyx_k_quadruple_param_must_be_length_o, sizeof(__pyx_k_quadruple_param_must_be_length_o), 0, 0, 1, 0},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_r_max_x, __pyx_k_r_max_x, sizeof(__pyx_k_r_max_x), 0, 0, 1, 1},
  {&__pyx_n_s_r_max_y, __pyx_k_r_max_y, sizeof(__pyx_k_r_max_y), 0, 0, 1, 1},
  {&__pyx_n_s_r_min_x, __pyx_k_r_min_x, sizeof(__pyx_k_r_min_x), 0, 0, 1, 1},
  {&__pyx_n_s_r_min_y, __pyx_k_r_min_y, sizeof(__pyx_k_r_min_y), 0, 0, 1, 1},
  {&__pyx_n_s_radio_button, __pyx_k_radio_button, sizeof(__pyx_k_radio_button), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_render, __pyx_k_render, sizeof(__pyx_k_render), 0, 0, 1, 1},
  {&__pyx_n_s_repeat, __pyx_k_repeat, sizeof(__pyx_k_repeat), 0, 0, 1, 1},
  {&__pyx_n_s_require_pointer, __pyx_k_require_pointer, sizeof(__pyx_k_require_pointer), 0, 0, 1, 1},
  {&__pyx_n_s_reset_mouse_drag_delta, __pyx_k_reset_mouse_drag_delta, sizeof(__pyx_k_reset_mouse_drag_delta), 0, 0, 1, 1},
  {&__pyx_n_s_rounding, __pyx_k_rounding, sizeof(__pyx_k_rounding), 0, 0, 1, 1},
  {&__pyx_n_s_rounding_corners_flags, __pyx_k_rounding_corners_flags, sizeof(__pyx_k_rounding_corners_flags), 0, 0, 1, 1},
  {&__pyx_kp_s_s_improperly_initialized, __pyx_k_s_improperly_initialized, sizeof(__pyx_k_s_improperly_initialized), 0, 0, 1, 0},
  {&__pyx_n_s_same_line, __pyx_k_same_line, sizeof(__pyx_k_same_line), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_scale_max, __pyx_k_scale_max, sizeof(__pyx_k_scale_max), 0, 0, 1, 1},
  {&__pyx_n_s_scale_min, __pyx_k_scale_min, sizeof(__pyx_k_scale_min), 0, 0, 1, 1},
  {&__pyx_n_s_screen_pos, __pyx_k_screen_pos, sizeof(__pyx_k_screen_pos), 0, 0, 1, 1},
  {&__pyx_n_s_scroll_x, __pyx_k_scroll_x, sizeof(__pyx_k_scroll_x), 0, 0, 1, 1},
  {&__pyx_n_s_scroll_y, __pyx_k_scroll_y, sizeof(__pyx_k_scroll_y), 0, 0, 1, 1},
  {&__pyx_n_s_selectable, __pyx_k_selectable, sizeof(__pyx_k_selectable), 0, 0, 1, 1},
  {&__pyx_n_s_selected, __pyx_k_selected, sizeof(__pyx_k_selected), 0, 0, 1, 1},
  {&__pyx_kp_s_self__ptr_cannot_be_converted_to, __pyx_k_self__ptr_cannot_be_converted_to, sizeof(__pyx_k_self__ptr_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_ranges_ptr_cannot_be_conver, __pyx_k_self_ranges_ptr_cannot_be_conver, sizeof(__pyx_k_self_ranges_ptr_cannot_be_conver), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_separator, __pyx_k_separator, sizeof(__pyx_k_separator), 0, 0, 1, 1},
  {&__pyx_n_s_set_clipboard_text_fn, __pyx_k_set_clipboard_text_fn, sizeof(__pyx_k_set_clipboard_text_fn), 0, 0, 1, 1},
  {&__pyx_n_s_set_column_offset, __pyx_k_set_column_offset, sizeof(__pyx_k_set_column_offset), 0, 0, 1, 1},
  {&__pyx_n_s_set_column_width, __pyx_k_set_column_width, sizeof(__pyx_k_set_column_width), 0, 0, 1, 1},
  {&__pyx_n_s_set_current_context, __pyx_k_set_current_context, sizeof(__pyx_k_set_current_context), 0, 0, 1, 1},
  {&__pyx_n_s_set_cursor_pos, __pyx_k_set_cursor_pos, sizeof(__pyx_k_set_cursor_pos), 0, 0, 1, 1},
  {&__pyx_n_s_set_cursor_pos_x, __pyx_k_set_cursor_pos_x, sizeof(__pyx_k_set_cursor_pos_x), 0, 0, 1, 1},
  {&__pyx_n_s_set_cursor_pos_y, __pyx_k_set_cursor_pos_y, sizeof(__pyx_k_set_cursor_pos_y), 0, 0, 1, 1},
  {&__pyx_n_s_set_cursor_position, __pyx_k_set_cursor_position, sizeof(__pyx_k_set_cursor_position), 0, 0, 1, 1},
  {&__pyx_n_s_set_cursor_screen_pos, __pyx_k_set_cursor_screen_pos, sizeof(__pyx_k_set_cursor_screen_pos), 0, 0, 1, 1},
  {&__pyx_n_s_set_cursor_screen_position, __pyx_k_set_cursor_screen_position, sizeof(__pyx_k_set_cursor_screen_position), 0, 0, 1, 1},
  {&__pyx_n_s_set_drag_drop_payload, __pyx_k_set_drag_drop_payload, sizeof(__pyx_k_set_drag_drop_payload), 0, 0, 1, 1},
  {&__pyx_n_s_set_item_allow_overlap, __pyx_k_set_item_allow_overlap, sizeof(__pyx_k_set_item_allow_overlap), 0, 0, 1, 1},
  {&__pyx_n_s_set_item_default_focus, __pyx_k_set_item_default_focus, sizeof(__pyx_k_set_item_default_focus), 0, 0, 1, 1},
  {&__pyx_n_s_set_keyboard_focus_here, __pyx_k_set_keyboard_focus_here, sizeof(__pyx_k_set_keyboard_focus_here), 0, 0, 1, 1},
  {&__pyx_n_s_set_mouse_cursor, __pyx_k_set_mouse_cursor, sizeof(__pyx_k_set_mouse_cursor), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_bg_alpha, __pyx_k_set_next_window_bg_alpha, sizeof(__pyx_k_set_next_window_bg_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_collapsed, __pyx_k_set_next_window_collapsed, sizeof(__pyx_k_set_next_window_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_content_size, __pyx_k_set_next_window_content_size, sizeof(__pyx_k_set_next_window_content_size), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_focus, __pyx_k_set_next_window_focus, sizeof(__pyx_k_set_next_window_focus), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_position, __pyx_k_set_next_window_position, sizeof(__pyx_k_set_next_window_position), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_size, __pyx_k_set_next_window_size, sizeof(__pyx_k_set_next_window_size), 0, 0, 1, 1},
  {&__pyx_n_s_set_scroll_from_pos_y, __pyx_k_set_scroll_from_pos_y, sizeof(__pyx_k_set_scroll_from_pos_y), 0, 0, 1, 1},
  {&__pyx_n_s_set_scroll_here, __pyx_k_set_scroll_here, sizeof(__pyx_k_set_scroll_here), 0, 0, 1, 1},
  {&__pyx_n_s_set_scroll_x, __pyx_k_set_scroll_x, sizeof(__pyx_k_set_scroll_x), 0, 0, 1, 1},
  {&__pyx_n_s_set_scroll_y, __pyx_k_set_scroll_y, sizeof(__pyx_k_set_scroll_y), 0, 0, 1, 1},
  {&__pyx_n_s_set_tooltip, __pyx_k_set_tooltip, sizeof(__pyx_k_set_tooltip), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_collapsed, __pyx_k_set_window_collapsed, sizeof(__pyx_k_set_window_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_collapsed_labeled, __pyx_k_set_window_collapsed_labeled, sizeof(__pyx_k_set_window_collapsed_labeled), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_focus, __pyx_k_set_window_focus, sizeof(__pyx_k_set_window_focus), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_focus_labeled, __pyx_k_set_window_focus_labeled, sizeof(__pyx_k_set_window_focus_labeled), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_font_scale, __pyx_k_set_window_font_scale, sizeof(__pyx_k_set_window_font_scale), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_position, __pyx_k_set_window_position, sizeof(__pyx_k_set_window_position), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_position_labeled, __pyx_k_set_window_position_labeled, sizeof(__pyx_k_set_window_position_labeled), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_size, __pyx_k_set_window_size, sizeof(__pyx_k_set_window_size), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_size_named, __pyx_k_set_window_size_named, sizeof(__pyx_k_set_window_size_named), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shared_font_atlas, __pyx_k_shared_font_atlas, sizeof(__pyx_k_shared_font_atlas), 0, 0, 1, 1},
  {&__pyx_n_s_shortcut, __pyx_k_shortcut, sizeof(__pyx_k_shortcut), 0, 0, 1, 1},
  {&__pyx_n_s_show_alpha, __pyx_k_show_alpha, sizeof(__pyx_k_show_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_show_demo_window, __pyx_k_show_demo_window, sizeof(__pyx_k_show_demo_window), 0, 0, 1, 1},
  {&__pyx_n_s_show_font_selector, __pyx_k_show_font_selector, sizeof(__pyx_k_show_font_selector), 0, 0, 1, 1},
  {&__pyx_n_s_show_metrics_window, __pyx_k_show_metrics_window, sizeof(__pyx_k_show_metrics_window), 0, 0, 1, 1},
  {&__pyx_n_s_show_style_editor, __pyx_k_show_style_editor, sizeof(__pyx_k_show_style_editor), 0, 0, 1, 1},
  {&__pyx_n_s_show_style_selector, __pyx_k_show_style_selector, sizeof(__pyx_k_show_style_selector), 0, 0, 1, 1},
  {&__pyx_n_s_show_test_window, __pyx_k_show_test_window, sizeof(__pyx_k_show_test_window), 0, 0, 1, 1},
  {&__pyx_n_s_show_user_guide, __pyx_k_show_user_guide, sizeof(__pyx_k_show_user_guide), 0, 0, 1, 1},
  {&__pyx_n_s_signatures, __pyx_k_signatures, sizeof(__pyx_k_signatures), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_size_height, __pyx_k_size_height, sizeof(__pyx_k_size_height), 0, 0, 1, 1},
  {&__pyx_n_s_size_pixels, __pyx_k_size_pixels, sizeof(__pyx_k_size_pixels), 0, 0, 1, 1},
  {&__pyx_n_s_size_width, __pyx_k_size_width, sizeof(__pyx_k_size_width), 0, 0, 1, 1},
  {&__pyx_n_s_slider_angle, __pyx_k_slider_angle, sizeof(__pyx_k_slider_angle), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float, __pyx_k_slider_float, sizeof(__pyx_k_slider_float), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float2, __pyx_k_slider_float2, sizeof(__pyx_k_slider_float2), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float3, __pyx_k_slider_float3, sizeof(__pyx_k_slider_float3), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float4, __pyx_k_slider_float4, sizeof(__pyx_k_slider_float4), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int, __pyx_k_slider_int, sizeof(__pyx_k_slider_int), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int2, __pyx_k_slider_int2, sizeof(__pyx_k_slider_int2), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int3, __pyx_k_slider_int3, sizeof(__pyx_k_slider_int3), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int4, __pyx_k_slider_int4, sizeof(__pyx_k_slider_int4), 0, 0, 1, 1},
  {&__pyx_n_s_small_button, __pyx_k_small_button, sizeof(__pyx_k_small_button), 0, 0, 1, 1},
  {&__pyx_n_s_spacing, __pyx_k_spacing, sizeof(__pyx_k_spacing), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_x, __pyx_k_start_x, sizeof(__pyx_k_start_x), 0, 0, 1, 1},
  {&__pyx_n_s_start_y, __pyx_k_start_y, sizeof(__pyx_k_start_y), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_step_fast, __pyx_k_step_fast, sizeof(__pyx_k_step_fast), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_str_id, __pyx_k_str_id, sizeof(__pyx_k_str_id), 0, 0, 1, 1},
  {&__pyx_n_s_stride, __pyx_k_stride, sizeof(__pyx_k_stride), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_style, __pyx_k_style, sizeof(__pyx_k_style), 0, 0, 1, 1},
  {&__pyx_n_s_style_colors_classic, __pyx_k_style_colors_classic, sizeof(__pyx_k_style_colors_classic), 0, 0, 1, 1},
  {&__pyx_n_s_style_colors_dark, __pyx_k_style_colors_dark, sizeof(__pyx_k_style_colors_dark), 0, 0, 1, 1},
  {&__pyx_n_s_style_colors_light, __pyx_k_style_colors_light, sizeof(__pyx_k_style_colors_light), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_text_colored, __pyx_k_text_colored, sizeof(__pyx_k_text_colored), 0, 0, 1, 1},
  {&__pyx_n_s_text_disabled, __pyx_k_text_disabled, sizeof(__pyx_k_text_disabled), 0, 0, 1, 1},
  {&__pyx_n_s_text_unformatted, __pyx_k_text_unformatted, sizeof(__pyx_k_text_unformatted), 0, 0, 1, 1},
  {&__pyx_n_s_text_wrapped, __pyx_k_text_wrapped, sizeof(__pyx_k_text_wrapped), 0, 0, 1, 1},
  {&__pyx_n_s_texture_id, __pyx_k_texture_id, sizeof(__pyx_k_texture_id), 0, 0, 1, 1},
  {&__pyx_n_s_thickness, __pyx_k_thickness, sizeof(__pyx_k_thickness), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tint_color, __pyx_k_tint_color, sizeof(__pyx_k_tint_color), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_n_s_tree_node, __pyx_k_tree_node, sizeof(__pyx_k_tree_node), 0, 0, 1, 1},
  {&__pyx_n_s_tree_pop, __pyx_k_tree_pop, sizeof(__pyx_k_tree_pop), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unindent, __pyx_k_unindent, sizeof(__pyx_k_unindent), 0, 0, 1, 1},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_upper_left_x, __pyx_k_upper_left_x, sizeof(__pyx_k_upper_left_x), 0, 0, 1, 1},
  {&__pyx_n_s_upper_left_y, __pyx_k_upper_left_y, sizeof(__pyx_k_upper_left_y), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_uv0, __pyx_k_uv0, sizeof(__pyx_k_uv0), 0, 0, 1, 1},
  {&__pyx_n_s_uv1, __pyx_k_uv1, sizeof(__pyx_k_uv1), 0, 0, 1, 1},
  {&__pyx_n_s_uv_a, __pyx_k_uv_a, sizeof(__pyx_k_uv_a), 0, 0, 1, 1},
  {&__pyx_n_s_uv_b, __pyx_k_uv_b, sizeof(__pyx_k_uv_b), 0, 0, 1, 1},
  {&__pyx_n_s_v_slider_float, __pyx_k_v_slider_float, sizeof(__pyx_k_v_slider_float), 0, 0, 1, 1},
  {&__pyx_n_s_v_slider_int, __pyx_k_v_slider_int, sizeof(__pyx_k_v_slider_int), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_value0, __pyx_k_value0, sizeof(__pyx_k_value0), 0, 0, 1, 1},
  {&__pyx_n_s_value1, __pyx_k_value1, sizeof(__pyx_k_value1), 0, 0, 1, 1},
  {&__pyx_n_s_value2, __pyx_k_value2, sizeof(__pyx_k_value2), 0, 0, 1, 1},
  {&__pyx_n_s_value3, __pyx_k_value3, sizeof(__pyx_k_value3), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_values_count, __pyx_k_values_count, sizeof(__pyx_k_values_count), 0, 0, 1, 1},
  {&__pyx_n_s_values_offset, __pyx_k_values_offset, sizeof(__pyx_k_values_offset), 0, 0, 1, 1},
  {&__pyx_n_s_var, __pyx_k_var, sizeof(__pyx_k_var), 0, 0, 1, 1},
  {&__pyx_n_s_variable, __pyx_k_variable, sizeof(__pyx_k_variable), 0, 0, 1, 1},
  {&__pyx_n_s_variables_and_values, __pyx_k_variables_and_values, sizeof(__pyx_k_variables_and_values), 0, 0, 1, 1},
  {&__pyx_n_s_visible, __pyx_k_visible, sizeof(__pyx_k_visible), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_wrap_pos_x, __pyx_k_wrap_pos_x, sizeof(__pyx_k_wrap_pos_x), 0, 0, 1, 1},
  {&__pyx_n_s_wrap_width, __pyx_k_wrap_width, sizeof(__pyx_k_wrap_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zip_longest, __pyx_k_zip_longest, sizeof(__pyx_k_zip_longest), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 870, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 772, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 810, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 810, __pyx_L1_error)
  #endif
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 862, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 3066, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 148, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 404, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 613, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 832, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "imgui/core.pyx":282
 * 
 * cdef str _from_bytes(bytes text):
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "imgui/core.pyx":293
 * 
 *     if len(pair) != 2:
 *         raise ValueError("pair param must be length of 2")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y = pair
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_pair_param_must_be_length_of_2); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "imgui/core.pyx":312
 * 
 *     if len(quadruple) != 4:
 *         raise ValueError("quadruple param must be length of 4")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_quadruple_param_must_be_length_o); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "imgui/core.pyx":691
 *         tuple a,
 *         tuple b,
 *         tuple uv_a=(0,0),             # <<<<<<<<<<<<<<
 *         tuple uv_b=(1,1),
 *         cimgui.ImU32 col=0xffffffff):
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "imgui/core.pyx":692
 *         tuple b,
 *         tuple uv_a=(0,0),
 *         tuple uv_b=(1,1),             # <<<<<<<<<<<<<<
 *         cimgui.ImU32 col=0xffffffff):
 *         """Add image to the draw list. Aspect ratio is not preserved.
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "imgui/core.pyx":862
 *     cdef inline _check_ptr(self):
 *         if self._ptr is NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "Improperly initialized, use imgui.get_style() or "
 *                 "GuiStyle.created() to obtain style classes"
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Improperly_initialized_use_imgui); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self_ranges_ptr_cannot_be_conver); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self_ranges_ptr_cannot_be_conver); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "imgui/core.pyx":1683
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(
 *             shape=(5,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "imgui/core.pyx":1752
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(
 *             shape=(512,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_int_512); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 1752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "imgui/core.pyx":2107
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_No_matching_signature_found); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Function_call_with_ambiguous_arg); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "imgui/core.pyx":3925
 *     """
 *     if direction == DIRECTION_NONE:
 *         raise ValueError("Direction wasn't specified.")             # <<<<<<<<<<<<<<
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_Direction_wasn_t_specified); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 3925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "imgui/core.pyx":4009
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 *     int frame_padding=-1,
 */
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_1, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 4009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "imgui/core.pyx":4010
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 *     int frame_padding=-1,
 * ):
 */
  __pyx_tuple__49 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 4010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "imgui/core.pyx":6793
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Style value must be float or two-elements list/tuple"
 *         )
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_Style_value_must_be_float_or_two); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 6793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "imgui/core.pyx":7717
 *         ctx._ptr = NULL
 *     else:
 *         raise RuntimeError("Context invalid (None or destroyed)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_Context_invalid_None_or_destroye); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 7717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__76 = PyTuple_New(1); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__76, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__79 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__79)) __PYX_ERR(1, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__79);
  __Pyx_GIVEREF(__pyx_slice__79);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "imgui/core.pyx":871
 * 
 *     @staticmethod
 *     def create():             # <<<<<<<<<<<<<<
 *         return GuiStyle._create()
 * 
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_create, 871, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 871, __pyx_L1_error)

  /* "imgui/core.pyx":1815
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_io, 1815, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 1815, __pyx_L1_error)

  /* "imgui/core.pyx":1823
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     return GuiStyle.from_ref(cimgui.GetStyle())
 * 
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_style, 1823, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 1823, __pyx_L1_error)

  /* "imgui/core.pyx":1827
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_new_frame, 1827, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 1827, __pyx_L1_error)

  /* "imgui/core.pyx":1839
 * 
 * 
 * def end_frame():             # <<<<<<<<<<<<<<
 *     """End a frame.
 * 
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_frame, 1839, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 1839, __pyx_L1_error)

  /* "imgui/core.pyx":1854
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_render, 1854, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1854, __pyx_L1_error)

  /* "imgui/core.pyx":1862
 *     cimgui.Render()
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_user_guide, 1862, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 1862, __pyx_L1_error)

  /* "imgui/core.pyx":1881
 * 
 * 
 * def get_version():             # <<<<<<<<<<<<<<
 *     """Get the version of Dear ImGui.
 * 
 */
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_n_s_c_string, __pyx_n_s_py_string); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_version, 1881, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 1881, __pyx_L1_error)

  /* "imgui/core.pyx":1892
 * 
 * 
 * def style_colors_dark(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Dark.
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_n_s_dst); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_style_colors_dark, 1892, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 1892, __pyx_L1_error)

  /* "imgui/core.pyx":1906
 * 
 * 
 * def style_colors_classic(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Classic.
 * 
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_n_s_dst); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_style_colors_classic, 1906, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 1906, __pyx_L1_error)

  /* "imgui/core.pyx":1921
 * 
 * 
 * def style_colors_light(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Light.
 * 
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_n_s_dst); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 1921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_style_colors_light, 1921, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 1921, __pyx_L1_error)

  /* "imgui/core.pyx":1935
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_n_s_style); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_style_editor, 1935, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1935, __pyx_L1_error)

  /* "imgui/core.pyx":1959
 * 
 * 
 * def show_demo_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_n_s_closable, __pyx_n_s_opened); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_demo_window, 1959, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1959, __pyx_L1_error)

  /* "imgui/core.pyx":1988
 * 
 * 
 * def show_test_window():             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_test_window, 1988, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 1988, __pyx_L1_error)

  /* "imgui/core.pyx":2005
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_n_s_closable, __pyx_n_s_opened); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_metrics_window, 2005, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 2005, __pyx_L1_error)

  /* "imgui/core.pyx":2034
 * 
 * 
 * def show_style_selector(str label):             # <<<<<<<<<<<<<<
 *     return cimgui.ShowStyleSelector(label)
 * 
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_n_s_label); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_style_selector, 2034, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 2034, __pyx_L1_error)

  /* "imgui/core.pyx":2038
 * 
 * 
 * def show_font_selector(str label):             # <<<<<<<<<<<<<<
 *     cimgui.ShowStyleSelector(label)
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_n_s_label); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_font_selector, 2038, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 2038, __pyx_L1_error)

  /* "imgui/core.pyx":2042
 * 
 * 
 * def begin(str label, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(4, __pyx_n_s_label, __pyx_n_s_closable, __pyx_n_s_flags, __pyx_n_s_opened); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin, 2042, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 2042, __pyx_L1_error)

  /* "imgui/core.pyx":2075
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_draw_data, 2075, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 2075, __pyx_L1_error)

  /* "imgui/core.pyx":2090
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end, 2090, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 2090, __pyx_L1_error)

  /* "imgui/core.pyx":2107
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */
  __pyx_tuple__113 = PyTuple_Pack(5, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_border, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_child, 2107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 2107, __pyx_L1_error)

  /* "imgui/core.pyx":2164
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_child, 2164, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 2164, __pyx_L1_error)

  /* "imgui/core.pyx":2173
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_content_region_max, 2173, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 2173, __pyx_L1_error)

  /* "imgui/core.pyx":2188
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_content_region_available, 2188, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 2188, __pyx_L1_error)

  /* "imgui/core.pyx":2205
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_content_region_available_wid, 2205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 2205, __pyx_L1_error)

  /* "imgui/core.pyx":2217
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_content_region_min, 2217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 2217, __pyx_L1_error)

  /* "imgui/core.pyx":2231
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_content_region_max, 2231, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 2231, __pyx_L1_error)

  /* "imgui/core.pyx":2245
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_content_region_width, 2245, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 2245, __pyx_L1_error)

  /* "imgui/core.pyx":2257
 * 
 * 
 * def set_window_focus():             # <<<<<<<<<<<<<<
 *     """Set window to be focused
 * 
 */
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_focus, 2257, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 2257, __pyx_L1_error)

  /* "imgui/core.pyx":2278
 *     cimgui.SetWindowFocus()
 * 
 * def set_window_focus_labeled(str label):             # <<<<<<<<<<<<<<
 *     """Set focus to the window named label
 * 
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_n_s_label); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 2278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_focus_labeled, 2278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 2278, __pyx_L1_error)

  /* "imgui/core.pyx":2309
 *     cimgui.SetWindowFocus(_bytes(label))
 * 
 * def set_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ONCE):
 *     """Set window size
 */
  __pyx_tuple__125 = PyTuple_Pack(3, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_size, 2309, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(0, 2309, __pyx_L1_error)

  /* "imgui/core.pyx":2341
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):             # <<<<<<<<<<<<<<
 *     """Set the window with label to some size
 * 
 */
  __pyx_tuple__127 = PyTuple_Pack(4, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_size_named, 2341, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(0, 2341, __pyx_L1_error)

  /* "imgui/core.pyx":2377
 *     )
 * 
 * def get_scroll_x():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxX()]
 * 
 */
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_scroll_x, 2377, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 2377, __pyx_L1_error)

  /* "imgui/core.pyx":2389
 * 
 * 
 * def get_scroll_y():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxY()]
 * 
 */
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_scroll_y, 2389, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) __PYX_ERR(0, 2389, __pyx_L1_error)

  /* "imgui/core.pyx":2401
 * 
 * 
 * def get_scroll_max_x():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_scroll_max_x, 2401, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 2401, __pyx_L1_error)

  /* "imgui/core.pyx":2413
 * 
 * 
 * def get_scroll_max_y():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_scroll_max_y, 2413, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(0, 2413, __pyx_L1_error)

  /* "imgui/core.pyx":2425
 * 
 * 
 * def set_scroll_x(float scroll_x):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxX()]
 * 
 */
  __pyx_tuple__133 = PyTuple_Pack(2, __pyx_n_s_scroll_x, __pyx_n_s_scroll_x); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_scroll_x, 2425, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(0, 2425, __pyx_L1_error)

  /* "imgui/core.pyx":2434
 * 
 * 
 * def set_scroll_y(float scroll_y):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxY()]
 * 
 */
  __pyx_tuple__135 = PyTuple_Pack(2, __pyx_n_s_scroll_y, __pyx_n_s_scroll_y); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__135, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_scroll_y, 2434, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) __PYX_ERR(0, 2434, __pyx_L1_error)

  /* "imgui/core.pyx":2443
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */
  __pyx_tuple__137 = PyTuple_Pack(2, __pyx_n_s_scale, __pyx_n_s_scale); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(0, 2443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__137, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_font_scale, 2443, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(0, 2443, __pyx_L1_error)

  /* "imgui/core.pyx":2469
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */
  __pyx_tuple__139 = PyTuple_Pack(2, __pyx_n_s_collapsed, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 2469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__139, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_collapsed, 2469, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(0, 2469, __pyx_L1_error)

  /* "imgui/core.pyx":2499
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_focus, 2499, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 2499, __pyx_L1_error)

  /* "imgui/core.pyx":2508
 * 
 * 
 * def set_next_window_bg_alpha(float alpha):             # <<<<<<<<<<<<<<
 *     """set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.
 * 
 */
  __pyx_tuple__142 = PyTuple_Pack(2, __pyx_n_s_alpha, __pyx_n_s_alpha); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 2508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_bg_alpha, 2508, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 2508, __pyx_L1_error)

  /* "imgui/core.pyx":2517
 * 
 * 
 * def get_window_draw_list():             # <<<<<<<<<<<<<<
 *     """Get the draw list associated with the window, to append your own drawing primitives
 * 
 */
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_draw_list, 2517, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(0, 2517, __pyx_L1_error)

  /* "imgui/core.pyx":2555
 * 
 * 
 * def get_overlay_draw_list():             # <<<<<<<<<<<<<<
 *     """Get a special draw list that will be drawn last (over all windows).
 * 
 */
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_overlay_draw_list, 2555, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 2555, __pyx_L1_error)

  /* "imgui/core.pyx":2569
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_position, 2569, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 2569, __pyx_L1_error)

  /* "imgui/core.pyx":2584
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_size, 2584, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 2584, __pyx_L1_error)

  /* "imgui/core.pyx":2596
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_width, 2596, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(0, 2596, __pyx_L1_error)

  /* "imgui/core.pyx":2608
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_height, 2608, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 2608, __pyx_L1_error)

  /* "imgui/core.pyx":2620
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0
 * ):
 */
  __pyx_tuple__150 = PyTuple_Pack(5, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_condition, __pyx_n_s_pivot_x, __pyx_n_s_pivot_y); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_position, 2620, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 2620, __pyx_L1_error)

  /* "imgui/core.pyx":2657
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */
  __pyx_tuple__152 = PyTuple_Pack(3, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 2657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_size, 2657, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(0, 2657, __pyx_L1_error)

  /* "imgui/core.pyx":2688
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_next_window_content_size(float width, float height):             # <<<<<<<<<<<<<<
 *     """Set content size of the next window. Show scrollbars
 *        if content doesn't fit in the window
 */
  __pyx_tuple__154 = PyTuple_Pack(2, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_content_size, 2688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(0, 2688, __pyx_L1_error)

  /* "imgui/core.pyx":2716
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the current window
 * 
 */
  __pyx_tuple__156 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_position, 2716, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(0, 2716, __pyx_L1_error)

  /* "imgui/core.pyx":2747
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the window with label
 * 
 */
  __pyx_tuple__158 = PyTuple_Pack(4, __pyx_n_s_label, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_position_labeled, 2747, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 2747, __pyx_L1_error)

  /* "imgui/core.pyx":2783
 *     )
 * 
 * def set_window_collapsed(bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the current window to be collapsed
 * 
 */
  __pyx_tuple__160 = PyTuple_Pack(2, __pyx_n_s_collapsed, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 2783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_collapsed, 2783, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(0, 2783, __pyx_L1_error)

  /* "imgui/core.pyx":2809
 *     cimgui.SetWindowCollapsed(collapsed, condition)
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set window with label to collapse
 * 
 */
  __pyx_tuple__162 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_collapsed, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 2809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_collapsed_labeled, 2809, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(0, 2809, __pyx_L1_error)

  /* "imgui/core.pyx":2836
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_window_collapsed, 2836, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 2836, __pyx_L1_error)

  /* "imgui/core.pyx":2845
 * 
 * 
 * def is_window_appearing():             # <<<<<<<<<<<<<<
 *     """Check if current window is appearing.
 * 
 */
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_window_appearing, 2845, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(0, 2845, __pyx_L1_error)

  /* "imgui/core.pyx":2855
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */
  __pyx_tuple__166 = PyTuple_Pack(2, __pyx_n_s_text, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 2855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_tree_node, 2855, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(0, 2855, __pyx_L1_error)

  /* "imgui/core.pyx":2887
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_tree_pop, 2887, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 2887, __pyx_L1_error)

  /* "imgui/core.pyx":2899
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */
  __pyx_tuple__169 = PyTuple_Pack(5, __pyx_n_s_text, __pyx_n_s_visible, __pyx_n_s_flags, __pyx_n_s_inout_opened, __pyx_n_s_clicked); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 2899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_collapsing_header, 2899, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(0, 2899, __pyx_L1_error)

  /* "imgui/core.pyx":2955
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */
  __pyx_tuple__171 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_selected, __pyx_n_s_flags, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_inout_selected); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 2955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_selectable, 2955, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(0, 2955, __pyx_L1_error)

  /* "imgui/core.pyx":3019
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */
  __pyx_tuple__173 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_current, __pyx_n_s_items, __pyx_n_s_height_in_items, __pyx_n_s_inout_current, __pyx_n_s_in_items, __pyx_n_s_index, __pyx_n_s_item, __pyx_n_s_opened, __pyx_n_s_i); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 3019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(4, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_listbox, 3019, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 3019, __pyx_L1_error)

  /* "imgui/core.pyx":3085
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */
  __pyx_tuple__175 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 3085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_listbox_header, 3085, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(0, 3085, __pyx_L1_error)

  /* "imgui/core.pyx":3130
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_listbox_footer, 3130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) __PYX_ERR(0, 3130, __pyx_L1_error)

  /* "imgui/core.pyx":3141
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */
  __pyx_tuple__178 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(0, 3141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__178, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_tooltip, 3141, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) __PYX_ERR(0, 3141, __pyx_L1_error)

  /* "imgui/core.pyx":3166
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */
  __pyx_codeobj__180 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_tooltip, 3166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__180)) __PYX_ERR(0, 3166, __pyx_L1_error)

  /* "imgui/core.pyx":3192
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_tooltip, 3192, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) __PYX_ERR(0, 3192, __pyx_L1_error)

  /* "imgui/core.pyx":3203
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */
  __pyx_codeobj__182 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_main_menu_bar, 3203, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__182)) __PYX_ERR(0, 3203, __pyx_L1_error)

  /* "imgui/core.pyx":3238
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_main_menu_bar, 3238, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(0, 3238, __pyx_L1_error)

  /* "imgui/core.pyx":3252
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */
  __pyx_codeobj__184 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_menu_bar, 3252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__184)) __PYX_ERR(0, 3252, __pyx_L1_error)

  /* "imgui/core.pyx":3289
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_menu_bar, 3289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) __PYX_ERR(0, 3289, __pyx_L1_error)

  /* "imgui/core.pyx":3303
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */
  __pyx_tuple__186 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 3303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_menu, 3303, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) __PYX_ERR(0, 3303, __pyx_L1_error)

  /* "imgui/core.pyx":3327
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */
  __pyx_codeobj__188 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_menu, 3327, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__188)) __PYX_ERR(0, 3327, __pyx_L1_error)

  /* "imgui/core.pyx":3341
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */
  __pyx_tuple__189 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_shortcut, __pyx_n_s_selected, __pyx_n_s_enabled, __pyx_n_s_inout_selected, __pyx_n_s_clicked); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 3341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_codeobj__190 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__189, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_menu_item, 3341, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__190)) __PYX_ERR(0, 3341, __pyx_L1_error)

  /* "imgui/core.pyx":3394
 * 
 * 
 * def open_popup(str label):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_tuple__191 = PyTuple_Pack(1, __pyx_n_s_label); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 3394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__191, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_open_popup, 3394, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 3394, __pyx_L1_error)

  /* "imgui/core.pyx":3431
 * 
 * 
 * def begin_popup(str label, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_tuple__193 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(0, 3431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__193, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup, 3431, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(0, 3431, __pyx_L1_error)

  /* "imgui/core.pyx":3476
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */
  __pyx_tuple__195 = PyTuple_Pack(4, __pyx_n_s_title, __pyx_n_s_visible, __pyx_n_s_flags, __pyx_n_s_inout_visible); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 3476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup_modal, 3476, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(0, 3476, __pyx_L1_error)

  /* "imgui/core.pyx":3532
 * 
 * 
 * def begin_popup_context_item(str label = None, int mouse_button = 1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */
  __pyx_tuple__197 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_mouse_button); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 3532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);
  __pyx_codeobj__198 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__197, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup_context_item, 3532, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__198)) __PYX_ERR(0, 3532, __pyx_L1_error)

  /* "imgui/core.pyx":3571
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */
  __pyx_tuple__199 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_also_over_items, __pyx_n_s_mouse_button); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(0, 3571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);
  __pyx_codeobj__200 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__199, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup_context_window, 3571, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__200)) __PYX_ERR(0, 3571, __pyx_L1_error)

  /* "imgui/core.pyx":3625
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */
  __pyx_codeobj__201 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_popup, 3625, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__201)) __PYX_ERR(0, 3625, __pyx_L1_error)

  /* "imgui/core.pyx":3639
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */
  __pyx_codeobj__202 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_close_current_popup, 3639, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__202)) __PYX_ERR(0, 3639, __pyx_L1_error)

  /* "imgui/core.pyx":3653
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */
  __pyx_tuple__203 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(0, 3653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);
  __pyx_codeobj__204 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__203, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text, 3653, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__204)) __PYX_ERR(0, 3653, __pyx_L1_error)

  /* "imgui/core.pyx":3675
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */
  __pyx_tuple__205 = PyTuple_Pack(5, __pyx_n_s_text, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(0, 3675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);
  __pyx_codeobj__206 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__205, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text_colored, 3675, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__206)) __PYX_ERR(0, 3675, __pyx_L1_error)

  /* "imgui/core.pyx":3710
 * 
 * 
 * def text_disabled(str text):             # <<<<<<<<<<<<<<
 *     """Add disabled(grayed out) text to current widget stack.
 * 
 */
  __pyx_tuple__207 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(0, 3710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);
  __pyx_codeobj__208 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__207, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text_disabled, 3710, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__208)) __PYX_ERR(0, 3710, __pyx_L1_error)

  /* "imgui/core.pyx":3731
 *     cimgui.TextDisabled("%s", _bytes(text))
 * 
 * def text_wrapped(str text):             # <<<<<<<<<<<<<<
 *     """Add wrappable text to current widget stack.
 * 
 */
  __pyx_tuple__209 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__209)) __PYX_ERR(0, 3731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);
  __pyx_codeobj__210 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__209, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text_wrapped, 3731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__210)) __PYX_ERR(0, 3731, __pyx_L1_error)

  /* "imgui/core.pyx":3755
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */
  __pyx_tuple__211 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_text); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(0, 3755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);
  __pyx_codeobj__212 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__211, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_label_text, 3755, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__212)) __PYX_ERR(0, 3755, __pyx_L1_error)

  /* "imgui/core.pyx":3778
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */
  __pyx_tuple__213 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__213)) __PYX_ERR(0, 3778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);
  __pyx_codeobj__214 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__213, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text_unformatted, 3778, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__214)) __PYX_ERR(0, 3778, __pyx_L1_error)

  /* "imgui/core.pyx":3801
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */
  __pyx_codeobj__215 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_bullet, 3801, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__215)) __PYX_ERR(0, 3801, __pyx_L1_error)

  /* "imgui/core.pyx":3824
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */
  __pyx_tuple__216 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__216)) __PYX_ERR(0, 3824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);
  __pyx_codeobj__217 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__216, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_bullet_text, 3824, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__217)) __PYX_ERR(0, 3824, __pyx_L1_error)

  /* "imgui/core.pyx":3854
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */
  __pyx_tuple__218 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__218)) __PYX_ERR(0, 3854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);
  __pyx_codeobj__219 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__218, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_button, 3854, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__219)) __PYX_ERR(0, 3854, __pyx_L1_error)

  /* "imgui/core.pyx":3880
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */
  __pyx_tuple__220 = PyTuple_Pack(1, __pyx_n_s_label); if (unlikely(!__pyx_tuple__220)) __PYX_ERR(0, 3880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);
  __pyx_codeobj__221 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__220, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_small_button, 3880, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__221)) __PYX_ERR(0, 3880, __pyx_L1_error)

  /* "imgui/core.pyx":3903
 *     return cimgui.SmallButton(_bytes(label))
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):             # <<<<<<<<<<<<<<
 *     """Display an arrow button
 * 
 */
  __pyx_tuple__222 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_direction); if (unlikely(!__pyx_tuple__222)) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__222);
  __Pyx_GIVEREF(__pyx_tuple__222);
  __pyx_codeobj__223 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__222, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_arrow_button, 3903, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__223)) __PYX_ERR(0, 3903, __pyx_L1_error)

  /* "imgui/core.pyx":3928
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */
  __pyx_tuple__224 = PyTuple_Pack(3, __pyx_n_s_identifier, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__224)) __PYX_ERR(0, 3928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__224);
  __Pyx_GIVEREF(__pyx_tuple__224);
  __pyx_codeobj__225 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__224, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_invisible_button, 3928, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__225)) __PYX_ERR(0, 3928, __pyx_L1_error)

  /* "imgui/core.pyx":3959
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         str desc_id,
 *         float r, float g, float b, a=1.,
 */
  __pyx_tuple__226 = PyTuple_Pack(8, __pyx_n_s_desc_id, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_flags, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__226)) __PYX_ERR(0, 3959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  __pyx_codeobj__227 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__226, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_color_button, 3959, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__227)) __PYX_ERR(0, 3959, __pyx_L1_error)

  /* "imgui/core.pyx":4003
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_tuple__228 = PyTuple_Pack(8, __pyx_n_s_texture_id, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_uv0, __pyx_n_s_uv1, __pyx_n_s_tint_color, __pyx_n_s_border_color, __pyx_n_s_frame_padding); if (unlikely(!__pyx_tuple__228)) __PYX_ERR(0, 4003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);
  __pyx_codeobj__229 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__228, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_image_button, 4003, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__229)) __PYX_ERR(0, 4003, __pyx_L1_error)

  /* "imgui/core.pyx":4056
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_tuple__230 = PyTuple_Pack(7, __pyx_n_s_texture_id, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_uv0, __pyx_n_s_uv1, __pyx_n_s_tint_color, __pyx_n_s_border_color); if (unlikely(!__pyx_tuple__230)) __PYX_ERR(0, 4056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);
  __pyx_codeobj__231 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__230, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_image, 4056, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__231)) __PYX_ERR(0, 4056, __pyx_L1_error)

  /* "imgui/core.pyx":4109
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */
  __pyx_tuple__232 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_state, __pyx_n_s_inout_state); if (unlikely(!__pyx_tuple__232)) __PYX_ERR(0, 4109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);
  __pyx_codeobj__233 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__232, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_checkbox, 4109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__233)) __PYX_ERR(0, 4109, __pyx_L1_error)

  /* "imgui/core.pyx":4154
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */
  __pyx_tuple__234 = PyTuple_Pack(4, __pyx_n_s_label, __pyx_n_s_flags, __pyx_n_s_flags_value, __pyx_n_s_inout_flags); if (unlikely(!__pyx_tuple__234)) __PYX_ERR(0, 4154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__234);
  __Pyx_GIVEREF(__pyx_tuple__234);
  __pyx_codeobj__235 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__234, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_checkbox_flags, 4154, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__235)) __PYX_ERR(0, 4154, __pyx_L1_error)

  /* "imgui/core.pyx":4211
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */
  __pyx_tuple__236 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_active); if (unlikely(!__pyx_tuple__236)) __PYX_ERR(0, 4211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__236);
  __Pyx_GIVEREF(__pyx_tuple__236);
  __pyx_codeobj__237 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__236, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_radio_button, 4211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__237)) __PYX_ERR(0, 4211, __pyx_L1_error)

  /* "imgui/core.pyx":4242
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */
  __pyx_tuple__238 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_current, __pyx_n_s_items, __pyx_n_s_height_in_items, __pyx_n_s_inout_current, __pyx_n_s_in_items); if (unlikely(!__pyx_tuple__238)) __PYX_ERR(0, 4242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  __pyx_codeobj__239 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__238, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_combo, 4242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__239)) __PYX_ERR(0, 4242, __pyx_L1_error)

  /* "imgui/core.pyx":4287
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */
  __pyx_tuple__240 = PyTuple_Pack(5, __pyx_n_s_label, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_inout_color); if (unlikely(!__pyx_tuple__240)) __PYX_ERR(0, 4287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__240);
  __Pyx_GIVEREF(__pyx_tuple__240);
  __pyx_codeobj__241 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__240, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_color_edit3, 4287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__241)) __PYX_ERR(0, 4287, __pyx_L1_error)

  /* "imgui/core.pyx":4330
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */
  __pyx_tuple__242 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_show_alpha, __pyx_n_s_inout_color); if (unlikely(!__pyx_tuple__242)) __PYX_ERR(0, 4330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__242);
  __Pyx_GIVEREF(__pyx_tuple__242);
  __pyx_codeobj__243 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__242, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_color_edit4, 4330, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__243)) __PYX_ERR(0, 4330, __pyx_L1_error)

  /* "imgui/core.pyx":4377
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__244 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__244)) __PYX_ERR(0, 4377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__244);
  __Pyx_GIVEREF(__pyx_tuple__244);
  __pyx_codeobj__245 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__244, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float, 4377, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__245)) __PYX_ERR(0, 4377, __pyx_L1_error)

  /* "imgui/core.pyx":4443
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__246 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__246)) __PYX_ERR(0, 4443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__246);
  __Pyx_GIVEREF(__pyx_tuple__246);
  __pyx_codeobj__247 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__246, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float2, 4443, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__247)) __PYX_ERR(0, 4443, __pyx_L1_error)

  /* "imgui/core.pyx":4502
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__248 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__248)) __PYX_ERR(0, 4502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__248);
  __Pyx_GIVEREF(__pyx_tuple__248);
  __pyx_codeobj__249 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__248, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float3, 4502, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__249)) __PYX_ERR(0, 4502, __pyx_L1_error)

  /* "imgui/core.pyx":4561
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__250 = PyTuple_Pack(11, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__250)) __PYX_ERR(0, 4561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__250);
  __Pyx_GIVEREF(__pyx_tuple__250);
  __pyx_codeobj__251 = (PyObject*)__Pyx_PyCode_New(10, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__250, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float4, 4561, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__251)) __PYX_ERR(0, 4561, __pyx_L1_error)

  /* "imgui/core.pyx":4620
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__252 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__252)) __PYX_ERR(0, 4620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__252);
  __Pyx_GIVEREF(__pyx_tuple__252);
  __pyx_codeobj__253 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__252, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int, 4620, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__253)) __PYX_ERR(0, 4620, __pyx_L1_error)

  /* "imgui/core.pyx":4678
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__254 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__254)) __PYX_ERR(0, 4678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__254);
  __Pyx_GIVEREF(__pyx_tuple__254);
  __pyx_codeobj__255 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__254, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int2, 4678, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__255)) __PYX_ERR(0, 4678, __pyx_L1_error)

  /* "imgui/core.pyx":4731
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__256 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__256)) __PYX_ERR(0, 4731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__256);
  __Pyx_GIVEREF(__pyx_tuple__256);
  __pyx_codeobj__257 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__256, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int3, 4731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__257)) __PYX_ERR(0, 4731, __pyx_L1_error)

  /* "imgui/core.pyx":4784
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__258 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_change_speed, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__258)) __PYX_ERR(0, 4784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__258);
  __Pyx_GIVEREF(__pyx_tuple__258);
  __pyx_codeobj__259 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__258, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int4, 4784, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__259)) __PYX_ERR(0, 4784, __pyx_L1_error)

  /* "imgui/core.pyx":4837
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_tuple__260 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_buffer_length, __pyx_n_s_flags, __pyx_n_s_inout_text, __pyx_n_s_changed, __pyx_n_s_output); if (unlikely(!__pyx_tuple__260)) __PYX_ERR(0, 4837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__260);
  __Pyx_GIVEREF(__pyx_tuple__260);
  __pyx_codeobj__261 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__260, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_text, 4837, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__261)) __PYX_ERR(0, 4837, __pyx_L1_error)

  /* "imgui/core.pyx":4899
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_tuple__262 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_buffer_length, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_flags, __pyx_n_s_inout_text, __pyx_n_s_changed, __pyx_n_s_output); if (unlikely(!__pyx_tuple__262)) __PYX_ERR(0, 4899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  __pyx_codeobj__263 = (PyObject*)__Pyx_PyCode_New(6, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__262, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_text_multiline, 4899, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__263)) __PYX_ERR(0, 4899, __pyx_L1_error)

  /* "imgui/core.pyx":4967
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_tuple__264 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_step, __pyx_n_s_step_fast, __pyx_n_s_format, __pyx_n_s_flags, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__264)) __PYX_ERR(0, 4967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__264);
  __Pyx_GIVEREF(__pyx_tuple__264);
  __pyx_codeobj__265 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__264, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float, 4967, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__265)) __PYX_ERR(0, 4967, __pyx_L1_error)

  /* "imgui/core.pyx":5019
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_tuple__266 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_format, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__266)) __PYX_ERR(0, 5019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__266);
  __Pyx_GIVEREF(__pyx_tuple__266);
  __pyx_codeobj__267 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__266, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float2, 5019, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__267)) __PYX_ERR(0, 5019, __pyx_L1_error)

  /* "imgui/core.pyx":5065
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_tuple__268 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_format, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__268)) __PYX_ERR(0, 5065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__268);
  __Pyx_GIVEREF(__pyx_tuple__268);
  __pyx_codeobj__269 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__268, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float3, 5065, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__269)) __PYX_ERR(0, 5065, __pyx_L1_error)

  /* "imgui/core.pyx":5111
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_tuple__270 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_format, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__270)) __PYX_ERR(0, 5111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__270);
  __Pyx_GIVEREF(__pyx_tuple__270);
  __pyx_codeobj__271 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__270, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float4, 5111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__271)) __PYX_ERR(0, 5111, __pyx_L1_error)

  /* "imgui/core.pyx":5157
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_tuple__272 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_step, __pyx_n_s_step_fast, __pyx_n_s_flags, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__272)) __PYX_ERR(0, 5157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__272);
  __Pyx_GIVEREF(__pyx_tuple__272);
  __pyx_codeobj__273 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__272, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int, 5157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__273)) __PYX_ERR(0, 5157, __pyx_L1_error)

  /* "imgui/core.pyx":5205
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_tuple__274 = PyTuple_Pack(5, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__274)) __PYX_ERR(0, 5205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__274);
  __Pyx_GIVEREF(__pyx_tuple__274);
  __pyx_codeobj__275 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__274, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int2, 5205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__275)) __PYX_ERR(0, 5205, __pyx_L1_error)

  /* "imgui/core.pyx":5247
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_tuple__276 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__276)) __PYX_ERR(0, 5247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__276);
  __Pyx_GIVEREF(__pyx_tuple__276);
  __pyx_codeobj__277 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__276, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int3, 5247, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__277)) __PYX_ERR(0, 5247, __pyx_L1_error)

  /* "imgui/core.pyx":5289
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_tuple__278 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__278)) __PYX_ERR(0, 5289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__278);
  __Pyx_GIVEREF(__pyx_tuple__278);
  __pyx_codeobj__279 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__278, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int4, 5289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__279)) __PYX_ERR(0, 5289, __pyx_L1_error)

  /* "imgui/core.pyx":5331
 * 
 * 
 * def input_double(             # <<<<<<<<<<<<<<
 *     str label,
 *     double value,
 */
  __pyx_tuple__280 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_step, __pyx_n_s_step_fast, __pyx_n_s_format, __pyx_n_s_flags, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__280)) __PYX_ERR(0, 5331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__280);
  __Pyx_GIVEREF(__pyx_tuple__280);
  __pyx_codeobj__281 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__280, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_double, 5331, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__281)) __PYX_ERR(0, 5331, __pyx_L1_error)

  /* "imgui/core.pyx":5382
 * 
 * 
 * def slider_angle(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_tuple__282 = PyTuple_Pack(5, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__282)) __PYX_ERR(0, 5382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__282);
  __Pyx_GIVEREF(__pyx_tuple__282);
  __pyx_codeobj__283 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__282, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_angle, 5382, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__283)) __PYX_ERR(0, 5382, __pyx_L1_error)

  /* "imgui/core.pyx":5431
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_tuple__284 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__284)) __PYX_ERR(0, 5431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__284);
  __Pyx_GIVEREF(__pyx_tuple__284);
  __pyx_codeobj__285 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__284, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float, 5431, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__285)) __PYX_ERR(0, 5431, __pyx_L1_error)

  /* "imgui/core.pyx":5490
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_tuple__286 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__286)) __PYX_ERR(0, 5490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__286);
  __Pyx_GIVEREF(__pyx_tuple__286);
  __pyx_codeobj__287 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__286, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float2, 5490, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__287)) __PYX_ERR(0, 5490, __pyx_L1_error)

  /* "imgui/core.pyx":5548
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_tuple__288 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__288)) __PYX_ERR(0, 5548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__288);
  __Pyx_GIVEREF(__pyx_tuple__288);
  __pyx_codeobj__289 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__288, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float3, 5548, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__289)) __PYX_ERR(0, 5548, __pyx_L1_error)

  /* "imgui/core.pyx":5607
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_tuple__290 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__290)) __PYX_ERR(0, 5607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__290);
  __Pyx_GIVEREF(__pyx_tuple__290);
  __pyx_codeobj__291 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__290, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float4, 5607, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__291)) __PYX_ERR(0, 5607, __pyx_L1_error)

  /* "imgui/core.pyx":5666
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_tuple__292 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__292)) __PYX_ERR(0, 5666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__292);
  __Pyx_GIVEREF(__pyx_tuple__292);
  __pyx_codeobj__293 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__292, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int, 5666, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__293)) __PYX_ERR(0, 5666, __pyx_L1_error)

  /* "imgui/core.pyx":5720
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_tuple__294 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__294)) __PYX_ERR(0, 5720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__294);
  __Pyx_GIVEREF(__pyx_tuple__294);
  __pyx_codeobj__295 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__294, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int2, 5720, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__295)) __PYX_ERR(0, 5720, __pyx_L1_error)

  /* "imgui/core.pyx":5774
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_tuple__296 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__296)) __PYX_ERR(0, 5774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__296);
  __Pyx_GIVEREF(__pyx_tuple__296);
  __pyx_codeobj__297 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__296, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int3, 5774, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__297)) __PYX_ERR(0, 5774, __pyx_L1_error)

  /* "imgui/core.pyx":5828
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_tuple__298 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__298)) __PYX_ERR(0, 5828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__298);
  __Pyx_GIVEREF(__pyx_tuple__298);
  __pyx_codeobj__299 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__298, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int4, 5828, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__299)) __PYX_ERR(0, 5828, __pyx_L1_error)

  /* "imgui/core.pyx":5881
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_tuple__300 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_power, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__300)) __PYX_ERR(0, 5881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__300);
  __Pyx_GIVEREF(__pyx_tuple__300);
  __pyx_codeobj__301 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__300, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_v_slider_float, 5881, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__301)) __PYX_ERR(0, 5881, __pyx_L1_error)

  /* "imgui/core.pyx":5946
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_tuple__302 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_format, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__302)) __PYX_ERR(0, 5946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__302);
  __Pyx_GIVEREF(__pyx_tuple__302);
  __pyx_codeobj__303 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__302, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_v_slider_int, 5946, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__303)) __PYX_ERR(0, 5946, __pyx_L1_error)

  /* "imgui/core.pyx":6007
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */
  __pyx_tuple__304 = PyTuple_Pack(11, __pyx_n_s_label, __pyx_n_s_values, __pyx_n_s_values_count, __pyx_n_s_values_offset, __pyx_n_s_overlay_text, __pyx_n_s_scale_min, __pyx_n_s_scale_max, __pyx_n_s_graph_size, __pyx_n_s_stride, __pyx_n_s_overlay_text_ptr, __pyx_n_s_overlay_text_b); if (unlikely(!__pyx_tuple__304)) __PYX_ERR(0, 6007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__304);
  __Pyx_GIVEREF(__pyx_tuple__304);
  __pyx_codeobj__305 = (PyObject*)__Pyx_PyCode_New(9, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__304, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_plot_lines, 6007, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__305)) __PYX_ERR(0, 6007, __pyx_L1_error)

  /* "imgui/core.pyx":6099
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */
  __pyx_tuple__306 = PyTuple_Pack(11, __pyx_n_s_label, __pyx_n_s_values, __pyx_n_s_values_count, __pyx_n_s_values_offset, __pyx_n_s_overlay_text, __pyx_n_s_scale_min, __pyx_n_s_scale_max, __pyx_n_s_graph_size, __pyx_n_s_stride, __pyx_n_s_overlay_text_ptr, __pyx_n_s_overlay_text_b); if (unlikely(!__pyx_tuple__306)) __PYX_ERR(0, 6099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__306);
  __Pyx_GIVEREF(__pyx_tuple__306);
  __pyx_codeobj__307 = (PyObject*)__Pyx_PyCode_New(9, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__306, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_plot_histogram, 6099, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__307)) __PYX_ERR(0, 6099, __pyx_L1_error)

  /* "imgui/core.pyx":6191
 *     )
 * 
 * def progress_bar(float fraction, size = (0,0), str overlay = ""):             # <<<<<<<<<<<<<<
 *     """ Show a progress bar
 * 
 */
  __pyx_tuple__308 = PyTuple_Pack(3, __pyx_n_s_fraction, __pyx_n_s_size, __pyx_n_s_overlay); if (unlikely(!__pyx_tuple__308)) __PYX_ERR(0, 6191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__308);
  __Pyx_GIVEREF(__pyx_tuple__308);
  __pyx_codeobj__309 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__308, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_progress_bar, 6191, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__309)) __PYX_ERR(0, 6191, __pyx_L1_error)

  /* "imgui/core.pyx":6219
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))
 * 
 * def set_item_default_focus():             # <<<<<<<<<<<<<<
 *     """Make last item the default focused item of a window.
 *     Please use instead of "if (is_window_appearing()) set_scroll_here()" to signify "default item".
 */
  __pyx_codeobj__310 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_item_default_focus, 6219, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__310)) __PYX_ERR(0, 6219, __pyx_L1_error)

  /* "imgui/core.pyx":6229
 * 
 * 
 * def set_keyboard_focus_here(int offset = 0):             # <<<<<<<<<<<<<<
 *     """Focus keyboard on the next widget.
 *     Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
 */
  __pyx_tuple__311 = PyTuple_Pack(1, __pyx_n_s_offset); if (unlikely(!__pyx_tuple__311)) __PYX_ERR(0, 6229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__311);
  __Pyx_GIVEREF(__pyx_tuple__311);
  __pyx_codeobj__312 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__311, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_keyboard_focus_here, 6229, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__312)) __PYX_ERR(0, 6229, __pyx_L1_error)

  /* "imgui/core.pyx":6239
 * 
 * 
 * def is_item_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */
  __pyx_tuple__313 = PyTuple_Pack(1, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__313)) __PYX_ERR(0, 6239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__313);
  __Pyx_GIVEREF(__pyx_tuple__313);
  __pyx_codeobj__314 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__313, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_hovered, 6239, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__314)) __PYX_ERR(0, 6239, __pyx_L1_error)

  /* "imgui/core.pyx":6253
 * 
 * 
 * def is_item_focused():             # <<<<<<<<<<<<<<
 *     """Check if the last item is focused
 * 
 */
  __pyx_codeobj__315 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_focused, 6253, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__315)) __PYX_ERR(0, 6253, __pyx_L1_error)

  /* "imgui/core.pyx":6265
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */
  __pyx_codeobj__316 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_active, 6265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__316)) __PYX_ERR(0, 6265, __pyx_L1_error)

  /* "imgui/core.pyx":6278
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */
  __pyx_tuple__317 = PyTuple_Pack(1, __pyx_n_s_mouse_button); if (unlikely(!__pyx_tuple__317)) __PYX_ERR(0, 6278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__317);
  __Pyx_GIVEREF(__pyx_tuple__317);
  __pyx_codeobj__318 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__317, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_clicked, 6278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__318)) __PYX_ERR(0, 6278, __pyx_L1_error)

  /* "imgui/core.pyx":6291
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */
  __pyx_codeobj__319 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_visible, 6291, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__319)) __PYX_ERR(0, 6291, __pyx_L1_error)

  /* "imgui/core.pyx":6304
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */
  __pyx_codeobj__320 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_any_item_hovered, 6304, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__320)) __PYX_ERR(0, 6304, __pyx_L1_error)

  /* "imgui/core.pyx":6316
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */
  __pyx_codeobj__321 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_any_item_active, 6316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__321)) __PYX_ERR(0, 6316, __pyx_L1_error)

  /* "imgui/core.pyx":6328
 * 
 * 
 * def is_any_item_focused():             # <<<<<<<<<<<<<<
 *     """Is any of the items focused.
 * 
 */
  __pyx_codeobj__322 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_any_item_focused, 6328, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__322)) __PYX_ERR(0, 6328, __pyx_L1_error)

  /* "imgui/core.pyx":6340
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_codeobj__323 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_item_rect_min, 6340, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__323)) __PYX_ERR(0, 6340, __pyx_L1_error)

  /* "imgui/core.pyx":6352
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_codeobj__324 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_item_rect_max, 6352, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__324)) __PYX_ERR(0, 6352, __pyx_L1_error)

  /* "imgui/core.pyx":6364
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_codeobj__325 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_item_rect_size, 6364, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__325)) __PYX_ERR(0, 6364, __pyx_L1_error)

  /* "imgui/core.pyx":6376
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */
  __pyx_codeobj__326 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_item_allow_overlap, 6376, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__326)) __PYX_ERR(0, 6376, __pyx_L1_error)

  /* "imgui/core.pyx":6387
 * 
 * 
 * def is_window_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */
  __pyx_tuple__327 = PyTuple_Pack(1, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__327)) __PYX_ERR(0, 6387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__327);
  __Pyx_GIVEREF(__pyx_tuple__327);
  __pyx_codeobj__328 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__327, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_window_hovered, 6387, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__328)) __PYX_ERR(0, 6387, __pyx_L1_error)

  /* "imgui/core.pyx":6402
 * 
 * 
 * def is_window_focused(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */
  __pyx_tuple__329 = PyTuple_Pack(1, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__329)) __PYX_ERR(0, 6402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__329);
  __Pyx_GIVEREF(__pyx_tuple__329);
  __pyx_codeobj__330 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__329, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_window_focused, 6402, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__330)) __PYX_ERR(0, 6402, __pyx_L1_error)

  /* "imgui/core.pyx":6416
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */
  __pyx_tuple__331 = PyTuple_Pack(2, __pyx_n_s_size_width, __pyx_n_s_size_height); if (unlikely(!__pyx_tuple__331)) __PYX_ERR(0, 6416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__331);
  __Pyx_GIVEREF(__pyx_tuple__331);
  __pyx_codeobj__332 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__331, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_rect_visible, 6416, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__332)) __PYX_ERR(0, 6416, __pyx_L1_error)

  /* "imgui/core.pyx":6433
 * 
 * 
 * def get_style_color_name(int index):             # <<<<<<<<<<<<<<
 *     """Get the style color name for a given ImGuiCol index.
 * 
 */
  __pyx_tuple__333 = PyTuple_Pack(4, __pyx_n_s_index, __pyx_n_s_index, __pyx_n_s_c_string, __pyx_n_s_py_string); if (unlikely(!__pyx_tuple__333)) __PYX_ERR(0, 6433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__333);
  __Pyx_GIVEREF(__pyx_tuple__333);
  __pyx_codeobj__334 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__333, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_style_color_name, 6433, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__334)) __PYX_ERR(0, 6433, __pyx_L1_error)

  /* "imgui/core.pyx":6444
 * 
 * 
 * def get_time():             # <<<<<<<<<<<<<<
 *     """Seconds since program start.
 * 
 */
  __pyx_codeobj__335 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_time, 6444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__335)) __PYX_ERR(0, 6444, __pyx_L1_error)

  /* "imgui/core.pyx":6456
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */
  __pyx_tuple__336 = PyTuple_Pack(5, __pyx_n_s_r_min_x, __pyx_n_s_r_min_y, __pyx_n_s_r_max_x, __pyx_n_s_r_max_y, __pyx_n_s_clip); if (unlikely(!__pyx_tuple__336)) __PYX_ERR(0, 6456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__336);
  __Pyx_GIVEREF(__pyx_tuple__336);
  __pyx_codeobj__337 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__336, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_hovering_rect, 6456, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__337)) __PYX_ERR(0, 6456, __pyx_L1_error)

  /* "imgui/core.pyx":6484
 * 
 * 
 * def is_mouse_double_clicked(int button = 0):             # <<<<<<<<<<<<<<
 *     """Return True if mouse was double-clicked.
 * 
 */
  __pyx_tuple__338 = PyTuple_Pack(1, __pyx_n_s_button); if (unlikely(!__pyx_tuple__338)) __PYX_ERR(0, 6484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__338);
  __Pyx_GIVEREF(__pyx_tuple__338);
  __pyx_codeobj__339 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__338, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_double_clicked, 6484, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__339)) __PYX_ERR(0, 6484, __pyx_L1_error)

  /* "imgui/core.pyx":6501
 * 
 * 
 * def is_mouse_clicked(int button = 0, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was clicked this frame.
 * 
 */
  __pyx_tuple__340 = PyTuple_Pack(2, __pyx_n_s_button, __pyx_n_s_repeat); if (unlikely(!__pyx_tuple__340)) __PYX_ERR(0, 6501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__340);
  __Pyx_GIVEREF(__pyx_tuple__340);
  __pyx_codeobj__341 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__340, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_clicked, 6501, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__341)) __PYX_ERR(0, 6501, __pyx_L1_error)

  /* "imgui/core.pyx":6517
 * 
 * 
 * def is_mouse_released(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was released this frame.
 * 
 */
  __pyx_tuple__342 = PyTuple_Pack(1, __pyx_n_s_button); if (unlikely(!__pyx_tuple__342)) __PYX_ERR(0, 6517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__342);
  __Pyx_GIVEREF(__pyx_tuple__342);
  __pyx_codeobj__343 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__342, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_released, 6517, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__343)) __PYX_ERR(0, 6517, __pyx_L1_error)

  /* "imgui/core.pyx":6532
 * 
 * 
 * def is_mouse_down(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse is down.
 * 
 */
  __pyx_tuple__344 = PyTuple_Pack(1, __pyx_n_s_button); if (unlikely(!__pyx_tuple__344)) __PYX_ERR(0, 6532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__344);
  __Pyx_GIVEREF(__pyx_tuple__344);
  __pyx_codeobj__345 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__344, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_down, 6532, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__345)) __PYX_ERR(0, 6532, __pyx_L1_error)

  /* "imgui/core.pyx":6547
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */
  __pyx_tuple__346 = PyTuple_Pack(2, __pyx_n_s_button, __pyx_n_s_lock_threshold); if (unlikely(!__pyx_tuple__346)) __PYX_ERR(0, 6547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__346);
  __Pyx_GIVEREF(__pyx_tuple__346);
  __pyx_codeobj__347 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__346, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_dragging, 6547, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__347)) __PYX_ERR(0, 6547, __pyx_L1_error)

  /* "imgui/core.pyx":6564
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */
  __pyx_tuple__348 = PyTuple_Pack(2, __pyx_n_s_button, __pyx_n_s_lock_threshold); if (unlikely(!__pyx_tuple__348)) __PYX_ERR(0, 6564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__348);
  __Pyx_GIVEREF(__pyx_tuple__348);
  __pyx_codeobj__349 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__348, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_mouse_drag_delta, 6564, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__349)) __PYX_ERR(0, 6564, __pyx_L1_error)

  /* "imgui/core.pyx":6583
 * 
 * 
 * def get_mouse_pos():             # <<<<<<<<<<<<<<
 *     """Current mouse position.
 * 
 */
  __pyx_codeobj__350 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_mouse_pos, 6583, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__350)) __PYX_ERR(0, 6583, __pyx_L1_error)

  /* "imgui/core.pyx":6599
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */
  __pyx_tuple__351 = PyTuple_Pack(1, __pyx_n_s_button); if (unlikely(!__pyx_tuple__351)) __PYX_ERR(0, 6599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__351);
  __Pyx_GIVEREF(__pyx_tuple__351);
  __pyx_codeobj__352 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__351, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_reset_mouse_drag_delta, 6599, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__352)) __PYX_ERR(0, 6599, __pyx_L1_error)

  /* "imgui/core.pyx":6611
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */
  __pyx_codeobj__353 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_mouse_cursor, 6611, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__353)) __PYX_ERR(0, 6611, __pyx_L1_error)

  /* "imgui/core.pyx":6620
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */
  __pyx_tuple__354 = PyTuple_Pack(2, __pyx_n_s_mouse_cursor_type, __pyx_n_s_mouse_cursor_type); if (unlikely(!__pyx_tuple__354)) __PYX_ERR(0, 6620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__354);
  __Pyx_GIVEREF(__pyx_tuple__354);
  __pyx_codeobj__355 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__354, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_mouse_cursor, 6620, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__355)) __PYX_ERR(0, 6620, __pyx_L1_error)

  /* "imgui/core.pyx":6632
 * 
 * 
 * def set_scroll_here(float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll here.
 * 
 */
  __pyx_tuple__356 = PyTuple_Pack(1, __pyx_n_s_center_y_ratio); if (unlikely(!__pyx_tuple__356)) __PYX_ERR(0, 6632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__356);
  __Pyx_GIVEREF(__pyx_tuple__356);
  __pyx_codeobj__357 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__356, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_scroll_here, 6632, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__357)) __PYX_ERR(0, 6632, __pyx_L1_error)

  /* "imgui/core.pyx":6646
 * 
 * 
 * def set_scroll_from_pos_y(float pos_y, float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll from position Y
 * 
 */
  __pyx_tuple__358 = PyTuple_Pack(2, __pyx_n_s_pos_y, __pyx_n_s_center_y_ratio); if (unlikely(!__pyx_tuple__358)) __PYX_ERR(0, 6646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__358);
  __Pyx_GIVEREF(__pyx_tuple__358);
  __pyx_codeobj__359 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__358, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_scroll_from_pos_y, 6646, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__359)) __PYX_ERR(0, 6646, __pyx_L1_error)

  /* "imgui/core.pyx":6661
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */
  __pyx_tuple__360 = PyTuple_Pack(1, __pyx_n_s_font); if (unlikely(!__pyx_tuple__360)) __PYX_ERR(0, 6661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__360);
  __Pyx_GIVEREF(__pyx_tuple__360);
  __pyx_codeobj__361 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__360, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_push_font, 6661, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__361)) __PYX_ERR(0, 6661, __pyx_L1_error)

  /* "imgui/core.pyx":6700
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */
  __pyx_codeobj__362 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_pop_font, 6700, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__362)) __PYX_ERR(0, 6700, __pyx_L1_error)

  /* "imgui/core.pyx":7048
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */
  __pyx_codeobj__363 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_separator, 7048, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__363)) __PYX_ERR(0, 7048, __pyx_L1_error)

  /* "imgui/core.pyx":7075
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */
  __pyx_tuple__364 = PyTuple_Pack(2, __pyx_n_s_position, __pyx_n_s_spacing); if (unlikely(!__pyx_tuple__364)) __PYX_ERR(0, 7075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__364);
  __Pyx_GIVEREF(__pyx_tuple__364);
  __pyx_codeobj__365 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__364, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_same_line, 7075, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__365)) __PYX_ERR(0, 7075, __pyx_L1_error)

  /* "imgui/core.pyx":7108
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */
  __pyx_codeobj__366 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_new_line, 7108, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__366)) __PYX_ERR(0, 7108, __pyx_L1_error)

  /* "imgui/core.pyx":7117
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */
  __pyx_codeobj__367 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_spacing, 7117, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__367)) __PYX_ERR(0, 7117, __pyx_L1_error)

  /* "imgui/core.pyx":7144
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */
  __pyx_tuple__368 = PyTuple_Pack(2, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__368)) __PYX_ERR(0, 7144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__368);
  __Pyx_GIVEREF(__pyx_tuple__368);
  __pyx_codeobj__369 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__368, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_dummy, 7144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__369)) __PYX_ERR(0, 7144, __pyx_L1_error)

  /* "imgui/core.pyx":7168
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */
  __pyx_tuple__370 = PyTuple_Pack(1, __pyx_n_s_width); if (unlikely(!__pyx_tuple__370)) __PYX_ERR(0, 7168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__370);
  __Pyx_GIVEREF(__pyx_tuple__370);
  __pyx_codeobj__371 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__370, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_indent, 7168, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__371)) __PYX_ERR(0, 7168, __pyx_L1_error)

  /* "imgui/core.pyx":7199
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */
  __pyx_tuple__372 = PyTuple_Pack(1, __pyx_n_s_width); if (unlikely(!__pyx_tuple__372)) __PYX_ERR(0, 7199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__372);
  __Pyx_GIVEREF(__pyx_tuple__372);
  __pyx_codeobj__373 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__372, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_unindent, 7199, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__373)) __PYX_ERR(0, 7199, __pyx_L1_error)

  /* "imgui/core.pyx":7230
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */
  __pyx_tuple__374 = PyTuple_Pack(3, __pyx_n_s_count, __pyx_n_s_identifier, __pyx_n_s_border); if (unlikely(!__pyx_tuple__374)) __PYX_ERR(0, 7230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__374);
  __Pyx_GIVEREF(__pyx_tuple__374);
  __pyx_codeobj__375 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__374, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_columns, 7230, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__375)) __PYX_ERR(0, 7230, __pyx_L1_error)

  /* "imgui/core.pyx":7290
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */
  __pyx_codeobj__376 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_next_column, 7290, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__376)) __PYX_ERR(0, 7290, __pyx_L1_error)

  /* "imgui/core.pyx":7301
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */
  __pyx_codeobj__377 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_column_index, 7301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__377)) __PYX_ERR(0, 7301, __pyx_L1_error)

  /* "imgui/core.pyx":7315
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */
  __pyx_tuple__378 = PyTuple_Pack(1, __pyx_n_s_column_index); if (unlikely(!__pyx_tuple__378)) __PYX_ERR(0, 7315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__378);
  __Pyx_GIVEREF(__pyx_tuple__378);
  __pyx_codeobj__379 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__378, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_column_offset, 7315, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__379)) __PYX_ERR(0, 7315, __pyx_L1_error)

  /* "imgui/core.pyx":7335
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */
  __pyx_tuple__380 = PyTuple_Pack(2, __pyx_n_s_column_index, __pyx_n_s_offset_x); if (unlikely(!__pyx_tuple__380)) __PYX_ERR(0, 7335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__380);
  __Pyx_GIVEREF(__pyx_tuple__380);
  __pyx_codeobj__381 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__380, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_column_offset, 7335, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__381)) __PYX_ERR(0, 7335, __pyx_L1_error)

  /* "imgui/core.pyx":7351
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */
  __pyx_tuple__382 = PyTuple_Pack(1, __pyx_n_s_column_index); if (unlikely(!__pyx_tuple__382)) __PYX_ERR(0, 7351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__382);
  __Pyx_GIVEREF(__pyx_tuple__382);
  __pyx_codeobj__383 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__382, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_column_width, 7351, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__383)) __PYX_ERR(0, 7351, __pyx_L1_error)

  /* "imgui/core.pyx":7365
 * 
 * 
 * def set_column_width(int column_index, float width):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */
  __pyx_tuple__384 = PyTuple_Pack(2, __pyx_n_s_column_index, __pyx_n_s_width); if (unlikely(!__pyx_tuple__384)) __PYX_ERR(0, 7365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__384);
  __Pyx_GIVEREF(__pyx_tuple__384);
  __pyx_codeobj__385 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__384, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_column_width, 7365, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__385)) __PYX_ERR(0, 7365, __pyx_L1_error)

  /* "imgui/core.pyx":7381
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */
  __pyx_codeobj__386 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_columns_count, 7381, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__386)) __PYX_ERR(0, 7381, __pyx_L1_error)

  /* "imgui/core.pyx":7395
 * 
 * 
 * def begin_drag_drop_source(cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop source. If this return True, you
 *     can call :func:`set_drag_drop_payload` and :func:`end_drag_drop_source`.
 */
  __pyx_tuple__387 = PyTuple_Pack(1, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__387)) __PYX_ERR(0, 7395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__387);
  __Pyx_GIVEREF(__pyx_tuple__387);
  __pyx_codeobj__388 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__387, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_drag_drop_source, 7395, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__388)) __PYX_ERR(0, 7395, __pyx_L1_error)

  /* "imgui/core.pyx":7434
 * 
 * 
 * def set_drag_drop_payload(str type, bytes data, cimgui.ImGuiCond condition=0):             # <<<<<<<<<<<<<<
 *     """Set the payload for a drag and drop source. Only call after
 *     :func:`begin_drag_drop_source` returns True.
 */
  __pyx_tuple__389 = PyTuple_Pack(3, __pyx_n_s_type, __pyx_n_s_data, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__389)) __PYX_ERR(0, 7434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__389);
  __Pyx_GIVEREF(__pyx_tuple__389);
  __pyx_codeobj__390 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__389, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_drag_drop_payload, 7434, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__390)) __PYX_ERR(0, 7434, __pyx_L1_error)

  /* "imgui/core.pyx":7454
 * 
 * 
 * def end_drag_drop_source():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_source`
 *     returns True.
 */
  __pyx_codeobj__391 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_drag_drop_source, 7454, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__391)) __PYX_ERR(0, 7454, __pyx_L1_error)

  /* "imgui/core.pyx":7468
 * 
 * 
 * def begin_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop target. If this return True, you
 *     can call :func:`accept_drag_drop_payload` and :func:`end_drag_drop_target`.
 */
  __pyx_codeobj__392 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_drag_drop_target, 7468, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__392)) __PYX_ERR(0, 7468, __pyx_L1_error)

  /* "imgui/core.pyx":7485
 * 
 * 
 * def accept_drag_drop_payload(str type, cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Get the drag and drop payload. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */
  __pyx_tuple__393 = PyTuple_Pack(4, __pyx_n_s_type, __pyx_n_s_flags, __pyx_n_s_payload, __pyx_n_s_data); if (unlikely(!__pyx_tuple__393)) __PYX_ERR(0, 7485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__393);
  __Pyx_GIVEREF(__pyx_tuple__393);
  __pyx_codeobj__394 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__393, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_accept_drag_drop_payload, 7485, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__394)) __PYX_ERR(0, 7485, __pyx_L1_error)

  /* "imgui/core.pyx":7510
 * 
 * 
 * def end_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */
  __pyx_codeobj__395 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_drag_drop_target, 7510, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__395)) __PYX_ERR(0, 7510, __pyx_L1_error)

  /* "imgui/core.pyx":7524
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */
  __pyx_codeobj__396 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_group, 7524, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__396)) __PYX_ERR(0, 7524, __pyx_L1_error)

  /* "imgui/core.pyx":7559
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */
  __pyx_codeobj__397 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_group, 7559, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__397)) __PYX_ERR(0, 7559, __pyx_L1_error)

  /* "imgui/core.pyx":7568
 * 
 * 
 * def get_cursor_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position.
 * 
 */
  __pyx_codeobj__398 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_cursor_pos, 7568, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__398)) __PYX_ERR(0, 7568, __pyx_L1_error)

  /* "imgui/core.pyx":7577
 * 
 * 
 * def get_cursor_pos_x():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosX()
 * 
 */
  __pyx_codeobj__399 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_cursor_pos_x, 7577, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__399)) __PYX_ERR(0, 7577, __pyx_L1_error)

  /* "imgui/core.pyx":7581
 * 
 * 
 * def get_cursor_pos_y():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosY()
 * 
 */
  __pyx_codeobj__400 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_cursor_pos_y, 7581, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__400)) __PYX_ERR(0, 7581, __pyx_L1_error)

  /* "imgui/core.pyx":7585
 * 
 * 
 * def set_cursor_pos(local_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in local coordinates [0..<window size>] (useful to work with ImDrawList API)
 * 
 */
  __pyx_tuple__401 = PyTuple_Pack(1, __pyx_n_s_local_pos); if (unlikely(!__pyx_tuple__401)) __PYX_ERR(0, 7585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__401);
  __Pyx_GIVEREF(__pyx_tuple__401);
  __pyx_codeobj__402 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__401, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_cursor_pos, 7585, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__402)) __PYX_ERR(0, 7585, __pyx_L1_error)

  /* "imgui/core.pyx":7594
 * 
 * 
 * def set_cursor_pos_x(float x):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosX(x)
 * 
 */
  __pyx_tuple__403 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_x); if (unlikely(!__pyx_tuple__403)) __PYX_ERR(0, 7594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__403);
  __Pyx_GIVEREF(__pyx_tuple__403);
  __pyx_codeobj__404 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__403, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_cursor_pos_x, 7594, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__404)) __PYX_ERR(0, 7594, __pyx_L1_error)

  /* "imgui/core.pyx":7598
 * 
 * 
 * def set_cursor_pos_y(float y):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosY(y)
 * 
 */
  __pyx_tuple__405 = PyTuple_Pack(2, __pyx_n_s_y, __pyx_n_s_y); if (unlikely(!__pyx_tuple__405)) __PYX_ERR(0, 7598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__405);
  __Pyx_GIVEREF(__pyx_tuple__405);
  __pyx_codeobj__406 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__405, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_cursor_pos_y, 7598, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__406)) __PYX_ERR(0, 7598, __pyx_L1_error)

  /* "imgui/core.pyx":7602
 * 
 * 
 * def get_cursor_start_pos():             # <<<<<<<<<<<<<<
 *     """Get the initial cursor position.
 * 
 */
  __pyx_codeobj__407 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_cursor_start_pos, 7602, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__407)) __PYX_ERR(0, 7602, __pyx_L1_error)

  /* "imgui/core.pyx":7611
 * 
 * 
 * def get_cursor_screen_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */
  __pyx_codeobj__408 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_cursor_screen_pos, 7611, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__408)) __PYX_ERR(0, 7611, __pyx_L1_error)

  /* "imgui/core.pyx":7620
 * 
 * 
 * def set_cursor_screen_pos(screen_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */
  __pyx_tuple__409 = PyTuple_Pack(1, __pyx_n_s_screen_pos); if (unlikely(!__pyx_tuple__409)) __PYX_ERR(0, 7620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__409);
  __Pyx_GIVEREF(__pyx_tuple__409);
  __pyx_codeobj__410 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__409, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_cursor_screen_pos, 7620, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__410)) __PYX_ERR(0, 7620, __pyx_L1_error)

  /* "imgui/core.pyx":7635
 * set_cursor_screen_position = set_cursor_screen_pos
 * 
 * def align_text_to_frame_padding():             # <<<<<<<<<<<<<<
 *     cimgui.AlignTextToFramePadding()
 * 
 */
  __pyx_codeobj__411 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_align_text_to_frame_padding, 7635, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__411)) __PYX_ERR(0, 7635, __pyx_L1_error)

  /* "imgui/core.pyx":7638
 *     cimgui.AlignTextToFramePadding()
 * 
 * def get_text_line_height():             # <<<<<<<<<<<<<<
 *     """Get text line height.
 * 
 */
  __pyx_codeobj__412 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_text_line_height, 7638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__412)) __PYX_ERR(0, 7638, __pyx_L1_error)

  /* "imgui/core.pyx":7650
 * 
 * 
 * def get_text_line_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """Get text line height, with spacing.
 * 
 */
  __pyx_codeobj__413 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_text_line_height_with_spacin, 7650, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__413)) __PYX_ERR(0, 7650, __pyx_L1_error)

  /* "imgui/core.pyx":7662
 * 
 * 
 * def get_frame_height():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2
 * 
 */
  __pyx_codeobj__414 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_frame_height, 7662, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__414)) __PYX_ERR(0, 7662, __pyx_L1_error)

  /* "imgui/core.pyx":7672
 * 
 * 
 * def get_frame_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
 * 
 */
  __pyx_codeobj__415 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_frame_height_with_spacing, 7672, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__415)) __PYX_ERR(0, 7672, __pyx_L1_error)

  /* "imgui/core.pyx":7681
 * 
 * 
 * def create_context(_FontAtlas shared_font_atlas = None):             # <<<<<<<<<<<<<<
 *     """CreateContext
 * 
 */
  __pyx_tuple__416 = PyTuple_Pack(2, __pyx_n_s_shared_font_atlas, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__416)) __PYX_ERR(0, 7681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__416);
  __Pyx_GIVEREF(__pyx_tuple__416);
  __pyx_codeobj__417 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__416, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_create_context, 7681, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__417)) __PYX_ERR(0, 7681, __pyx_L1_error)

  /* "imgui/core.pyx":7704
 * 
 * 
 * def destroy_context(_ImGuiContext ctx = None):             # <<<<<<<<<<<<<<
 *     """DestroyContext
 * 
 */
  __pyx_tuple__418 = PyTuple_Pack(1, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__418)) __PYX_ERR(0, 7704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__418);
  __Pyx_GIVEREF(__pyx_tuple__418);
  __pyx_codeobj__419 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__418, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_destroy_context, 7704, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__419)) __PYX_ERR(0, 7704, __pyx_L1_error)

  /* "imgui/core.pyx":7720
 * 
 * 
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     """GetCurrentContext
 * 
 */
  __pyx_tuple__420 = PyTuple_Pack(1, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__420)) __PYX_ERR(0, 7720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__420);
  __Pyx_GIVEREF(__pyx_tuple__420);
  __pyx_codeobj__421 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__420, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_current_context, 7720, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__421)) __PYX_ERR(0, 7720, __pyx_L1_error)

  /* "imgui/core.pyx":7732
 * 
 * 
 * def set_current_context(_ImGuiContext ctx):             # <<<<<<<<<<<<<<
 *     """SetCurrentContext
 * 
 */
  __pyx_tuple__422 = PyTuple_Pack(1, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__422)) __PYX_ERR(0, 7732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__422);
  __Pyx_GIVEREF(__pyx_tuple__422);
  __pyx_codeobj__423 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__422, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_current_context, 7732, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__423)) __PYX_ERR(0, 7732, __pyx_L1_error)

  /* "imgui/core.pyx":7742
 * 
 * 
 * def push_id(str str_id):             # <<<<<<<<<<<<<<
 *     """Push an ID into the ID stack
 * 
 */
  __pyx_tuple__424 = PyTuple_Pack(1, __pyx_n_s_str_id); if (unlikely(!__pyx_tuple__424)) __PYX_ERR(0, 7742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__424);
  __Pyx_GIVEREF(__pyx_tuple__424);
  __pyx_codeobj__425 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__424, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_push_id, 7742, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__425)) __PYX_ERR(0, 7742, __pyx_L1_error)

  /* "imgui/core.pyx":7754
 * 
 * 
 * def pop_id():             # <<<<<<<<<<<<<<
 *     """Pop from the ID stack
 * 
 */
  __pyx_codeobj__426 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_pop_id, 7754, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__426)) __PYX_ERR(0, 7754, __pyx_L1_error)

  /* "imgui/core.pyx":7774
 * # === ansifeed extras ===
 * 
 * def _ansifeed_text_ansi(str text):             # <<<<<<<<<<<<<<
 *     """Add ANSI-escape-formatted text to current widget stack.
 * 
 */
  __pyx_tuple__427 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__427)) __PYX_ERR(0, 7774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__427);
  __Pyx_GIVEREF(__pyx_tuple__427);
  __pyx_codeobj__428 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__427, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_ansifeed_text_ansi, 7774, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__428)) __PYX_ERR(0, 7774, __pyx_L1_error)

  /* "imgui/core.pyx":7799
 * 
 * 
 * def _ansifeed_text_ansi_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add pre-colored ANSI-escape-formatted text to current widget stack.
 * 
 */
  __pyx_tuple__429 = PyTuple_Pack(5, __pyx_n_s_text, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__429)) __PYX_ERR(0, 7799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__429);
  __Pyx_GIVEREF(__pyx_tuple__429);
  __pyx_codeobj__430 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__429, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_ansifeed_text_ansi_colored, 7799, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__430)) __PYX_ERR(0, 7799, __pyx_L1_error)

  /* "imgui/core.pyx":7840
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */
  __pyx_tuple__431 = PyTuple_Pack(1, __pyx_n_s_font); if (unlikely(!__pyx_tuple__431)) __PYX_ERR(0, 7840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__431);
  __Pyx_GIVEREF(__pyx_tuple__431);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__431, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_font, 7840, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 7840, __pyx_L1_error)

  /* "imgui/core.pyx":7872
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */
  __pyx_tuple__432 = PyTuple_Pack(3, __pyx_n_s_variable, __pyx_n_s_value, __pyx_n_s_count); if (unlikely(!__pyx_tuple__432)) __PYX_ERR(0, 7872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__432);
  __Pyx_GIVEREF(__pyx_tuple__432);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__432, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_styled, 7872, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 7872, __pyx_L1_error)

  /* "imgui/core.pyx":7881
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */
  __pyx_tuple__433 = PyTuple_Pack(6, __pyx_n_s_variable, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_count); if (unlikely(!__pyx_tuple__433)) __PYX_ERR(0, 7881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__433);
  __Pyx_GIVEREF(__pyx_tuple__433);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__433, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_colored, 7881, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 7881, __pyx_L1_error)

  /* "imgui/core.pyx":7896
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */
  __pyx_tuple__434 = PyTuple_Pack(5, __pyx_n_s_variables_and_values, __pyx_n_s_count, __pyx_n_s_iterator, __pyx_n_s_var, __pyx_n_s_val); if (unlikely(!__pyx_tuple__434)) __PYX_ERR(0, 7896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__434);
  __Pyx_GIVEREF(__pyx_tuple__434);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__434, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_istyled, 7896, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 7896, __pyx_L1_error)

  /* "imgui/core.pyx":7924
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */
  __pyx_tuple__435 = PyTuple_Pack(1, __pyx_n_s_str_id); if (unlikely(!__pyx_tuple__435)) __PYX_ERR(0, 7924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__435);
  __Pyx_GIVEREF(__pyx_tuple__435);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__435, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_scoped, 7924, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 7924, __pyx_L1_error)

  /* "imgui/core.pyx":7941
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */
  __pyx_codeobj__436 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_pos_off, 7941, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__436)) __PYX_ERR(0, 7941, __pyx_L1_error)

  /* "imgui/core.pyx":7944
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */
  __pyx_codeobj__437 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_uv_offs, 7944, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__437)) __PYX_ERR(0, 7944, __pyx_L1_error)

  /* "imgui/core.pyx":7947
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */
  __pyx_codeobj__438 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_col_off, 7947, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__438)) __PYX_ERR(0, 7947, __pyx_L1_error)

  /* "imgui/core.pyx":7950
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */
  __pyx_codeobj__439 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_size, 7950, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__439)) __PYX_ERR(0, 7950, __pyx_L1_error)

  /* "imgui/core.pyx":7953
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 */
  __pyx_codeobj__440 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_py_index_buffer_index_size, 7953, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__440)) __PYX_ERR(0, 7953, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__441 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__441)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__441);
  __Pyx_GIVEREF(__pyx_tuple__441);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__442 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__442)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__442);
  __Pyx_GIVEREF(__pyx_tuple__442);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__443 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__443)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__443);
  __Pyx_GIVEREF(__pyx_tuple__443);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__444 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__444)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__444);
  __Pyx_GIVEREF(__pyx_tuple__444);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__445 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__445)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__445);
  __Pyx_GIVEREF(__pyx_tuple__445);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__446 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__446)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__446);
  __Pyx_GIVEREF(__pyx_tuple__446);
  __pyx_codeobj__447 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__446, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__447)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyString_Type_encode.type = (PyObject*)&PyString_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_512 = PyInt_FromLong(512); if (unlikely(!__pyx_int_512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  ImGuiError = Py_None; Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5imgui_4core__Font = &__pyx_vtable_5imgui_4core__Font;
  __pyx_vtable_5imgui_4core__Font.from_ptr = (PyObject *(*)(ImFont *))__pyx_f_5imgui_4core_5_Font_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__Font) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__Font.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__Font.tp_dictoffset && __pyx_type_5imgui_4core__Font.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__Font.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__Font.tp_dict, __pyx_vtabptr_5imgui_4core__Font) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Font, (PyObject *)&__pyx_type_5imgui_4core__Font) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__Font) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__Font = &__pyx_type_5imgui_4core__Font;
  __pyx_vtabptr_5imgui_4core__ImGuiContext = &__pyx_vtable_5imgui_4core__ImGuiContext;
  __pyx_vtable_5imgui_4core__ImGuiContext.from_ptr = (PyObject *(*)(ImGuiContext *))__pyx_f_5imgui_4core_13_ImGuiContext_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__ImGuiContext) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__ImGuiContext.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__ImGuiContext.tp_dictoffset && __pyx_type_5imgui_4core__ImGuiContext.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__ImGuiContext.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__ImGuiContext.tp_dict, __pyx_vtabptr_5imgui_4core__ImGuiContext) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiContext, (PyObject *)&__pyx_type_5imgui_4core__ImGuiContext) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__ImGuiContext) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__ImGuiContext = &__pyx_type_5imgui_4core__ImGuiContext;
  __pyx_vtabptr_5imgui_4core__DrawCmd = &__pyx_vtable_5imgui_4core__DrawCmd;
  __pyx_vtable_5imgui_4core__DrawCmd.from_ptr = (PyObject *(*)(ImDrawCmd *))__pyx_f_5imgui_4core_8_DrawCmd_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__DrawCmd.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__DrawCmd.tp_dictoffset && __pyx_type_5imgui_4core__DrawCmd.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__DrawCmd.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__DrawCmd.tp_dict, __pyx_vtabptr_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DrawCmd, (PyObject *)&__pyx_type_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__DrawCmd = &__pyx_type_5imgui_4core__DrawCmd;
  __pyx_vtabptr_5imgui_4core__DrawList = &__pyx_vtable_5imgui_4core__DrawList;
  __pyx_vtable_5imgui_4core__DrawList.from_ptr = (PyObject *(*)(ImDrawList *))__pyx_f_5imgui_4core_9_DrawList_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 374, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__DrawList.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__DrawList.tp_dictoffset && __pyx_type_5imgui_4core__DrawList.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__DrawList.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__DrawList.tp_dict, __pyx_vtabptr_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 374, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DrawList, (PyObject *)&__pyx_type_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 374, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 374, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__DrawList = &__pyx_type_5imgui_4core__DrawList;
  __pyx_vtabptr_5imgui_4core__Colors = &__pyx_vtable_5imgui_4core__Colors;
  __pyx_vtable_5imgui_4core__Colors._check_color = (PyObject *(*)(struct __pyx_obj_5imgui_4core__Colors *, ImGuiCol))__pyx_f_5imgui_4core_7_Colors__check_color;
  if (PyType_Ready(&__pyx_type_5imgui_4core__Colors) < 0) __PYX_ERR(0, 814, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__Colors.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__Colors.tp_dictoffset && __pyx_type_5imgui_4core__Colors.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__Colors.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__Colors.tp_dict, __pyx_vtabptr_5imgui_4core__Colors) < 0) __PYX_ERR(0, 814, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Colors, (PyObject *)&__pyx_type_5imgui_4core__Colors) < 0) __PYX_ERR(0, 814, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__Colors) < 0) __PYX_ERR(0, 814, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__Colors = &__pyx_type_5imgui_4core__Colors;
  __pyx_vtabptr_5imgui_4core_GuiStyle = &__pyx_vtable_5imgui_4core_GuiStyle;
  __pyx_vtable_5imgui_4core_GuiStyle._check_ptr = (PyObject *(*)(struct __pyx_obj_5imgui_4core_GuiStyle *))__pyx_f_5imgui_4core_8GuiStyle__check_ptr;
  __pyx_vtable_5imgui_4core_GuiStyle.from_ref = (struct __pyx_obj_5imgui_4core_GuiStyle *(*)(ImGuiStyle &))__pyx_f_5imgui_4core_8GuiStyle_from_ref;
  __pyx_vtable_5imgui_4core_GuiStyle._create = (struct __pyx_obj_5imgui_4core_GuiStyle *(*)(void))__pyx_f_5imgui_4core_8GuiStyle__create;
  if (PyType_Ready(&__pyx_type_5imgui_4core_GuiStyle) < 0) __PYX_ERR(0, 840, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core_GuiStyle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core_GuiStyle.tp_dictoffset && __pyx_type_5imgui_4core_GuiStyle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core_GuiStyle.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core_GuiStyle.tp_dict, __pyx_vtabptr_5imgui_4core_GuiStyle) < 0) __PYX_ERR(0, 840, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GuiStyle, (PyObject *)&__pyx_type_5imgui_4core_GuiStyle) < 0) __PYX_ERR(0, 840, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core_GuiStyle) < 0) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_ptype_5imgui_4core_GuiStyle = &__pyx_type_5imgui_4core_GuiStyle;
  __pyx_vtabptr_5imgui_4core__DrawData = &__pyx_vtable_5imgui_4core__DrawData;
  __pyx_vtable_5imgui_4core__DrawData.from_ptr = (PyObject *(*)(ImDrawData *))__pyx_f_5imgui_4core_9_DrawData_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 1215, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__DrawData.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__DrawData.tp_dictoffset && __pyx_type_5imgui_4core__DrawData.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__DrawData.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__DrawData.tp_dict, __pyx_vtabptr_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 1215, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DrawData, (PyObject *)&__pyx_type_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 1215, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 1215, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__DrawData = &__pyx_type_5imgui_4core__DrawData;
  __pyx_vtabptr_5imgui_4core__StaticGlyphRanges = &__pyx_vtable_5imgui_4core__StaticGlyphRanges;
  __pyx_vtable_5imgui_4core__StaticGlyphRanges.from_ptr = (PyObject *(*)(ImWchar const *))__pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__StaticGlyphRanges.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__StaticGlyphRanges.tp_dictoffset && __pyx_type_5imgui_4core__StaticGlyphRanges.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__StaticGlyphRanges.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__StaticGlyphRanges.tp_dict, __pyx_vtabptr_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StaticGlyphRanges, (PyObject *)&__pyx_type_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__StaticGlyphRanges = &__pyx_type_5imgui_4core__StaticGlyphRanges;
  __pyx_vtabptr_5imgui_4core__FontAtlas = &__pyx_vtable_5imgui_4core__FontAtlas;
  __pyx_vtable_5imgui_4core__FontAtlas.from_ptr = (PyObject *(*)(ImFontAtlas *))__pyx_f_5imgui_4core_10_FontAtlas_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__FontAtlas.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__FontAtlas.tp_dictoffset && __pyx_type_5imgui_4core__FontAtlas.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__FontAtlas.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__FontAtlas.tp_dict, __pyx_vtabptr_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FontAtlas, (PyObject *)&__pyx_type_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__FontAtlas = &__pyx_type_5imgui_4core__FontAtlas;
  __pyx_vtabptr_5imgui_4core__IO = &__pyx_vtable_5imgui_4core__IO;
  __pyx_vtable_5imgui_4core__IO._get_clipboard_text = (char const *(*)(void *))__pyx_f_5imgui_4core_3_IO__get_clipboard_text;
  __pyx_vtable_5imgui_4core__IO._set_clipboard_text = (void (*)(void *, char const *))__pyx_f_5imgui_4core_3_IO__set_clipboard_text;
  if (PyType_Ready(&__pyx_type_5imgui_4core__IO) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core__IO.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core__IO.tp_dictoffset && __pyx_type_5imgui_4core__IO.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core__IO.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__IO.tp_dict, __pyx_vtabptr_5imgui_4core__IO) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IO, (PyObject *)&__pyx_type_5imgui_4core__IO) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__IO) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__IO = &__pyx_type_5imgui_4core__IO;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct___py_font) < 0) __PYX_ERR(0, 7840, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core___pyx_scope_struct___py_font.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core___pyx_scope_struct___py_font.tp_dictoffset && __pyx_type_5imgui_4core___pyx_scope_struct___py_font.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core___pyx_scope_struct___py_font.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5imgui_4core___pyx_scope_struct___py_font = &__pyx_type_5imgui_4core___pyx_scope_struct___py_font;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct_1__py_styled) < 0) __PYX_ERR(0, 7872, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core___pyx_scope_struct_1__py_styled.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core___pyx_scope_struct_1__py_styled.tp_dictoffset && __pyx_type_5imgui_4core___pyx_scope_struct_1__py_styled.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core___pyx_scope_struct_1__py_styled.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5imgui_4core___pyx_scope_struct_1__py_styled = &__pyx_type_5imgui_4core___pyx_scope_struct_1__py_styled;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct_2__py_colored) < 0) __PYX_ERR(0, 7881, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core___pyx_scope_struct_2__py_colored.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core___pyx_scope_struct_2__py_colored.tp_dictoffset && __pyx_type_5imgui_4core___pyx_scope_struct_2__py_colored.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core___pyx_scope_struct_2__py_colored.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5imgui_4core___pyx_scope_struct_2__py_colored = &__pyx_type_5imgui_4core___pyx_scope_struct_2__py_colored;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct_3__py_istyled) < 0) __PYX_ERR(0, 7896, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core___pyx_scope_struct_3__py_istyled.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core___pyx_scope_struct_3__py_istyled.tp_dictoffset && __pyx_type_5imgui_4core___pyx_scope_struct_3__py_istyled.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core___pyx_scope_struct_3__py_istyled.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5imgui_4core___pyx_scope_struct_3__py_istyled = &__pyx_type_5imgui_4core___pyx_scope_struct_3__py_istyled;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct_4__py_scoped) < 0) __PYX_ERR(0, 7924, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5imgui_4core___pyx_scope_struct_4__py_scoped.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5imgui_4core___pyx_scope_struct_4__py_scoped.tp_dictoffset && __pyx_type_5imgui_4core___pyx_scope_struct_4__py_scoped.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5imgui_4core___pyx_scope_struct_4__py_scoped.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5imgui_4core___pyx_scope_struct_4__py_scoped = &__pyx_type_5imgui_4core___pyx_scope_struct_4__py_scoped;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcore(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcore(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_core(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_core(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_core(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  static unsigned short __pyx_t_10[3];
  ImGuiCond __pyx_t_11;
  ImGuiDir __pyx_t_12;
  static PyThread_type_lock __pyx_t_13[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'core' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_core(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("core", __pyx_methods, __pyx_k_todo_consider_inlining_every_oc, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_imgui__core) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "imgui.core")) {
      if (unlikely(PyDict_SetItemString(modules, "imgui.core", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "imgui/core.pyx":15
 * from cython.operator cimport dereference as deref
 * 
 * from collections import namedtuple             # <<<<<<<<<<<<<<
 * import warnings
 * from contextlib import contextmanager
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_namedtuple);
  __Pyx_GIVEREF(__pyx_n_s_namedtuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_namedtuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_namedtuple, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":16
 * 
 * from collections import namedtuple
 * import warnings             # <<<<<<<<<<<<<<
 * from contextlib import contextmanager
 * try:
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":17
 * from collections import namedtuple
 * import warnings
 * from contextlib import contextmanager             # <<<<<<<<<<<<<<
 * try:
 *     from itertools import izip_longest
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_contextmanager);
  __Pyx_GIVEREF(__pyx_n_s_contextmanager);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_contextmanager);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_contextlib, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_contextmanager, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":18
 * import warnings
 * from contextlib import contextmanager
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "imgui/core.pyx":19
 * from contextlib import contextmanager
 * try:
 *     from itertools import izip_longest             # <<<<<<<<<<<<<<
 * except ImportError:
 *     from itertools import zip_longest as izip_longest
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_izip_longest);
      __Pyx_GIVEREF(__pyx_n_s_izip_longest);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_izip_longest);
      __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_izip_longest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip_longest, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "imgui/core.pyx":18
 * import warnings
 * from contextlib import contextmanager
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "imgui/core.pyx":20
 * try:
 *     from itertools import izip_longest
 * except ImportError:             # <<<<<<<<<<<<<<
 *     from itertools import zip_longest as izip_longest
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("imgui.core", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 20, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);

      /* "imgui/core.pyx":21
 *     from itertools import izip_longest
 * except ImportError:
 *     from itertools import zip_longest as izip_longest             # <<<<<<<<<<<<<<
 * 
 * from libc.stdlib cimport malloc, free
 */
      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_zip_longest);
      __Pyx_GIVEREF(__pyx_n_s_zip_longest);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_zip_longest);
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_8, -1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_zip_longest); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip_longest, __pyx_t_8) < 0) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "imgui/core.pyx":18
 * import warnings
 * from contextlib import contextmanager
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L7_try_end:;
  }

  /* "imgui/core.pyx":39
 * DEF TARGET_IMGUI_VERSION = (1, 65)
 * 
 * cdef unsigned short* _LATIN_ALL = [0x0020, 0x024F , 0]             # <<<<<<<<<<<<<<
 * 
 * # ==== Condition enum redefines ====
 */
  __pyx_t_10[0] = 0x0020;
  __pyx_t_10[1] = 0x024F;
  __pyx_t_10[2] = 0;
  __pyx_v_5imgui_4core__LATIN_ALL = __pyx_t_10;

  /* "imgui/core.pyx":42
 * 
 * # ==== Condition enum redefines ====
 * ALWAYS = enums.ImGuiCond_Always             # <<<<<<<<<<<<<<
 * ONCE = enums.ImGuiCond_Once
 * FIRST_USE_EVER = enums.ImGuiCond_FirstUseEver
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_Always); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ALWAYS, __pyx_t_7) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":43
 * # ==== Condition enum redefines ====
 * ALWAYS = enums.ImGuiCond_Always
 * ONCE = enums.ImGuiCond_Once             # <<<<<<<<<<<<<<
 * FIRST_USE_EVER = enums.ImGuiCond_FirstUseEver
 * APPEARING = enums.ImGuiCond_Appearing
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_Once); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ONCE, __pyx_t_7) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":44
 * ALWAYS = enums.ImGuiCond_Always
 * ONCE = enums.ImGuiCond_Once
 * FIRST_USE_EVER = enums.ImGuiCond_FirstUseEver             # <<<<<<<<<<<<<<
 * APPEARING = enums.ImGuiCond_Appearing
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_FirstUseEver); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FIRST_USE_EVER, __pyx_t_7) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":45
 * ONCE = enums.ImGuiCond_Once
 * FIRST_USE_EVER = enums.ImGuiCond_FirstUseEver
 * APPEARING = enums.ImGuiCond_Appearing             # <<<<<<<<<<<<<<
 * 
 * # ==== Style var enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_Appearing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPEARING, __pyx_t_7) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":48
 * 
 * # ==== Style var enum redefines ====
 * STYLE_ALPHA = enums.ImGuiStyleVar_Alpha # float             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_Alpha); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_ALPHA, __pyx_t_7) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":49
 * # ==== Style var enum redefines ====
 * STYLE_ALPHA = enums.ImGuiStyleVar_Alpha # float
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 * STYLE_WINDOW_BORDERSIZE = enums.ImGuiStyleVar_WindowBorderSize  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowPadding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_PADDING, __pyx_t_7) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":50
 * STYLE_ALPHA = enums.ImGuiStyleVar_Alpha # float
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_BORDERSIZE = enums.ImGuiStyleVar_WindowBorderSize  # float
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":51
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 * STYLE_WINDOW_BORDERSIZE = enums.ImGuiStyleVar_WindowBorderSize  # float             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 * STYLE_WINDOW_TITLE_ALIGN = enums.ImGuiStyleVar_WindowTitleAlign  # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowBorderSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_BORDERSIZE, __pyx_t_7) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":52
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 * STYLE_WINDOW_BORDERSIZE = enums.ImGuiStyleVar_WindowBorderSize  # float
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_TITLE_ALIGN = enums.ImGuiStyleVar_WindowTitleAlign  # Vec2
 * STYLE_CHILD_ROUNDING = enums.ImGuiStyleVar_ChildRounding  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowMinSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_MIN_SIZE, __pyx_t_7) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":53
 * STYLE_WINDOW_BORDERSIZE = enums.ImGuiStyleVar_WindowBorderSize  # float
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 * STYLE_WINDOW_TITLE_ALIGN = enums.ImGuiStyleVar_WindowTitleAlign  # Vec2             # <<<<<<<<<<<<<<
 * STYLE_CHILD_ROUNDING = enums.ImGuiStyleVar_ChildRounding  # float
 * STYLE_CHILD_BORDERSIZE = enums.ImGuiStyleVar_ChildBorderSize  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowTitleAlign); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_TITLE_ALIGN, __pyx_t_7) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":54
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 * STYLE_WINDOW_TITLE_ALIGN = enums.ImGuiStyleVar_WindowTitleAlign  # Vec2
 * STYLE_CHILD_ROUNDING = enums.ImGuiStyleVar_ChildRounding  # float             # <<<<<<<<<<<<<<
 * STYLE_CHILD_BORDERSIZE = enums.ImGuiStyleVar_ChildBorderSize  # float
 * STYLE_POPUP_ROUNDING = enums.ImGuiStyleVar_PopupRounding  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ChildRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_CHILD_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":55
 * STYLE_WINDOW_TITLE_ALIGN = enums.ImGuiStyleVar_WindowTitleAlign  # Vec2
 * STYLE_CHILD_ROUNDING = enums.ImGuiStyleVar_ChildRounding  # float
 * STYLE_CHILD_BORDERSIZE = enums.ImGuiStyleVar_ChildBorderSize  # float             # <<<<<<<<<<<<<<
 * STYLE_POPUP_ROUNDING = enums.ImGuiStyleVar_PopupRounding  # float
 * STYLE_POPUP_BORDERSIZE = enums.ImGuiStyleVar_PopupBorderSize  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ChildBorderSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_CHILD_BORDERSIZE, __pyx_t_7) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":56
 * STYLE_CHILD_ROUNDING = enums.ImGuiStyleVar_ChildRounding  # float
 * STYLE_CHILD_BORDERSIZE = enums.ImGuiStyleVar_ChildBorderSize  # float
 * STYLE_POPUP_ROUNDING = enums.ImGuiStyleVar_PopupRounding  # float             # <<<<<<<<<<<<<<
 * STYLE_POPUP_BORDERSIZE = enums.ImGuiStyleVar_PopupBorderSize  # float
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_PopupRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_POPUP_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":57
 * STYLE_CHILD_BORDERSIZE = enums.ImGuiStyleVar_ChildBorderSize  # float
 * STYLE_POPUP_ROUNDING = enums.ImGuiStyleVar_PopupRounding  # float
 * STYLE_POPUP_BORDERSIZE = enums.ImGuiStyleVar_PopupBorderSize  # float             # <<<<<<<<<<<<<<
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_PopupBorderSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_POPUP_BORDERSIZE, __pyx_t_7) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":58
 * STYLE_POPUP_ROUNDING = enums.ImGuiStyleVar_PopupRounding  # float
 * STYLE_POPUP_BORDERSIZE = enums.ImGuiStyleVar_PopupBorderSize  # float
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2             # <<<<<<<<<<<<<<
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 * STYLE_FRAME_BORDERSIZE = enums.ImGuiStyleVar_FrameBorderSize  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FramePadding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_FRAME_PADDING, __pyx_t_7) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":59
 * STYLE_POPUP_BORDERSIZE = enums.ImGuiStyleVar_PopupBorderSize  # float
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float             # <<<<<<<<<<<<<<
 * STYLE_FRAME_BORDERSIZE = enums.ImGuiStyleVar_FrameBorderSize  # float
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FrameRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_FRAME_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":60
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 * STYLE_FRAME_BORDERSIZE = enums.ImGuiStyleVar_FrameBorderSize  # float             # <<<<<<<<<<<<<<
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FrameBorderSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_FRAME_BORDERSIZE, __pyx_t_7) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":61
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 * STYLE_FRAME_BORDERSIZE = enums.ImGuiStyleVar_FrameBorderSize  # float
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2             # <<<<<<<<<<<<<<
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ItemSpacing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_ITEM_SPACING, __pyx_t_7) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":62
 * STYLE_FRAME_BORDERSIZE = enums.ImGuiStyleVar_FrameBorderSize  # float
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2             # <<<<<<<<<<<<<<
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float
 * STYLE_SCROLLBAR_SIZE = enums.ImGuiStyleVar_ScrollbarSize # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ItemInnerSpacing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_ITEM_INNER_SPACING, __pyx_t_7) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":63
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float             # <<<<<<<<<<<<<<
 * STYLE_SCROLLBAR_SIZE = enums.ImGuiStyleVar_ScrollbarSize # float
 * STYLE_SCROLLBAR_ROUNDING = enums.ImGuiStyleVar_ScrollbarRounding # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_IndentSpacing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_INDENT_SPACING, __pyx_t_7) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":64
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float
 * STYLE_SCROLLBAR_SIZE = enums.ImGuiStyleVar_ScrollbarSize # float             # <<<<<<<<<<<<<<
 * STYLE_SCROLLBAR_ROUNDING = enums.ImGuiStyleVar_ScrollbarRounding # float
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ScrollbarSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_SCROLLBAR_SIZE, __pyx_t_7) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":65
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float
 * STYLE_SCROLLBAR_SIZE = enums.ImGuiStyleVar_ScrollbarSize # float
 * STYLE_SCROLLBAR_ROUNDING = enums.ImGuiStyleVar_ScrollbarRounding # float             # <<<<<<<<<<<<<<
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float
 * STYLE_GRAB_ROUNDING = enums.ImGuiStyleVar_GrabRounding # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ScrollbarRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_SCROLLBAR_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":66
 * STYLE_SCROLLBAR_SIZE = enums.ImGuiStyleVar_ScrollbarSize # float
 * STYLE_SCROLLBAR_ROUNDING = enums.ImGuiStyleVar_ScrollbarRounding # float
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float             # <<<<<<<<<<<<<<
 * STYLE_GRAB_ROUNDING = enums.ImGuiStyleVar_GrabRounding # float
 * STYLE_BUTTON_TEXT_ALIGN = enums.ImGuiStyleVar_ButtonTextAlign # flags ImGuiAlign_*
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_GrabMinSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_GRAB_MIN_SIZE, __pyx_t_7) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":67
 * STYLE_SCROLLBAR_ROUNDING = enums.ImGuiStyleVar_ScrollbarRounding # float
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float
 * STYLE_GRAB_ROUNDING = enums.ImGuiStyleVar_GrabRounding # float             # <<<<<<<<<<<<<<
 * STYLE_BUTTON_TEXT_ALIGN = enums.ImGuiStyleVar_ButtonTextAlign # flags ImGuiAlign_*
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_GrabRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_GRAB_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":68
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float
 * STYLE_GRAB_ROUNDING = enums.ImGuiStyleVar_GrabRounding # float
 * STYLE_BUTTON_TEXT_ALIGN = enums.ImGuiStyleVar_ButtonTextAlign # flags ImGuiAlign_*             # <<<<<<<<<<<<<<
 * 
 * # ==== Key map enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ButtonTextAlign); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_BUTTON_TEXT_ALIGN, __pyx_t_7) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":71
 * 
 * # ==== Key map enum redefines ====
 * KEY_TAB = enums.ImGuiKey_Tab                 # for tabbing through fields             # <<<<<<<<<<<<<<
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Tab); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_TAB, __pyx_t_7) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":72
 * # ==== Key map enum redefines ====
 * KEY_TAB = enums.ImGuiKey_Tab                 # for tabbing through fields
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit             # <<<<<<<<<<<<<<
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_LeftArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_LEFT_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":73
 * KEY_TAB = enums.ImGuiKey_Tab                 # for tabbing through fields
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit             # <<<<<<<<<<<<<<
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_RightArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_RIGHT_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":74
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit             # <<<<<<<<<<<<<<
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_UpArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_UP_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":75
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit             # <<<<<<<<<<<<<<
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_DownArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_DOWN_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":76
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp             # <<<<<<<<<<<<<<
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_PageUp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_PAGE_UP, __pyx_t_7) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":77
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown             # <<<<<<<<<<<<<<
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_PageDown); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_PAGE_DOWN, __pyx_t_7) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":78
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit             # <<<<<<<<<<<<<<
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 * KEY_INSERT = enums.ImGuiKey_Insert           # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Home); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_HOME, __pyx_t_7) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":79
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 * KEY_END = enums.ImGuiKey_End                 # for text edit             # <<<<<<<<<<<<<<
 * KEY_INSERT = enums.ImGuiKey_Insert           # for text edit
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_End); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_END, __pyx_t_7) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":80
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 * KEY_INSERT = enums.ImGuiKey_Insert           # for text edit             # <<<<<<<<<<<<<<
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Insert); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_INSERT, __pyx_t_7) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":81
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 * KEY_INSERT = enums.ImGuiKey_Insert           # for text edit
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit             # <<<<<<<<<<<<<<
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 * KEY_SPACE = enums.ImGuiKey_Space             # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Delete); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_DELETE, __pyx_t_7) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":82
 * KEY_INSERT = enums.ImGuiKey_Insert           # for text edit
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit             # <<<<<<<<<<<<<<
 * KEY_SPACE = enums.ImGuiKey_Space             # for text edit
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Backspace); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_BACKSPACE, __pyx_t_7) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":83
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 * KEY_SPACE = enums.ImGuiKey_Space             # for text edit             # <<<<<<<<<<<<<<
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Space); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_SPACE, __pyx_t_7) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":84
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 * KEY_SPACE = enums.ImGuiKey_Space             # for text edit
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit             # <<<<<<<<<<<<<<
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_ENTER, __pyx_t_7) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":85
 * KEY_SPACE = enums.ImGuiKey_Space             # for text edit
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit             # <<<<<<<<<<<<<<
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Escape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_ESCAPE, __pyx_t_7) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":86
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all             # <<<<<<<<<<<<<<
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_A); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_A, __pyx_t_7) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":87
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy             # <<<<<<<<<<<<<<
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_C); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_C, __pyx_t_7) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":88
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste             # <<<<<<<<<<<<<<
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_V); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_V, __pyx_t_7) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":89
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut             # <<<<<<<<<<<<<<
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo
 * KEY_Z = enums.ImGuiKey_Z                     # for text edit CTRL+Z: undo
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_X); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_X, __pyx_t_7) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":90
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo             # <<<<<<<<<<<<<<
 * KEY_Z = enums.ImGuiKey_Z                     # for text edit CTRL+Z: undo
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_Y, __pyx_t_7) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":91
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo
 * KEY_Z = enums.ImGuiKey_Z                     # for text edit CTRL+Z: undo             # <<<<<<<<<<<<<<
 * 
 * # ==== Window flags enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_Z, __pyx_t_7) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":94
 * 
 * # ==== Window flags enum redefines ====
 * WINDOW_NO_TITLE_BAR = enums.ImGuiWindowFlags_NoTitleBar             # <<<<<<<<<<<<<<
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoTitleBar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_TITLE_BAR, __pyx_t_7) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":95
 * # ==== Window flags enum redefines ====
 * WINDOW_NO_TITLE_BAR = enums.ImGuiWindowFlags_NoTitleBar
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize             # <<<<<<<<<<<<<<
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoResize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_RESIZE, __pyx_t_7) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":96
 * WINDOW_NO_TITLE_BAR = enums.ImGuiWindowFlags_NoTitleBar
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove             # <<<<<<<<<<<<<<
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoMove); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_MOVE, __pyx_t_7) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":97
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_SCROLLBAR, __pyx_t_7) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":98
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse             # <<<<<<<<<<<<<<
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoScrollWithMouse); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_SCROLL_WITH_MOUSE, __pyx_t_7) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":99
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoCollapse); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_COLLAPSE, __pyx_t_7) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":100
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize             # <<<<<<<<<<<<<<
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysAutoResize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_AUTO_RESIZE, __pyx_t_7) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":101
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings             # <<<<<<<<<<<<<<
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoSavedSettings); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_SAVED_SETTINGS, __pyx_t_7) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":102
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs             # <<<<<<<<<<<<<<
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoInputs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_INPUTS, __pyx_t_7) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":103
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar             # <<<<<<<<<<<<<<
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_MenuBar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_MENU_BAR, __pyx_t_7) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":104
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_HorizontalScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_HORIZONTAL_SCROLLING_BAR, __pyx_t_7) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":105
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing             # <<<<<<<<<<<<<<
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoFocusOnAppearing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_FOCUS_ON_APPEARING, __pyx_t_7) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":106
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoBringToFrontOnFocus); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_BRING_TO_FRONT_ON_FOCU, __pyx_t_7) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":107
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysVerticalScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_VERTICAL_SCROLLBAR, __pyx_t_7) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":108
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding
 * WINDOW_NO_NAV_INPUTS = enums.ImGuiWindowFlags_NoNavInputs
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysHorizontalScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_HORIZONTAL_SCROLLB, __pyx_t_7) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":109
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding             # <<<<<<<<<<<<<<
 * WINDOW_NO_NAV_INPUTS = enums.ImGuiWindowFlags_NoNavInputs
 * WINDOW_NO_NAV_FOCUS = enums.ImGuiWindowFlags_NoNavFocus
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysUseWindowPadding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_USE_WINDOW_PADDING, __pyx_t_7) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":110
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding
 * WINDOW_NO_NAV_INPUTS = enums.ImGuiWindowFlags_NoNavInputs             # <<<<<<<<<<<<<<
 * WINDOW_NO_NAV_FOCUS = enums.ImGuiWindowFlags_NoNavFocus
 * WINDOW_NO_NAV = enums.ImGuiWindowFlags_NoNav
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoNavInputs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_NAV_INPUTS, __pyx_t_7) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":111
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding
 * WINDOW_NO_NAV_INPUTS = enums.ImGuiWindowFlags_NoNavInputs
 * WINDOW_NO_NAV_FOCUS = enums.ImGuiWindowFlags_NoNavFocus             # <<<<<<<<<<<<<<
 * WINDOW_NO_NAV = enums.ImGuiWindowFlags_NoNav
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoNavFocus); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_NAV_FOCUS, __pyx_t_7) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":112
 * WINDOW_NO_NAV_INPUTS = enums.ImGuiWindowFlags_NoNavInputs
 * WINDOW_NO_NAV_FOCUS = enums.ImGuiWindowFlags_NoNavFocus
 * WINDOW_NO_NAV = enums.ImGuiWindowFlags_NoNav             # <<<<<<<<<<<<<<
 * 
 * # ==== TreeNode flags enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoNav); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_NAV, __pyx_t_7) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":115
 * 
 * # ==== TreeNode flags enum redefines ====
 * TREE_NODE_SELECTED = enums.ImGuiTreeNodeFlags_Selected             # <<<<<<<<<<<<<<
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed
 * TREE_NODE_ALLOW_ITEM_OVERLAP = enums.ImGuiTreeNodeFlags_AllowItemOverlap
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Selected); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_SELECTED, __pyx_t_7) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":116
 * # ==== TreeNode flags enum redefines ====
 * TREE_NODE_SELECTED = enums.ImGuiTreeNodeFlags_Selected
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed             # <<<<<<<<<<<<<<
 * TREE_NODE_ALLOW_ITEM_OVERLAP = enums.ImGuiTreeNodeFlags_AllowItemOverlap
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Framed); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_FRAMED, __pyx_t_7) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":117
 * TREE_NODE_SELECTED = enums.ImGuiTreeNodeFlags_Selected
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed
 * TREE_NODE_ALLOW_ITEM_OVERLAP = enums.ImGuiTreeNodeFlags_AllowItemOverlap             # <<<<<<<<<<<<<<
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_AllowItemOverlap); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_ALLOW_ITEM_OVERLAP, __pyx_t_7) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":118
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed
 * TREE_NODE_ALLOW_ITEM_OVERLAP = enums.ImGuiTreeNodeFlags_AllowItemOverlap
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen             # <<<<<<<<<<<<<<
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_NoTreePushOnOpen); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_NO_TREE_PUSH_ON_OPEN, __pyx_t_7) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":119
 * TREE_NODE_ALLOW_ITEM_OVERLAP = enums.ImGuiTreeNodeFlags_AllowItemOverlap
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog             # <<<<<<<<<<<<<<
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_NoAutoOpenOnLog); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_NO_AUTO_OPEN_ON_LOG, __pyx_t_7) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":120
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen             # <<<<<<<<<<<<<<
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_DefaultOpen); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_DEFAULT_OPEN, __pyx_t_7) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":121
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick             # <<<<<<<<<<<<<<
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_OpenOnDoubleClick); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_OPEN_ON_DOUBLE_CLICK, __pyx_t_7) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":122
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow             # <<<<<<<<<<<<<<
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_OpenOnArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_OPEN_ON_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":123
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf             # <<<<<<<<<<<<<<
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet
 * TREE_NODE_FRAME_PADDING = enums.ImGuiTreeNodeFlags_FramePadding
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Leaf); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_LEAF, __pyx_t_7) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":124
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet             # <<<<<<<<<<<<<<
 * TREE_NODE_FRAME_PADDING = enums.ImGuiTreeNodeFlags_FramePadding
 * TREE_NODE_COLLAPSING_HEADER = enums.ImGuiTreeNodeFlags_CollapsingHeader
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Bullet); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_BULLET, __pyx_t_7) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":125
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet
 * TREE_NODE_FRAME_PADDING = enums.ImGuiTreeNodeFlags_FramePadding             # <<<<<<<<<<<<<<
 * TREE_NODE_COLLAPSING_HEADER = enums.ImGuiTreeNodeFlags_CollapsingHeader
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_FramePadding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_FRAME_PADDING, __pyx_t_7) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":126
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet
 * TREE_NODE_FRAME_PADDING = enums.ImGuiTreeNodeFlags_FramePadding
 * TREE_NODE_COLLAPSING_HEADER = enums.ImGuiTreeNodeFlags_CollapsingHeader             # <<<<<<<<<<<<<<
 * 
 * # ==== Selectable flags enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_CollapsingHeader); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_COLLAPSING_HEADER, __pyx_t_7) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":129
 * 
 * # ==== Selectable flags enum redefines ====
 * SELECTABLE_DONT_CLOSE_POPUPS = enums.ImGuiSelectableFlags_DontClosePopups             # <<<<<<<<<<<<<<
 * SELECTABLE_SPAN_ALL_COLUMNS = enums.ImGuiSelectableFlags_SpanAllColumns
 * SELECTABLE_ALLOW_DOUBLE_CLICK = enums.ImGuiSelectableFlags_AllowDoubleClick
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_DontClosePopups); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_DONT_CLOSE_POPUPS, __pyx_t_7) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":130
 * # ==== Selectable flags enum redefines ====
 * SELECTABLE_DONT_CLOSE_POPUPS = enums.ImGuiSelectableFlags_DontClosePopups
 * SELECTABLE_SPAN_ALL_COLUMNS = enums.ImGuiSelectableFlags_SpanAllColumns             # <<<<<<<<<<<<<<
 * SELECTABLE_ALLOW_DOUBLE_CLICK = enums.ImGuiSelectableFlags_AllowDoubleClick
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_SpanAllColumns); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_SPAN_ALL_COLUMNS, __pyx_t_7) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":131
 * SELECTABLE_DONT_CLOSE_POPUPS = enums.ImGuiSelectableFlags_DontClosePopups
 * SELECTABLE_SPAN_ALL_COLUMNS = enums.ImGuiSelectableFlags_SpanAllColumns
 * SELECTABLE_ALLOW_DOUBLE_CLICK = enums.ImGuiSelectableFlags_AllowDoubleClick             # <<<<<<<<<<<<<<
 * 
 * # ==== Combo flags enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_AllowDoubleClick); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_ALLOW_DOUBLE_CLICK, __pyx_t_7) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":135
 * # ==== Combo flags enum redefines ====
 * 
 * COMBO_POPUP_ALIGN_LEFT = enums.ImGuiComboFlags_PopupAlignLeft             # <<<<<<<<<<<<<<
 * COMBO_HEIGHT_SMALL = enums.ImGuiComboFlags_HeightSmall
 * COMBO_HEIGHT_REGULAR = enums.ImGuiComboFlags_HeightRegular
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_PopupAlignLeft); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_POPUP_ALIGN_LEFT, __pyx_t_7) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":136
 * 
 * COMBO_POPUP_ALIGN_LEFT = enums.ImGuiComboFlags_PopupAlignLeft
 * COMBO_HEIGHT_SMALL = enums.ImGuiComboFlags_HeightSmall             # <<<<<<<<<<<<<<
 * COMBO_HEIGHT_REGULAR = enums.ImGuiComboFlags_HeightRegular
 * COMBO_HEIGHT_LARGE = enums.ImGuiComboFlags_HeightLarge
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightSmall); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_HEIGHT_SMALL, __pyx_t_7) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":137
 * COMBO_POPUP_ALIGN_LEFT = enums.ImGuiComboFlags_PopupAlignLeft
 * COMBO_HEIGHT_SMALL = enums.ImGuiComboFlags_HeightSmall
 * COMBO_HEIGHT_REGULAR = enums.ImGuiComboFlags_HeightRegular             # <<<<<<<<<<<<<<
 * COMBO_HEIGHT_LARGE = enums.ImGuiComboFlags_HeightLarge
 * COMBO_HEIGHT_LARGEST = enums.ImGuiComboFlags_HeightLargest
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightRegular); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_HEIGHT_REGULAR, __pyx_t_7) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":138
 * COMBO_HEIGHT_SMALL = enums.ImGuiComboFlags_HeightSmall
 * COMBO_HEIGHT_REGULAR = enums.ImGuiComboFlags_HeightRegular
 * COMBO_HEIGHT_LARGE = enums.ImGuiComboFlags_HeightLarge             # <<<<<<<<<<<<<<
 * COMBO_HEIGHT_LARGEST = enums.ImGuiComboFlags_HeightLargest
 * COMBO_NO_ARROW_BUTTON = enums.ImGuiComboFlags_NoArrowButton
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightLarge); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_HEIGHT_LARGE, __pyx_t_7) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":139
 * COMBO_HEIGHT_REGULAR = enums.ImGuiComboFlags_HeightRegular
 * COMBO_HEIGHT_LARGE = enums.ImGuiComboFlags_HeightLarge
 * COMBO_HEIGHT_LARGEST = enums.ImGuiComboFlags_HeightLargest             # <<<<<<<<<<<<<<
 * COMBO_NO_ARROW_BUTTON = enums.ImGuiComboFlags_NoArrowButton
 * COMBO_NO_PREVIEW = enums.ImGuiComboFlags_NoPreview
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightLargest); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_HEIGHT_LARGEST, __pyx_t_7) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":140
 * COMBO_HEIGHT_LARGE = enums.ImGuiComboFlags_HeightLarge
 * COMBO_HEIGHT_LARGEST = enums.ImGuiComboFlags_HeightLargest
 * COMBO_NO_ARROW_BUTTON = enums.ImGuiComboFlags_NoArrowButton             # <<<<<<<<<<<<<<
 * COMBO_NO_PREVIEW = enums.ImGuiComboFlags_NoPreview
 * COMBO_HEIGHT_MASK = enums.ImGuiComboFlags_HeightMask_
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_NoArrowButton); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_NO_ARROW_BUTTON, __pyx_t_7) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":141
 * COMBO_HEIGHT_LARGEST = enums.ImGuiComboFlags_HeightLargest
 * COMBO_NO_ARROW_BUTTON = enums.ImGuiComboFlags_NoArrowButton
 * COMBO_NO_PREVIEW = enums.ImGuiComboFlags_NoPreview             # <<<<<<<<<<<<<<
 * COMBO_HEIGHT_MASK = enums.ImGuiComboFlags_HeightMask_
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_NoPreview); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_NO_PREVIEW, __pyx_t_7) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":142
 * COMBO_NO_ARROW_BUTTON = enums.ImGuiComboFlags_NoArrowButton
 * COMBO_NO_PREVIEW = enums.ImGuiComboFlags_NoPreview
 * COMBO_HEIGHT_MASK = enums.ImGuiComboFlags_HeightMask_             # <<<<<<<<<<<<<<
 * 
 * # === Focus flag enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightMask_); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMBO_HEIGHT_MASK, __pyx_t_7) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":145
 * 
 * # === Focus flag enum redefines ====
 * FOCUS_CHILD_WINDOWS = enums.ImGuiFocusedFlags_ChildWindows             # <<<<<<<<<<<<<<
 * FOCUS_ROOT_WINDOW = enums.ImGuiFocusedFlags_RootWindow
 * FOCUS_ANY_WINDOW = enums.ImGuiFocusedFlags_AnyWindow
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_ChildWindows); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FOCUS_CHILD_WINDOWS, __pyx_t_7) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":146
 * # === Focus flag enum redefines ====
 * FOCUS_CHILD_WINDOWS = enums.ImGuiFocusedFlags_ChildWindows
 * FOCUS_ROOT_WINDOW = enums.ImGuiFocusedFlags_RootWindow             # <<<<<<<<<<<<<<
 * FOCUS_ANY_WINDOW = enums.ImGuiFocusedFlags_AnyWindow
 * FOCUS_ROOT_AND_CHILD_WINDOWS = enums.ImGuiFocusedFlags_RootAndChildWindows
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_RootWindow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FOCUS_ROOT_WINDOW, __pyx_t_7) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":147
 * FOCUS_CHILD_WINDOWS = enums.ImGuiFocusedFlags_ChildWindows
 * FOCUS_ROOT_WINDOW = enums.ImGuiFocusedFlags_RootWindow
 * FOCUS_ANY_WINDOW = enums.ImGuiFocusedFlags_AnyWindow             # <<<<<<<<<<<<<<
 * FOCUS_ROOT_AND_CHILD_WINDOWS = enums.ImGuiFocusedFlags_RootAndChildWindows
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_AnyWindow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FOCUS_ANY_WINDOW, __pyx_t_7) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":148
 * FOCUS_ROOT_WINDOW = enums.ImGuiFocusedFlags_RootWindow
 * FOCUS_ANY_WINDOW = enums.ImGuiFocusedFlags_AnyWindow
 * FOCUS_ROOT_AND_CHILD_WINDOWS = enums.ImGuiFocusedFlags_RootAndChildWindows             # <<<<<<<<<<<<<<
 * 
 * # === Hovered flag enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_RootAndChildWindows); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FOCUS_ROOT_AND_CHILD_WINDOWS, __pyx_t_7) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":151
 * 
 * # === Hovered flag enum redefines ====
 * HOVERED_NONE = enums.ImGuiHoveredFlags_None             # <<<<<<<<<<<<<<
 * HOVERED_CHILD_WINDOWS = enums.ImGuiHoveredFlags_ChildWindows
 * HOVERED_ROOT_WINDOW = enums.ImGuiHoveredFlags_RootWindow
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_NONE, __pyx_t_7) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":152
 * # === Hovered flag enum redefines ====
 * HOVERED_NONE = enums.ImGuiHoveredFlags_None
 * HOVERED_CHILD_WINDOWS = enums.ImGuiHoveredFlags_ChildWindows             # <<<<<<<<<<<<<<
 * HOVERED_ROOT_WINDOW = enums.ImGuiHoveredFlags_RootWindow
 * HOVERED_ANY_WINDOW = enums.ImGuiHoveredFlags_AnyWindow
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_ChildWindows); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_CHILD_WINDOWS, __pyx_t_7) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":153
 * HOVERED_NONE = enums.ImGuiHoveredFlags_None
 * HOVERED_CHILD_WINDOWS = enums.ImGuiHoveredFlags_ChildWindows
 * HOVERED_ROOT_WINDOW = enums.ImGuiHoveredFlags_RootWindow             # <<<<<<<<<<<<<<
 * HOVERED_ANY_WINDOW = enums.ImGuiHoveredFlags_AnyWindow
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_POPUP = enums.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_RootWindow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_ROOT_WINDOW, __pyx_t_7) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":154
 * HOVERED_CHILD_WINDOWS = enums.ImGuiHoveredFlags_ChildWindows
 * HOVERED_ROOT_WINDOW = enums.ImGuiHoveredFlags_RootWindow
 * HOVERED_ANY_WINDOW = enums.ImGuiHoveredFlags_AnyWindow             # <<<<<<<<<<<<<<
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_POPUP = enums.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = enums.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AnyWindow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_ANY_WINDOW, __pyx_t_7) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":155
 * HOVERED_ROOT_WINDOW = enums.ImGuiHoveredFlags_RootWindow
 * HOVERED_ANY_WINDOW = enums.ImGuiHoveredFlags_AnyWindow
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_POPUP = enums.ImGuiHoveredFlags_AllowWhenBlockedByPopup             # <<<<<<<<<<<<<<
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = enums.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 * HOVERED_ALLOW_WHEN_OVERLAPPED = enums.ImGuiHoveredFlags_AllowWhenOverlapped
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AllowWhenBlockedByPopup); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_PO, __pyx_t_7) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":156
 * HOVERED_ANY_WINDOW = enums.ImGuiHoveredFlags_AnyWindow
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_POPUP = enums.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = enums.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem             # <<<<<<<<<<<<<<
 * HOVERED_ALLOW_WHEN_OVERLAPPED = enums.ImGuiHoveredFlags_AllowWhenOverlapped
 * HOVERED_RECT_ONLY = enums.ImGuiHoveredFlags_RectOnly
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_AC, __pyx_t_7) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":157
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_POPUP = enums.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = enums.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 * HOVERED_ALLOW_WHEN_OVERLAPPED = enums.ImGuiHoveredFlags_AllowWhenOverlapped             # <<<<<<<<<<<<<<
 * HOVERED_RECT_ONLY = enums.ImGuiHoveredFlags_RectOnly
 * HOVERED_ROOT_AND_CHILD_WINDOWS = enums.ImGuiHoveredFlags_RootAndChildWindows
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AllowWhenOverlapped); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_ALLOW_WHEN_OVERLAPPED, __pyx_t_7) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":158
 * HOVERED_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = enums.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 * HOVERED_ALLOW_WHEN_OVERLAPPED = enums.ImGuiHoveredFlags_AllowWhenOverlapped
 * HOVERED_RECT_ONLY = enums.ImGuiHoveredFlags_RectOnly             # <<<<<<<<<<<<<<
 * HOVERED_ROOT_AND_CHILD_WINDOWS = enums.ImGuiHoveredFlags_RootAndChildWindows
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_RectOnly); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_RECT_ONLY, __pyx_t_7) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":159
 * HOVERED_ALLOW_WHEN_OVERLAPPED = enums.ImGuiHoveredFlags_AllowWhenOverlapped
 * HOVERED_RECT_ONLY = enums.ImGuiHoveredFlags_RectOnly
 * HOVERED_ROOT_AND_CHILD_WINDOWS = enums.ImGuiHoveredFlags_RootAndChildWindows             # <<<<<<<<<<<<<<
 * 
 * # === Drag Drop flag enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_RootAndChildWindows); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HOVERED_ROOT_AND_CHILD_WINDOWS, __pyx_t_7) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":162
 * 
 * # === Drag Drop flag enum redefines ====
 * DRAG_DROP_SOURCE_NO_PREVIEW_TOOLTIP = enums.ImGuiDragDropFlags_SourceNoPreviewTooltip             # <<<<<<<<<<<<<<
 * DRAG_DROP_SOURCE_NO_DISABLE_HOVER = enums.ImGuiDragDropFlags_SourceNoDisableHover
 * DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN_OTHERS = enums.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceNoPreviewTooltip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_SOURCE_NO_PREVIEW_TOOL, __pyx_t_7) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":163
 * # === Drag Drop flag enum redefines ====
 * DRAG_DROP_SOURCE_NO_PREVIEW_TOOLTIP = enums.ImGuiDragDropFlags_SourceNoPreviewTooltip
 * DRAG_DROP_SOURCE_NO_DISABLE_HOVER = enums.ImGuiDragDropFlags_SourceNoDisableHover             # <<<<<<<<<<<<<<
 * DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN_OTHERS = enums.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 * DRAG_DROP_SOURCE_ALLOW_NULL_ID = enums.ImGuiDragDropFlags_SourceAllowNullID
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceNoDisableHover); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_SOURCE_NO_DISABLE_HOVE, __pyx_t_7) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":164
 * DRAG_DROP_SOURCE_NO_PREVIEW_TOOLTIP = enums.ImGuiDragDropFlags_SourceNoPreviewTooltip
 * DRAG_DROP_SOURCE_NO_DISABLE_HOVER = enums.ImGuiDragDropFlags_SourceNoDisableHover
 * DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN_OTHERS = enums.ImGuiDragDropFlags_SourceNoHoldToOpenOthers             # <<<<<<<<<<<<<<
 * DRAG_DROP_SOURCE_ALLOW_NULL_ID = enums.ImGuiDragDropFlags_SourceAllowNullID
 * DRAG_DROP_SOURCE_EXTERN = enums.ImGuiDragDropFlags_SourceExtern
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceNoHoldToOpenOthers); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN, __pyx_t_7) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":165
 * DRAG_DROP_SOURCE_NO_DISABLE_HOVER = enums.ImGuiDragDropFlags_SourceNoDisableHover
 * DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN_OTHERS = enums.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 * DRAG_DROP_SOURCE_ALLOW_NULL_ID = enums.ImGuiDragDropFlags_SourceAllowNullID             # <<<<<<<<<<<<<<
 * DRAG_DROP_SOURCE_EXTERN = enums.ImGuiDragDropFlags_SourceExtern
 * DRAG_DROP_SOURCE_AUTO_EXPIRE_PAYLOAD = enums.ImGuiDragDropFlags_SourceAutoExpirePayload
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceAllowNullID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_SOURCE_ALLOW_NULL_ID, __pyx_t_7) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":166
 * DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN_OTHERS = enums.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 * DRAG_DROP_SOURCE_ALLOW_NULL_ID = enums.ImGuiDragDropFlags_SourceAllowNullID
 * DRAG_DROP_SOURCE_EXTERN = enums.ImGuiDragDropFlags_SourceExtern             # <<<<<<<<<<<<<<
 * DRAG_DROP_SOURCE_AUTO_EXPIRE_PAYLOAD = enums.ImGuiDragDropFlags_SourceAutoExpirePayload
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceExtern); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_SOURCE_EXTERN, __pyx_t_7) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":167
 * DRAG_DROP_SOURCE_ALLOW_NULL_ID = enums.ImGuiDragDropFlags_SourceAllowNullID
 * DRAG_DROP_SOURCE_EXTERN = enums.ImGuiDragDropFlags_SourceExtern
 * DRAG_DROP_SOURCE_AUTO_EXPIRE_PAYLOAD = enums.ImGuiDragDropFlags_SourceAutoExpirePayload             # <<<<<<<<<<<<<<
 * 
 * # === Accept Drag Drop Payload flag enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceAutoExpirePayload); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_SOURCE_AUTO_EXPIRE_PAY, __pyx_t_7) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":170
 * 
 * # === Accept Drag Drop Payload flag enum redefines ====
 * DRAG_DROP_ACCEPT_BEFORE_DELIVERY = enums.ImGuiDragDropFlags_AcceptBeforeDelivery             # <<<<<<<<<<<<<<
 * DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT_RECT = enums.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
 * DRAG_DROP_ACCEPT_NO_PREVIEW_TOOLTIP = enums.ImGuiDragDropFlags_AcceptNoPreviewTooltip
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptBeforeDelivery); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_ACCEPT_BEFORE_DELIVERY, __pyx_t_7) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":171
 * # === Accept Drag Drop Payload flag enum redefines ====
 * DRAG_DROP_ACCEPT_BEFORE_DELIVERY = enums.ImGuiDragDropFlags_AcceptBeforeDelivery
 * DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT_RECT = enums.ImGuiDragDropFlags_AcceptNoDrawDefaultRect             # <<<<<<<<<<<<<<
 * DRAG_DROP_ACCEPT_NO_PREVIEW_TOOLTIP = enums.ImGuiDragDropFlags_AcceptNoPreviewTooltip
 * DRAG_DROP_ACCEPT_PEEK_ONLY = enums.ImGuiDragDropFlags_AcceptPeekOnly
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptNoDrawDefaultRect); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT, __pyx_t_7) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":172
 * DRAG_DROP_ACCEPT_BEFORE_DELIVERY = enums.ImGuiDragDropFlags_AcceptBeforeDelivery
 * DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT_RECT = enums.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
 * DRAG_DROP_ACCEPT_NO_PREVIEW_TOOLTIP = enums.ImGuiDragDropFlags_AcceptNoPreviewTooltip             # <<<<<<<<<<<<<<
 * DRAG_DROP_ACCEPT_PEEK_ONLY = enums.ImGuiDragDropFlags_AcceptPeekOnly
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptNoPreviewTooltip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_ACCEPT_NO_PREVIEW_TOOL, __pyx_t_7) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":173
 * DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT_RECT = enums.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
 * DRAG_DROP_ACCEPT_NO_PREVIEW_TOOLTIP = enums.ImGuiDragDropFlags_AcceptNoPreviewTooltip
 * DRAG_DROP_ACCEPT_PEEK_ONLY = enums.ImGuiDragDropFlags_AcceptPeekOnly             # <<<<<<<<<<<<<<
 * 
 * # === Cardinal Direction enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptPeekOnly); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DRAG_DROP_ACCEPT_PEEK_ONLY, __pyx_t_7) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":176
 * 
 * # === Cardinal Direction enum redefines ====
 * DIRECTION_NONE = enums.ImGuiDir_None             # <<<<<<<<<<<<<<
 * DIRECTION_LEFT = enums.ImGuiDir_Left
 * DIRECTION_RIGHT = enums.ImGuiDir_Right
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIRECTION_NONE, __pyx_t_7) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":177
 * # === Cardinal Direction enum redefines ====
 * DIRECTION_NONE = enums.ImGuiDir_None
 * DIRECTION_LEFT = enums.ImGuiDir_Left             # <<<<<<<<<<<<<<
 * DIRECTION_RIGHT = enums.ImGuiDir_Right
 * DIRECTION_UP = enums.ImGuiDir_Up
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Left); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIRECTION_LEFT, __pyx_t_7) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":178
 * DIRECTION_NONE = enums.ImGuiDir_None
 * DIRECTION_LEFT = enums.ImGuiDir_Left
 * DIRECTION_RIGHT = enums.ImGuiDir_Right             # <<<<<<<<<<<<<<
 * DIRECTION_UP = enums.ImGuiDir_Up
 * DIRECTION_DOWN = enums.ImGuiDir_Down
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Right); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIRECTION_RIGHT, __pyx_t_7) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":179
 * DIRECTION_LEFT = enums.ImGuiDir_Left
 * DIRECTION_RIGHT = enums.ImGuiDir_Right
 * DIRECTION_UP = enums.ImGuiDir_Up             # <<<<<<<<<<<<<<
 * DIRECTION_DOWN = enums.ImGuiDir_Down
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Up); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIRECTION_UP, __pyx_t_7) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":180
 * DIRECTION_RIGHT = enums.ImGuiDir_Right
 * DIRECTION_UP = enums.ImGuiDir_Up
 * DIRECTION_DOWN = enums.ImGuiDir_Down             # <<<<<<<<<<<<<<
 * 
 * # ==== Mouse Cursors ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Down); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIRECTION_DOWN, __pyx_t_7) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":183
 * 
 * # ==== Mouse Cursors ====
 * MOUSE_CURSOR_NONE = enums.ImGuiMouseCursor_None             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_ARROW = enums.ImGuiMouseCursor_Arrow
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_NONE, __pyx_t_7) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":184
 * # ==== Mouse Cursors ====
 * MOUSE_CURSOR_NONE = enums.ImGuiMouseCursor_None
 * MOUSE_CURSOR_ARROW = enums.ImGuiMouseCursor_Arrow             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput
 * MOUSE_CURSOR_RESIZE_ALL = enums.ImGuiMouseCursor_ResizeAll
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_Arrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":185
 * MOUSE_CURSOR_NONE = enums.ImGuiMouseCursor_None
 * MOUSE_CURSOR_ARROW = enums.ImGuiMouseCursor_Arrow
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_ALL = enums.ImGuiMouseCursor_ResizeAll
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_TextInput); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_TEXT_INPUT, __pyx_t_7) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":186
 * MOUSE_CURSOR_ARROW = enums.ImGuiMouseCursor_Arrow
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput
 * MOUSE_CURSOR_RESIZE_ALL = enums.ImGuiMouseCursor_ResizeAll             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeAll); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_ALL, __pyx_t_7) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":187
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput
 * MOUSE_CURSOR_RESIZE_ALL = enums.ImGuiMouseCursor_ResizeAll
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNS); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_NS, __pyx_t_7) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":188
 * MOUSE_CURSOR_RESIZE_ALL = enums.ImGuiMouseCursor_ResizeAll
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW
 * MOUSE_CURSOR_RESIZE_NWSE = enums.ImGuiMouseCursor_ResizeNWSE
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeEW); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_EW, __pyx_t_7) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":189
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_NWSE = enums.ImGuiMouseCursor_ResizeNWSE
 * MOUSE_CURSOR_HAND = enums.ImGuiMouseCursor_Hand
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNESW); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_NESW, __pyx_t_7) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":190
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW
 * MOUSE_CURSOR_RESIZE_NWSE = enums.ImGuiMouseCursor_ResizeNWSE             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_HAND = enums.ImGuiMouseCursor_Hand
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNWSE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_NWSE, __pyx_t_7) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":191
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW
 * MOUSE_CURSOR_RESIZE_NWSE = enums.ImGuiMouseCursor_ResizeNWSE
 * MOUSE_CURSOR_HAND = enums.ImGuiMouseCursor_Hand             # <<<<<<<<<<<<<<
 * 
 * # ==== Color identifiers for styling ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_Hand); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_HAND, __pyx_t_7) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":194
 * 
 * # ==== Color identifiers for styling ====
 * COLOR_TEXT = enums.ImGuiCol_Text             # <<<<<<<<<<<<<<
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TEXT, __pyx_t_7) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":195
 * # ==== Color identifiers for styling ====
 * COLOR_TEXT = enums.ImGuiCol_Text
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled             # <<<<<<<<<<<<<<
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 * COLOR_CHILD_BACKGROUND = enums.ImGuiCol_ChildBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TextDisabled); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TEXT_DISABLED, __pyx_t_7) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":196
 * COLOR_TEXT = enums.ImGuiCol_Text
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg             # <<<<<<<<<<<<<<
 * COLOR_CHILD_BACKGROUND = enums.ImGuiCol_ChildBg
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_WindowBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_WINDOW_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":197
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 * COLOR_CHILD_BACKGROUND = enums.ImGuiCol_ChildBg             # <<<<<<<<<<<<<<
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 * COLOR_BORDER = enums.ImGuiCol_Border
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ChildBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_CHILD_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":198
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 * COLOR_CHILD_BACKGROUND = enums.ImGuiCol_ChildBg
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg             # <<<<<<<<<<<<<<
 * COLOR_BORDER = enums.ImGuiCol_Border
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PopupBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_POPUP_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":199
 * COLOR_CHILD_BACKGROUND = enums.ImGuiCol_ChildBg
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 * COLOR_BORDER = enums.ImGuiCol_Border             # <<<<<<<<<<<<<<
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Border); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BORDER, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":200
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 * COLOR_BORDER = enums.ImGuiCol_Border
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow             # <<<<<<<<<<<<<<
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_BorderShadow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BORDER_SHADOW, __pyx_t_7) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":201
 * COLOR_BORDER = enums.ImGuiCol_Border
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg             # <<<<<<<<<<<<<<
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_FRAME_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":202
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered             # <<<<<<<<<<<<<<
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBgHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_FRAME_BACKGROUND_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":203
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive             # <<<<<<<<<<<<<<
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBgActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_FRAME_BACKGROUND_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":204
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg             # <<<<<<<<<<<<<<
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TITLE_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":205
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive             # <<<<<<<<<<<<<<
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBgActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TITLE_BACKGROUND_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":206
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed             # <<<<<<<<<<<<<<
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBgCollapsed); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TITLE_BACKGROUND_COLLAPSED, __pyx_t_7) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":207
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_MenuBarBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_MENUBAR_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":208
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":209
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrab); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_GRAB, __pyx_t_7) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":210
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrabHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_GRAB_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":211
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive             # <<<<<<<<<<<<<<
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrabActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_GRAB_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":212
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark             # <<<<<<<<<<<<<<
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_CheckMark); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_CHECK_MARK, __pyx_t_7) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":213
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab             # <<<<<<<<<<<<<<
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 * COLOR_BUTTON = enums.ImGuiCol_Button
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SliderGrab); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SLIDER_GRAB, __pyx_t_7) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":214
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive             # <<<<<<<<<<<<<<
 * COLOR_BUTTON = enums.ImGuiCol_Button
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SliderGrabActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SLIDER_GRAB_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":215
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 * COLOR_BUTTON = enums.ImGuiCol_Button             # <<<<<<<<<<<<<<
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Button); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BUTTON, __pyx_t_7) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":216
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 * COLOR_BUTTON = enums.ImGuiCol_Button
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered             # <<<<<<<<<<<<<<
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 * COLOR_HEADER = enums.ImGuiCol_Header
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ButtonHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BUTTON_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":217
 * COLOR_BUTTON = enums.ImGuiCol_Button
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive             # <<<<<<<<<<<<<<
 * COLOR_HEADER = enums.ImGuiCol_Header
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ButtonActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BUTTON_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":218
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 * COLOR_HEADER = enums.ImGuiCol_Header             # <<<<<<<<<<<<<<
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Header); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_HEADER, __pyx_t_7) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":219
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 * COLOR_HEADER = enums.ImGuiCol_Header
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered             # <<<<<<<<<<<<<<
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 * COLOR_SEPARATOR = enums.ImGuiCol_Separator
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_HeaderHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_HEADER_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":220
 * COLOR_HEADER = enums.ImGuiCol_Header
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive             # <<<<<<<<<<<<<<
 * COLOR_SEPARATOR = enums.ImGuiCol_Separator
 * COLOR_SEPARATOR_HOVERED = enums.ImGuiCol_SeparatorHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_HeaderActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_HEADER_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":221
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 * COLOR_SEPARATOR = enums.ImGuiCol_Separator             # <<<<<<<<<<<<<<
 * COLOR_SEPARATOR_HOVERED = enums.ImGuiCol_SeparatorHovered
 * COLOR_SEPARATOR_ACTIVE = enums.ImGuiCol_SeparatorActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Separator); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SEPARATOR, __pyx_t_7) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":222
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 * COLOR_SEPARATOR = enums.ImGuiCol_Separator
 * COLOR_SEPARATOR_HOVERED = enums.ImGuiCol_SeparatorHovered             # <<<<<<<<<<<<<<
 * COLOR_SEPARATOR_ACTIVE = enums.ImGuiCol_SeparatorActive
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SeparatorHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SEPARATOR_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":223
 * COLOR_SEPARATOR = enums.ImGuiCol_Separator
 * COLOR_SEPARATOR_HOVERED = enums.ImGuiCol_SeparatorHovered
 * COLOR_SEPARATOR_ACTIVE = enums.ImGuiCol_SeparatorActive             # <<<<<<<<<<<<<<
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SeparatorActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SEPARATOR_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":224
 * COLOR_SEPARATOR_HOVERED = enums.ImGuiCol_SeparatorHovered
 * COLOR_SEPARATOR_ACTIVE = enums.ImGuiCol_SeparatorActive
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip             # <<<<<<<<<<<<<<
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGrip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_RESIZE_GRIP, __pyx_t_7) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":225
 * COLOR_SEPARATOR_ACTIVE = enums.ImGuiCol_SeparatorActive
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered             # <<<<<<<<<<<<<<
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGripHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_RESIZE_GRIP_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":226
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive             # <<<<<<<<<<<<<<
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGripActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_RESIZE_GRIP_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":227
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines             # <<<<<<<<<<<<<<
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotLines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_LINES, __pyx_t_7) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":228
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered             # <<<<<<<<<<<<<<
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotLinesHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_LINES_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":229
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram             # <<<<<<<<<<<<<<
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotHistogram); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_HISTOGRAM, __pyx_t_7) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":230
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered             # <<<<<<<<<<<<<<
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 * COLOR_DRAG_DROP_TARGET = enums.ImGuiCol_DragDropTarget
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotHistogramHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_HISTOGRAM_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":231
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg             # <<<<<<<<<<<<<<
 * COLOR_DRAG_DROP_TARGET = enums.ImGuiCol_DragDropTarget
 * COLOR_NAV_HIGHLIGHT = enums.ImGuiCol_NavHighlight
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TextSelectedBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TEXT_SELECTED_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":232
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 * COLOR_DRAG_DROP_TARGET = enums.ImGuiCol_DragDropTarget             # <<<<<<<<<<<<<<
 * COLOR_NAV_HIGHLIGHT = enums.ImGuiCol_NavHighlight
 * COLOR_NAV_WINDOWING_HIGHLIGHT = enums.ImGuiCol_NavWindowingHighlight
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_DragDropTarget); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_DRAG_DROP_TARGET, __pyx_t_7) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":233
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 * COLOR_DRAG_DROP_TARGET = enums.ImGuiCol_DragDropTarget
 * COLOR_NAV_HIGHLIGHT = enums.ImGuiCol_NavHighlight             # <<<<<<<<<<<<<<
 * COLOR_NAV_WINDOWING_HIGHLIGHT = enums.ImGuiCol_NavWindowingHighlight
 * COLOR_NAV_WINDOWING_DIM_BACKGROUND = enums.ImGuiCol_NavWindowingDimBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_NavHighlight); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_NAV_HIGHLIGHT, __pyx_t_7) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":234
 * COLOR_DRAG_DROP_TARGET = enums.ImGuiCol_DragDropTarget
 * COLOR_NAV_HIGHLIGHT = enums.ImGuiCol_NavHighlight
 * COLOR_NAV_WINDOWING_HIGHLIGHT = enums.ImGuiCol_NavWindowingHighlight             # <<<<<<<<<<<<<<
 * COLOR_NAV_WINDOWING_DIM_BACKGROUND = enums.ImGuiCol_NavWindowingDimBg
 * COLOR_MODAL_WINDOW_DIM_BACKGROUND = enums.ImGuiCol_ModalWindowDimBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_NavWindowingHighlight); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_NAV_WINDOWING_HIGHLIGHT, __pyx_t_7) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":235
 * COLOR_NAV_HIGHLIGHT = enums.ImGuiCol_NavHighlight
 * COLOR_NAV_WINDOWING_HIGHLIGHT = enums.ImGuiCol_NavWindowingHighlight
 * COLOR_NAV_WINDOWING_DIM_BACKGROUND = enums.ImGuiCol_NavWindowingDimBg             # <<<<<<<<<<<<<<
 * COLOR_MODAL_WINDOW_DIM_BACKGROUND = enums.ImGuiCol_ModalWindowDimBg
 * COLOR_COUNT = enums.ImGuiCol_COUNT
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_NavWindowingDimBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_NAV_WINDOWING_DIM_BACKGROU, __pyx_t_7) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":236
 * COLOR_NAV_WINDOWING_HIGHLIGHT = enums.ImGuiCol_NavWindowingHighlight
 * COLOR_NAV_WINDOWING_DIM_BACKGROUND = enums.ImGuiCol_NavWindowingDimBg
 * COLOR_MODAL_WINDOW_DIM_BACKGROUND = enums.ImGuiCol_ModalWindowDimBg             # <<<<<<<<<<<<<<
 * COLOR_COUNT = enums.ImGuiCol_COUNT
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ModalWindowDimBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_MODAL_WINDOW_DIM_BACKGROUN, __pyx_t_7) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":237
 * COLOR_NAV_WINDOWING_DIM_BACKGROUND = enums.ImGuiCol_NavWindowingDimBg
 * COLOR_MODAL_WINDOW_DIM_BACKGROUND = enums.ImGuiCol_ModalWindowDimBg
 * COLOR_COUNT = enums.ImGuiCol_COUNT             # <<<<<<<<<<<<<<
 * 
 * # ==== Text input flags ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_COUNT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_COUNT, __pyx_t_7) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":240
 * 
 * # ==== Text input flags ====
 * INPUT_TEXT_CHARS_DECIMAL = enums.ImGuiInputTextFlags_CharsDecimal             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsDecimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_DECIMAL, __pyx_t_7) < 0) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":241
 * # ==== Text input flags ====
 * INPUT_TEXT_CHARS_DECIMAL = enums.ImGuiInputTextFlags_CharsDecimal
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsHexadecimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_HEXADECIMAL, __pyx_t_7) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":242
 * INPUT_TEXT_CHARS_DECIMAL = enums.ImGuiInputTextFlags_CharsDecimal
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsUppercase); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_UPPERCASE, __pyx_t_7) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":243
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank             # <<<<<<<<<<<<<<
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsNoBlank); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_NO_BLANK, __pyx_t_7) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":244
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll             # <<<<<<<<<<<<<<
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AutoSelectAll); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_AUTO_SELECT_ALL, __pyx_t_7) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":245
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_EnterReturnsTrue); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_ENTER_RETURNS_TRUE, __pyx_t_7) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":246
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackCompletion); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_COMPLETION, __pyx_t_7) < 0) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":247
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackHistory); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_HISTORY, __pyx_t_7) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":248
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackAlways); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_ALWAYS, __pyx_t_7) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":249
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter             # <<<<<<<<<<<<<<
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackCharFilter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_CHAR_FILTER, __pyx_t_7) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":250
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AllowTabInput); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_ALLOW_TAB_INPUT, __pyx_t_7) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":251
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine             # <<<<<<<<<<<<<<
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CtrlEnterForNewLine); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI, __pyx_t_7) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":252
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll             # <<<<<<<<<<<<<<
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_NoHorizontalScroll); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_NO_HORIZONTAL_SCROLL, __pyx_t_7) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":253
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode             # <<<<<<<<<<<<<<
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly
 * INPUT_TEXT_PASSWORD = enums.ImGuiInputTextFlags_Password
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AlwaysInsertMode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_ALWAYS_INSERT_MODE, __pyx_t_7) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":254
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly             # <<<<<<<<<<<<<<
 * INPUT_TEXT_PASSWORD = enums.ImGuiInputTextFlags_Password
 * INPUT_TEXT_NO_UNDO_REDO = enums.ImGuiInputTextFlags_NoUndoRedo
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ReadOnly); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_READ_ONLY, __pyx_t_7) < 0) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":255
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly
 * INPUT_TEXT_PASSWORD = enums.ImGuiInputTextFlags_Password             # <<<<<<<<<<<<<<
 * INPUT_TEXT_NO_UNDO_REDO = enums.ImGuiInputTextFlags_NoUndoRedo
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_Password); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_PASSWORD, __pyx_t_7) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":256
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly
 * INPUT_TEXT_PASSWORD = enums.ImGuiInputTextFlags_Password
 * INPUT_TEXT_NO_UNDO_REDO = enums.ImGuiInputTextFlags_NoUndoRedo             # <<<<<<<<<<<<<<
 * 
 * # ==== Config Flags ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_NoUndoRedo); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_NO_UNDO_REDO, __pyx_t_7) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":259
 * 
 * # ==== Config Flags ====
 * CONFIG_NAV_ENABLE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableKeyboard             # <<<<<<<<<<<<<<
 * CONFIG_NAV_ENABLE_GAMEPAD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableGamepad
 * CONFIG_NAV_ENABLE_SET_MOUSE_POS = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableSetMousePos
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavEnableKeyboard); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_NAV_ENABLE_KEYBOARD, __pyx_t_7) < 0) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":260
 * # ==== Config Flags ====
 * CONFIG_NAV_ENABLE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableKeyboard
 * CONFIG_NAV_ENABLE_GAMEPAD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableGamepad             # <<<<<<<<<<<<<<
 * CONFIG_NAV_ENABLE_SET_MOUSE_POS = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableSetMousePos
 * CONFIG_NAV_NO_CAPTURE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavNoCaptureKeyboard
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavEnableGamepad); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_NAV_ENABLE_GAMEPAD, __pyx_t_7) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":261
 * CONFIG_NAV_ENABLE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableKeyboard
 * CONFIG_NAV_ENABLE_GAMEPAD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableGamepad
 * CONFIG_NAV_ENABLE_SET_MOUSE_POS = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableSetMousePos             # <<<<<<<<<<<<<<
 * CONFIG_NAV_NO_CAPTURE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavNoCaptureKeyboard
 * CONFIG_NO_MOUSE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouse
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavEnableSetMousePos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_NAV_ENABLE_SET_MOUSE_POS, __pyx_t_7) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":262
 * CONFIG_NAV_ENABLE_GAMEPAD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableGamepad
 * CONFIG_NAV_ENABLE_SET_MOUSE_POS = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableSetMousePos
 * CONFIG_NAV_NO_CAPTURE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavNoCaptureKeyboard             # <<<<<<<<<<<<<<
 * CONFIG_NO_MOUSE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouse
 * CONFIG_NO_MOUSE_CURSOR_CHARGE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouseCursorChange
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavNoCaptureKeyboard); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_NAV_NO_CAPTURE_KEYBOARD, __pyx_t_7) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":263
 * CONFIG_NAV_ENABLE_SET_MOUSE_POS = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavEnableSetMousePos
 * CONFIG_NAV_NO_CAPTURE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavNoCaptureKeyboard
 * CONFIG_NO_MOUSE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouse             # <<<<<<<<<<<<<<
 * CONFIG_NO_MOUSE_CURSOR_CHARGE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouseCursorChange
 * CONFIG_IS_RGB = enums.ImGuiConfigFlags_.ImGuiConfigFlags_IsSRGB
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NoMouse); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_NO_MOUSE, __pyx_t_7) < 0) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":264
 * CONFIG_NAV_NO_CAPTURE_KEYBOARD = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NavNoCaptureKeyboard
 * CONFIG_NO_MOUSE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouse
 * CONFIG_NO_MOUSE_CURSOR_CHARGE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouseCursorChange             # <<<<<<<<<<<<<<
 * CONFIG_IS_RGB = enums.ImGuiConfigFlags_.ImGuiConfigFlags_IsSRGB
 * CONFIG_IS_TOUCH_SCREEN = enums.ImGuiConfigFlags_.ImGuiConfigFlags_IsTouchScreen
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NoMouseCursorChange); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_NO_MOUSE_CURSOR_CHARGE, __pyx_t_7) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":265
 * CONFIG_NO_MOUSE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouse
 * CONFIG_NO_MOUSE_CURSOR_CHARGE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouseCursorChange
 * CONFIG_IS_RGB = enums.ImGuiConfigFlags_.ImGuiConfigFlags_IsSRGB             # <<<<<<<<<<<<<<
 * CONFIG_IS_TOUCH_SCREEN = enums.ImGuiConfigFlags_.ImGuiConfigFlags_IsTouchScreen
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_IsSRGB); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_IS_RGB, __pyx_t_7) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":266
 * CONFIG_NO_MOUSE_CURSOR_CHARGE = enums.ImGuiConfigFlags_.ImGuiConfigFlags_NoMouseCursorChange
 * CONFIG_IS_RGB = enums.ImGuiConfigFlags_.ImGuiConfigFlags_IsSRGB
 * CONFIG_IS_TOUCH_SCREEN = enums.ImGuiConfigFlags_.ImGuiConfigFlags_IsTouchScreen             # <<<<<<<<<<<<<<
 * 
 * # ==== Backend Flags ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_IsTouchScreen); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONFIG_IS_TOUCH_SCREEN, __pyx_t_7) < 0) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":269
 * 
 * # ==== Backend Flags ====
 * BACKEND_HAS_GAMEPAD = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasGamepad             # <<<<<<<<<<<<<<
 * BACKEND_HAS_MOUSE_CURSORS = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasMouseCursors
 * BACKEND_HAS_SET_MOUSE_POS = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasSetMousePos
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_HasGamepad); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BACKEND_HAS_GAMEPAD, __pyx_t_7) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":270
 * # ==== Backend Flags ====
 * BACKEND_HAS_GAMEPAD = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasGamepad
 * BACKEND_HAS_MOUSE_CURSORS = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasMouseCursors             # <<<<<<<<<<<<<<
 * BACKEND_HAS_SET_MOUSE_POS = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasSetMousePos
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_HasMouseCursors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BACKEND_HAS_MOUSE_CURSORS, __pyx_t_7) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":271
 * BACKEND_HAS_GAMEPAD = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasGamepad
 * BACKEND_HAS_MOUSE_CURSORS = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasMouseCursors
 * BACKEND_HAS_SET_MOUSE_POS = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasSetMousePos             # <<<<<<<<<<<<<<
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_HasSetMousePos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BACKEND_HAS_SET_MOUSE_POS, __pyx_t_7) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":273
 * BACKEND_HAS_SET_MOUSE_POS = enums.ImGuiBackendFlags_.ImGuiBackendFlags_HasSetMousePos
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])             # <<<<<<<<<<<<<<
 * Vec4 = namedtuple("Vec4", ['x', 'y', 'z', 'w'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_x);
  __Pyx_GIVEREF(__pyx_n_s_x);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_x);
  __Pyx_INCREF(__pyx_n_s_y);
  __Pyx_GIVEREF(__pyx_n_s_y);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_y);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Vec2);
  __Pyx_GIVEREF(__pyx_n_s_Vec2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Vec2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec2, __pyx_t_1) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":274
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])
 * Vec4 = namedtuple("Vec4", ['x', 'y', 'z', 'w'])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_x);
  __Pyx_GIVEREF(__pyx_n_s_x);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_x);
  __Pyx_INCREF(__pyx_n_s_y);
  __Pyx_GIVEREF(__pyx_n_s_y);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_y);
  __Pyx_INCREF(__pyx_n_s_z);
  __Pyx_GIVEREF(__pyx_n_s_z);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_z);
  __Pyx_INCREF(__pyx_n_s_w);
  __Pyx_GIVEREF(__pyx_n_s_w);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_w);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_Vec4);
  __Pyx_GIVEREF(__pyx_n_s_Vec4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_Vec4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec4, __pyx_t_2) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":871
 * 
 *     @staticmethod
 *     def create():             # <<<<<<<<<<<<<<
 *         return GuiStyle._create()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_8GuiStyle_7create, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5imgui_4core_GuiStyle->tp_dict, __pyx_n_s_create, __pyx_t_2) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5imgui_4core_GuiStyle);

  /* "imgui/core.pyx":870
 *         return other._ptr == self._ptr
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def create():
 *         return GuiStyle._create()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5imgui_4core_GuiStyle, __pyx_n_s_create); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5imgui_4core_GuiStyle->tp_dict, __pyx_n_s_create, __pyx_t_7) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5imgui_4core_GuiStyle);

  /* "imgui/core.pyx":1814
 *         return _cast_ImVec2_tuple(self._ptr.MouseDelta)
 * 
 * _io = None             # <<<<<<<<<<<<<<
 * def get_io():
 *     global _io
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_io, Py_None) < 0) __PYX_ERR(0, 1814, __pyx_L1_error)

  /* "imgui/core.pyx":1815
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_1get_io, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_io, __pyx_t_7) < 0) __PYX_ERR(0, 1815, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1823
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     return GuiStyle.from_ref(cimgui.GetStyle())
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_3get_style, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_style, __pyx_t_7) < 0) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1827
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_5new_frame, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_frame, __pyx_t_7) < 0) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1839
 * 
 * 
 * def end_frame():             # <<<<<<<<<<<<<<
 *     """End a frame.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_7end_frame, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_frame, __pyx_t_7) < 0) __PYX_ERR(0, 1839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1854
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_9render, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_render, __pyx_t_7) < 0) __PYX_ERR(0, 1854, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1862
 *     cimgui.Render()
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_11show_user_guide, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_user_guide, __pyx_t_7) < 0) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1881
 * 
 * 
 * def get_version():             # <<<<<<<<<<<<<<
 *     """Get the version of Dear ImGui.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_13get_version, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_version, __pyx_t_7) < 0) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1892
 * 
 * 
 * def style_colors_dark(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Dark.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_15style_colors_dark, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_style_colors_dark, __pyx_t_7) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1906
 * 
 * 
 * def style_colors_classic(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Classic.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_17style_colors_classic, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_style_colors_classic, __pyx_t_7) < 0) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1921
 * 
 * 
 * def style_colors_light(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Light.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_19style_colors_light, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_style_colors_light, __pyx_t_7) < 0) __PYX_ERR(0, 1921, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1935
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_21show_style_editor, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_style_editor, __pyx_t_7) < 0) __PYX_ERR(0, 1935, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1959
 * 
 * 
 * def show_demo_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_23show_demo_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_demo_window, __pyx_t_7) < 0) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1988
 * 
 * 
 * def show_test_window():             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_25show_test_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_test_window, __pyx_t_7) < 0) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":2005
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_27show_metrics_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_metrics_window, __pyx_t_7) < 0) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":2034
 * 
 * 
 * def show_style_selector(str label):             # <<<<<<<<<<<<<<
 *     return cimgui.ShowStyleSelector(label)
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_29show_style_selector, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_style_selector, __pyx_t_7) < 0) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":2038
 * 
 * 
 * def show_font_selector(str label):             # <<<<<<<<<<<<<<
 *     cimgui.ShowStyleSelector(label)
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_31show_font_selector, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_font_selector, __pyx_t_7) < 0) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":2042
 * 
 * 
 * def begin(str label, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_33begin, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin, __pyx_t_7) < 0) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":2075
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_35get_draw_data, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_draw_data, __pyx_t_7) < 0) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":2090
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_37end, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end, __pyx_t_7) < 0) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":2108
 * 
 * def begin_child(
 *     child_id label, float width = 0, float height = 0, bool border = False,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiWindowFlags flags = 0
 * ):
 */
  __pyx_t_7 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":2109
 * def begin_child(
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0             # <<<<<<<<<<<<<<
 * ):
 *     """Begin a scrolling region.
 */
  __pyx_t_9 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "imgui/core.pyx":2107
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_9);
  __pyx_t_7 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":2108
 * 
 * def begin_child(
 *     child_id label, float width = 0, float height = 0, bool border = False,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiWindowFlags flags = 0
 * ):
 */
  __pyx_t_9 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_k__29 = __pyx_t_9;
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_k__30 = __pyx_t_9;
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_k__31 = __pyx_t_9;
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":2107
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __pyx_FusedFunction_New(&__pyx_fuse_0__pyx_mdef_5imgui_4core_492begin_child, 0, __pyx_n_s_begin_child, NULL, __pyx_n_s_imgui_core, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_1, sizeof(__pyx_defaults2), 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_1)->__pyx_arg_width = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_1)->__pyx_arg_height = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_1)->__pyx_arg_border = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_1)->__pyx_arg_flags = 0;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_t_8);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_1, __pyx_pf_5imgui_4core_501__defaults__);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_str, __pyx_t_1) < 0) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_FusedFunction_New(&__pyx_fuse_1__pyx_mdef_5imgui_4core_494begin_child, 0, __pyx_n_s_begin_child, NULL, __pyx_n_s_imgui_core, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_1, sizeof(__pyx_defaults3), 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_1)->__pyx_arg_width = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_1)->__pyx_arg_height = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_1)->__pyx_arg_border = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_1)->__pyx_arg_flags = 0;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_t_8);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_1, __pyx_pf_5imgui_4core_503__defaults__);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_ImGuiID, __pyx_t_1) < 0) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_FusedFunction_New(&__pyx_mdef_5imgui_4core_39begin_child, 0, __pyx_n_s_begin_child, NULL, __pyx_n_s_imgui_core, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_t_8);
  ((__pyx_FusedFunctionObject *) __pyx_t_1)->__signatures__ = __pyx_t_9;
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_child, __pyx_t_1) < 0) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2164
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_41end_child, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_child, __pyx_t_8) < 0) __PYX_ERR(0, 2164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2173
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_43get_content_region_max, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_content_region_max, __pyx_t_8) < 0) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2188
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_45get_content_region_available, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_content_region_available, __pyx_t_8) < 0) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2205
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_47get_content_region_available_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_content_region_available_wid, __pyx_t_8) < 0) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2217
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_49get_window_content_region_min, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_content_region_min, __pyx_t_8) < 0) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2231
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_51get_window_content_region_max, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_content_region_max, __pyx_t_8) < 0) __PYX_ERR(0, 2231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2245
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_53get_window_content_region_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_content_region_width, __pyx_t_8) < 0) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2257
 * 
 * 
 * def set_window_focus():             # <<<<<<<<<<<<<<
 *     """Set window to be focused
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_55set_window_focus, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_focus, __pyx_t_8) < 0) __PYX_ERR(0, 2257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2278
 *     cimgui.SetWindowFocus()
 * 
 * def set_window_focus_labeled(str label):             # <<<<<<<<<<<<<<
 *     """Set focus to the window named label
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_57set_window_focus_labeled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_focus_labeled, __pyx_t_8) < 0) __PYX_ERR(0, 2278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2310
 * 
 * def set_window_size(
 *     float width, float height, cimgui.ImGuiCond condition=ONCE):             # <<<<<<<<<<<<<<
 *     """Set window size
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ONCE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__37 = __pyx_t_11;

  /* "imgui/core.pyx":2309
 *     cimgui.SetWindowFocus(_bytes(label))
 * 
 * def set_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ONCE):
 *     """Set window size
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_59set_window_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_size, __pyx_t_8) < 0) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2341
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):             # <<<<<<<<<<<<<<
 *     """Set the window with label to some size
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ONCE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__38 = __pyx_t_11;
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_61set_window_size_named, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_size_named, __pyx_t_8) < 0) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2377
 *     )
 * 
 * def get_scroll_x():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxX()]
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_63get_scroll_x, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_scroll_x, __pyx_t_8) < 0) __PYX_ERR(0, 2377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2389
 * 
 * 
 * def get_scroll_y():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxY()]
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_65get_scroll_y, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_scroll_y, __pyx_t_8) < 0) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2401
 * 
 * 
 * def get_scroll_max_x():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_67get_scroll_max_x, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_scroll_max_x, __pyx_t_8) < 0) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2413
 * 
 * 
 * def get_scroll_max_y():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_69get_scroll_max_y, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_scroll_max_y, __pyx_t_8) < 0) __PYX_ERR(0, 2413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2425
 * 
 * 
 * def set_scroll_x(float scroll_x):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxX()]
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_71set_scroll_x, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_scroll_x, __pyx_t_8) < 0) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2434
 * 
 * 
 * def set_scroll_y(float scroll_y):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxY()]
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_73set_scroll_y, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_scroll_y, __pyx_t_8) < 0) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2443
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_75set_window_font_scale, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_font_scale, __pyx_t_8) < 0) __PYX_ERR(0, 2443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2470
 * 
 * def set_next_window_collapsed(
 *     cimgui.bool collapsed, cimgui.ImGuiCond condition=ALWAYS             # <<<<<<<<<<<<<<
 * ):
 *     """Set next window collapsed state.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__39 = __pyx_t_11;

  /* "imgui/core.pyx":2469
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_77set_next_window_collapsed, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_collapsed, __pyx_t_8) < 0) __PYX_ERR(0, 2469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2499
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_79set_next_window_focus, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_focus, __pyx_t_8) < 0) __PYX_ERR(0, 2499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2508
 * 
 * 
 * def set_next_window_bg_alpha(float alpha):             # <<<<<<<<<<<<<<
 *     """set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_81set_next_window_bg_alpha, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_bg_alpha, __pyx_t_8) < 0) __PYX_ERR(0, 2508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2517
 * 
 * 
 * def get_window_draw_list():             # <<<<<<<<<<<<<<
 *     """Get the draw list associated with the window, to append your own drawing primitives
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_83get_window_draw_list, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_draw_list, __pyx_t_8) < 0) __PYX_ERR(0, 2517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2555
 * 
 * 
 * def get_overlay_draw_list():             # <<<<<<<<<<<<<<
 *     """Get a special draw list that will be drawn last (over all windows).
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_85get_overlay_draw_list, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_overlay_draw_list, __pyx_t_8) < 0) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2569
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_87get_window_position, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_position, __pyx_t_8) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2584
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_89get_window_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_size, __pyx_t_8) < 0) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2596
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_91get_window_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_width, __pyx_t_8) < 0) __PYX_ERR(0, 2596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2608
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_93get_window_height, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_height, __pyx_t_8) < 0) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2621
 * 
 * def set_next_window_position(
 *     float x, float y, cimgui.ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0             # <<<<<<<<<<<<<<
 * ):
 *     """Set next window position.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__40 = __pyx_t_11;

  /* "imgui/core.pyx":2620
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0
 * ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_95set_next_window_position, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_position, __pyx_t_8) < 0) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2658
 * 
 * def set_next_window_size(
 *     float width, float height, cimgui.ImGuiCond condition=ALWAYS             # <<<<<<<<<<<<<<
 * ):
 *     """Set next window size.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__41 = __pyx_t_11;

  /* "imgui/core.pyx":2657
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_97set_next_window_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_size, __pyx_t_8) < 0) __PYX_ERR(0, 2657, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2688
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_next_window_content_size(float width, float height):             # <<<<<<<<<<<<<<
 *     """Set content size of the next window. Show scrollbars
 *        if content doesn't fit in the window
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_99set_next_window_content_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_content_size, __pyx_t_8) < 0) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2716
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the current window
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__42 = __pyx_t_11;
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_101set_window_position, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_position, __pyx_t_8) < 0) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2747
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the window with label
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__43 = __pyx_t_11;
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_103set_window_position_labeled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_position_labeled, __pyx_t_8) < 0) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2783
 *     )
 * 
 * def set_window_collapsed(bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the current window to be collapsed
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2783, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__44 = __pyx_t_11;
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_105set_window_collapsed, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_collapsed, __pyx_t_8) < 0) __PYX_ERR(0, 2783, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2809
 *     cimgui.SetWindowCollapsed(collapsed, condition)
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set window with label to collapse
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiCond(__pyx_t_8); if (unlikely((__pyx_t_11 == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__45 = __pyx_t_11;
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_107set_window_collapsed_labeled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_collapsed_labeled, __pyx_t_8) < 0) __PYX_ERR(0, 2809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2836
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_109is_window_collapsed, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_collapsed, __pyx_t_8) < 0) __PYX_ERR(0, 2836, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2845
 * 
 * 
 * def is_window_appearing():             # <<<<<<<<<<<<<<
 *     """Check if current window is appearing.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_111is_window_appearing, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_appearing, __pyx_t_8) < 0) __PYX_ERR(0, 2845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2855
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_113tree_node, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tree_node, __pyx_t_8) < 0) __PYX_ERR(0, 2855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2887
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_115tree_pop, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tree_pop, __pyx_t_8) < 0) __PYX_ERR(0, 2887, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2899
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_117collapsing_header, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collapsing_header, __pyx_t_8) < 0) __PYX_ERR(0, 2899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":2955
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_119selectable, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_selectable, __pyx_t_8) < 0) __PYX_ERR(0, 2955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3019
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_121listbox, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_listbox, __pyx_t_8) < 0) __PYX_ERR(0, 3019, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3085
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_123listbox_header, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_listbox_header, __pyx_t_8) < 0) __PYX_ERR(0, 3085, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3130
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_125listbox_footer, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_listbox_footer, __pyx_t_8) < 0) __PYX_ERR(0, 3130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3141
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_127set_tooltip, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_tooltip, __pyx_t_8) < 0) __PYX_ERR(0, 3141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3166
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_129begin_tooltip, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_tooltip, __pyx_t_8) < 0) __PYX_ERR(0, 3166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3192
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_131end_tooltip, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_tooltip, __pyx_t_8) < 0) __PYX_ERR(0, 3192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3203
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_133begin_main_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_main_menu_bar, __pyx_t_8) < 0) __PYX_ERR(0, 3203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3238
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_135end_main_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_main_menu_bar, __pyx_t_8) < 0) __PYX_ERR(0, 3238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3252
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_137begin_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_menu_bar, __pyx_t_8) < 0) __PYX_ERR(0, 3252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3289
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_139end_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_menu_bar, __pyx_t_8) < 0) __PYX_ERR(0, 3289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3303
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_141begin_menu, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_menu, __pyx_t_8) < 0) __PYX_ERR(0, 3303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3327
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_143end_menu, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_menu, __pyx_t_8) < 0) __PYX_ERR(0, 3327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3341
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_145menu_item, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_menu_item, __pyx_t_8) < 0) __PYX_ERR(0, 3341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3394
 * 
 * 
 * def open_popup(str label):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_147open_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_open_popup, __pyx_t_8) < 0) __PYX_ERR(0, 3394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3431
 * 
 * 
 * def begin_popup(str label, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_149begin_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup, __pyx_t_8) < 0) __PYX_ERR(0, 3431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3476
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_151begin_popup_modal, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup_modal, __pyx_t_8) < 0) __PYX_ERR(0, 3476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3532
 * 
 * 
 * def begin_popup_context_item(str label = None, int mouse_button = 1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_153begin_popup_context_item, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup_context_item, __pyx_t_8) < 0) __PYX_ERR(0, 3532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3571
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_155begin_popup_context_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup_context_window, __pyx_t_8) < 0) __PYX_ERR(0, 3571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3625
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_157end_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_popup, __pyx_t_8) < 0) __PYX_ERR(0, 3625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3639
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_159close_current_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_close_current_popup, __pyx_t_8) < 0) __PYX_ERR(0, 3639, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3653
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_161text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text, __pyx_t_8) < 0) __PYX_ERR(0, 3653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3675
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_163text_colored, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_colored, __pyx_t_8) < 0) __PYX_ERR(0, 3675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3710
 * 
 * 
 * def text_disabled(str text):             # <<<<<<<<<<<<<<
 *     """Add disabled(grayed out) text to current widget stack.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_165text_disabled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_disabled, __pyx_t_8) < 0) __PYX_ERR(0, 3710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3731
 *     cimgui.TextDisabled("%s", _bytes(text))
 * 
 * def text_wrapped(str text):             # <<<<<<<<<<<<<<
 *     """Add wrappable text to current widget stack.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_167text_wrapped, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_wrapped, __pyx_t_8) < 0) __PYX_ERR(0, 3731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3755
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_169label_text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_label_text, __pyx_t_8) < 0) __PYX_ERR(0, 3755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3778
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_171text_unformatted, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_unformatted, __pyx_t_8) < 0) __PYX_ERR(0, 3778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3801
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_173bullet, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bullet, __pyx_t_8) < 0) __PYX_ERR(0, 3801, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3824
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_175bullet_text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bullet_text, __pyx_t_8) < 0) __PYX_ERR(0, 3824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3854
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_177button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_button, __pyx_t_8) < 0) __PYX_ERR(0, 3854, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3880
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_179small_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_small_button, __pyx_t_8) < 0) __PYX_ERR(0, 3880, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3903
 *     return cimgui.SmallButton(_bytes(label))
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):             # <<<<<<<<<<<<<<
 *     """Display an arrow button
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_DIRECTION_NONE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_12 = __Pyx_PyInt_As_ImGuiDir(__pyx_t_8); if (unlikely((__pyx_t_12 == ((ImGuiDir)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_k__46 = __pyx_t_12;
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_181arrow_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arrow_button, __pyx_t_8) < 0) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3928
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_183invisible_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_invisible_button, __pyx_t_8) < 0) __PYX_ERR(0, 3928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":3959
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         str desc_id,
 *         float r, float g, float b, a=1.,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_185color_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_color_button, __pyx_t_8) < 0) __PYX_ERR(0, 3959, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4003
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_187image_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_image_button, __pyx_t_8) < 0) __PYX_ERR(0, 4003, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4056
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_189image, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_image, __pyx_t_8) < 0) __PYX_ERR(0, 4056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4109
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_191checkbox, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkbox, __pyx_t_8) < 0) __PYX_ERR(0, 4109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4154
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_193checkbox_flags, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkbox_flags, __pyx_t_8) < 0) __PYX_ERR(0, 4154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4211
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_195radio_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_radio_button, __pyx_t_8) < 0) __PYX_ERR(0, 4211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4242
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_197combo, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_combo, __pyx_t_8) < 0) __PYX_ERR(0, 4242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4287
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_199color_edit3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_color_edit3, __pyx_t_8) < 0) __PYX_ERR(0, 4287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4330
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_201color_edit4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_color_edit4, __pyx_t_8) < 0) __PYX_ERR(0, 4330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4377
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_203drag_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float, __pyx_t_8) < 0) __PYX_ERR(0, 4377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4443
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_205drag_float2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float2, __pyx_t_8) < 0) __PYX_ERR(0, 4443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4502
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_207drag_float3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float3, __pyx_t_8) < 0) __PYX_ERR(0, 4502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4561
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_209drag_float4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float4, __pyx_t_8) < 0) __PYX_ERR(0, 4561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4620
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_211drag_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int, __pyx_t_8) < 0) __PYX_ERR(0, 4620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4678
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_213drag_int2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int2, __pyx_t_8) < 0) __PYX_ERR(0, 4678, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4731
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_215drag_int3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int3, __pyx_t_8) < 0) __PYX_ERR(0, 4731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4784
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_217drag_int4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int4, __pyx_t_8) < 0) __PYX_ERR(0, 4784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4837
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_219input_text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_text, __pyx_t_8) < 0) __PYX_ERR(0, 4837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4899
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_221input_text_multiline, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_text_multiline, __pyx_t_8) < 0) __PYX_ERR(0, 4899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":4967
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_223input_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float, __pyx_t_8) < 0) __PYX_ERR(0, 4967, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5019
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_225input_float2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float2, __pyx_t_8) < 0) __PYX_ERR(0, 5019, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5065
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_227input_float3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float3, __pyx_t_8) < 0) __PYX_ERR(0, 5065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5111
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_229input_float4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float4, __pyx_t_8) < 0) __PYX_ERR(0, 5111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5157
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_231input_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int, __pyx_t_8) < 0) __PYX_ERR(0, 5157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5205
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_233input_int2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int2, __pyx_t_8) < 0) __PYX_ERR(0, 5205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5247
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_235input_int3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int3, __pyx_t_8) < 0) __PYX_ERR(0, 5247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5289
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_237input_int4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int4, __pyx_t_8) < 0) __PYX_ERR(0, 5289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5331
 * 
 * 
 * def input_double(             # <<<<<<<<<<<<<<
 *     str label,
 *     double value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_239input_double, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_double, __pyx_t_8) < 0) __PYX_ERR(0, 5331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5382
 * 
 * 
 * def slider_angle(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_241slider_angle, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_angle, __pyx_t_8) < 0) __PYX_ERR(0, 5382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5431
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_243slider_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float, __pyx_t_8) < 0) __PYX_ERR(0, 5431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5490
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_245slider_float2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float2, __pyx_t_8) < 0) __PYX_ERR(0, 5490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5548
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_247slider_float3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float3, __pyx_t_8) < 0) __PYX_ERR(0, 5548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5607
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_249slider_float4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float4, __pyx_t_8) < 0) __PYX_ERR(0, 5607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5666
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_251slider_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int, __pyx_t_8) < 0) __PYX_ERR(0, 5666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5720
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_253slider_int2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int2, __pyx_t_8) < 0) __PYX_ERR(0, 5720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5774
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_255slider_int3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int3, __pyx_t_8) < 0) __PYX_ERR(0, 5774, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5828
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_257slider_int4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int4, __pyx_t_8) < 0) __PYX_ERR(0, 5828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5881
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_259v_slider_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_v_slider_float, __pyx_t_8) < 0) __PYX_ERR(0, 5881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":5946
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_261v_slider_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_v_slider_int, __pyx_t_8) < 0) __PYX_ERR(0, 5946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6013
 *         int values_offset = 0,
 *         str overlay_text = None,
 *         float scale_min = FLT_MAX,             # <<<<<<<<<<<<<<
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),
 */
  __pyx_k__51 = FLT_MAX;

  /* "imgui/core.pyx":6014
 *         str overlay_text = None,
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,             # <<<<<<<<<<<<<<
 *         graph_size = (0, 0),
 *         int stride = sizeof(float),
 */
  __pyx_k__52 = FLT_MAX;

  /* "imgui/core.pyx":6016
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),
 *         int stride = sizeof(float),             # <<<<<<<<<<<<<<
 *     ):
 * 
 */
  __pyx_k__53 = (sizeof(float));

  /* "imgui/core.pyx":6007
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_263plot_lines, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plot_lines, __pyx_t_8) < 0) __PYX_ERR(0, 6007, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6105
 *         int values_offset = 0,
 *         str overlay_text = None,
 *         float scale_min = FLT_MAX,             # <<<<<<<<<<<<<<
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),
 */
  __pyx_k__54 = FLT_MAX;

  /* "imgui/core.pyx":6106
 *         str overlay_text = None,
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,             # <<<<<<<<<<<<<<
 *         graph_size = (0, 0),
 *         int stride = sizeof(float),
 */
  __pyx_k__55 = FLT_MAX;

  /* "imgui/core.pyx":6108
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),
 *         int stride = sizeof(float),             # <<<<<<<<<<<<<<
 *     ):
 *     """
 */
  __pyx_k__56 = (sizeof(float));

  /* "imgui/core.pyx":6099
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_265plot_histogram, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plot_histogram, __pyx_t_8) < 0) __PYX_ERR(0, 6099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6191
 *     )
 * 
 * def progress_bar(float fraction, size = (0,0), str overlay = ""):             # <<<<<<<<<<<<<<
 *     """ Show a progress bar
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_267progress_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_progress_bar, __pyx_t_8) < 0) __PYX_ERR(0, 6191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6219
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))
 * 
 * def set_item_default_focus():             # <<<<<<<<<<<<<<
 *     """Make last item the default focused item of a window.
 *     Please use instead of "if (is_window_appearing()) set_scroll_here()" to signify "default item".
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_269set_item_default_focus, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_item_default_focus, __pyx_t_8) < 0) __PYX_ERR(0, 6219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6229
 * 
 * 
 * def set_keyboard_focus_here(int offset = 0):             # <<<<<<<<<<<<<<
 *     """Focus keyboard on the next widget.
 *     Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_271set_keyboard_focus_here, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_keyboard_focus_here, __pyx_t_8) < 0) __PYX_ERR(0, 6229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6239
 * 
 * 
 * def is_item_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_273is_item_hovered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_hovered, __pyx_t_8) < 0) __PYX_ERR(0, 6239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6253
 * 
 * 
 * def is_item_focused():             # <<<<<<<<<<<<<<
 *     """Check if the last item is focused
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_275is_item_focused, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_focused, __pyx_t_8) < 0) __PYX_ERR(0, 6253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6265
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_277is_item_active, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_active, __pyx_t_8) < 0) __PYX_ERR(0, 6265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6278
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_279is_item_clicked, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_clicked, __pyx_t_8) < 0) __PYX_ERR(0, 6278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6291
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_281is_item_visible, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_visible, __pyx_t_8) < 0) __PYX_ERR(0, 6291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6304
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_283is_any_item_hovered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_any_item_hovered, __pyx_t_8) < 0) __PYX_ERR(0, 6304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6316
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_285is_any_item_active, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_any_item_active, __pyx_t_8) < 0) __PYX_ERR(0, 6316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6328
 * 
 * 
 * def is_any_item_focused():             # <<<<<<<<<<<<<<
 *     """Is any of the items focused.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_287is_any_item_focused, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_any_item_focused, __pyx_t_8) < 0) __PYX_ERR(0, 6328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6340
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_289get_item_rect_min, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_item_rect_min, __pyx_t_8) < 0) __PYX_ERR(0, 6340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6352
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_291get_item_rect_max, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_item_rect_max, __pyx_t_8) < 0) __PYX_ERR(0, 6352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6364
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_293get_item_rect_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_item_rect_size, __pyx_t_8) < 0) __PYX_ERR(0, 6364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6376
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_295set_item_allow_overlap, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_item_allow_overlap, __pyx_t_8) < 0) __PYX_ERR(0, 6376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6387
 * 
 * 
 * def is_window_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_297is_window_hovered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_hovered, __pyx_t_8) < 0) __PYX_ERR(0, 6387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6402
 * 
 * 
 * def is_window_focused(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_299is_window_focused, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_focused, __pyx_t_8) < 0) __PYX_ERR(0, 6402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6416
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_301is_rect_visible, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_rect_visible, __pyx_t_8) < 0) __PYX_ERR(0, 6416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6433
 * 
 * 
 * def get_style_color_name(int index):             # <<<<<<<<<<<<<<
 *     """Get the style color name for a given ImGuiCol index.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_303get_style_color_name, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_style_color_name, __pyx_t_8) < 0) __PYX_ERR(0, 6433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6444
 * 
 * 
 * def get_time():             # <<<<<<<<<<<<<<
 *     """Seconds since program start.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_305get_time, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_time, __pyx_t_8) < 0) __PYX_ERR(0, 6444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6456
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_307is_mouse_hovering_rect, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_hovering_rect, __pyx_t_8) < 0) __PYX_ERR(0, 6456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6484
 * 
 * 
 * def is_mouse_double_clicked(int button = 0):             # <<<<<<<<<<<<<<
 *     """Return True if mouse was double-clicked.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_309is_mouse_double_clicked, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_double_clicked, __pyx_t_8) < 0) __PYX_ERR(0, 6484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6501
 * 
 * 
 * def is_mouse_clicked(int button = 0, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was clicked this frame.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_311is_mouse_clicked, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_clicked, __pyx_t_8) < 0) __PYX_ERR(0, 6501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6517
 * 
 * 
 * def is_mouse_released(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was released this frame.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_313is_mouse_released, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_released, __pyx_t_8) < 0) __PYX_ERR(0, 6517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6532
 * 
 * 
 * def is_mouse_down(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse is down.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_315is_mouse_down, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_down, __pyx_t_8) < 0) __PYX_ERR(0, 6532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6547
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_317is_mouse_dragging, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_dragging, __pyx_t_8) < 0) __PYX_ERR(0, 6547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6564
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_319get_mouse_drag_delta, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_mouse_drag_delta, __pyx_t_8) < 0) __PYX_ERR(0, 6564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6583
 * 
 * 
 * def get_mouse_pos():             # <<<<<<<<<<<<<<
 *     """Current mouse position.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_321get_mouse_pos, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_mouse_pos, __pyx_t_8) < 0) __PYX_ERR(0, 6583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6596
 *     )
 * 
 * get_mouse_position = get_mouse_pos             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_get_mouse_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_mouse_position, __pyx_t_8) < 0) __PYX_ERR(0, 6596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6599
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_323reset_mouse_drag_delta, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reset_mouse_drag_delta, __pyx_t_8) < 0) __PYX_ERR(0, 6599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6611
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_325get_mouse_cursor, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_mouse_cursor, __pyx_t_8) < 0) __PYX_ERR(0, 6611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6620
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_327set_mouse_cursor, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_mouse_cursor, __pyx_t_8) < 0) __PYX_ERR(0, 6620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6632
 * 
 * 
 * def set_scroll_here(float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll here.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_329set_scroll_here, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_scroll_here, __pyx_t_8) < 0) __PYX_ERR(0, 6632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6646
 * 
 * 
 * def set_scroll_from_pos_y(float pos_y, float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll from position Y
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_331set_scroll_from_pos_y, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_scroll_from_pos_y, __pyx_t_8) < 0) __PYX_ERR(0, 6646, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6661
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_333push_font, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_push_font, __pyx_t_8) < 0) __PYX_ERR(0, 6661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6700
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_335pop_font, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 6700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pop_font, __pyx_t_8) < 0) __PYX_ERR(0, 6700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":6713
 *     cimgui.PopFont()
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):             # <<<<<<<<<<<<<<
 *     """Calculate text size.
 *     Text can be multi-line.
 */
  __pyx_k__57 = (-1.0);
  __pyx_k__57 = (-1.0);

  /* "imgui/core.pyx":7002
 *     cimgui.PushTextWrapPos(wrap_pos_x)
 * 
 * push_text_wrap_position = push_text_wrap_pos             # <<<<<<<<<<<<<<
 * 
 * cpdef pop_text_wrap_pos():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_push_text_wrap_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_push_text_wrap_position, __pyx_t_8) < 0) __PYX_ERR(0, 7002, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7017
 *     cimgui.PopTextWrapPos()
 * 
 * pop_text_wrap_position = pop_text_wrap_pos             # <<<<<<<<<<<<<<
 * 
 * cpdef push_allow_keyboard_focus(bool allow_focus):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pop_text_wrap_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pop_text_wrap_position, __pyx_t_8) < 0) __PYX_ERR(0, 7017, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7048
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_377separator, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_separator, __pyx_t_8) < 0) __PYX_ERR(0, 7048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7075
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_379same_line, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_same_line, __pyx_t_8) < 0) __PYX_ERR(0, 7075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7108
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_381new_line, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_line, __pyx_t_8) < 0) __PYX_ERR(0, 7108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7117
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_383spacing, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_spacing, __pyx_t_8) < 0) __PYX_ERR(0, 7117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7144
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_385dummy, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dummy, __pyx_t_8) < 0) __PYX_ERR(0, 7144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7168
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_387indent, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indent, __pyx_t_8) < 0) __PYX_ERR(0, 7168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7199
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_389unindent, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unindent, __pyx_t_8) < 0) __PYX_ERR(0, 7199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7230
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_391columns, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_columns, __pyx_t_8) < 0) __PYX_ERR(0, 7230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7290
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_393next_column, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_next_column, __pyx_t_8) < 0) __PYX_ERR(0, 7290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7301
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_395get_column_index, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_column_index, __pyx_t_8) < 0) __PYX_ERR(0, 7301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7315
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_397get_column_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_column_offset, __pyx_t_8) < 0) __PYX_ERR(0, 7315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7335
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_399set_column_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_column_offset, __pyx_t_8) < 0) __PYX_ERR(0, 7335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7351
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_401get_column_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_column_width, __pyx_t_8) < 0) __PYX_ERR(0, 7351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7365
 * 
 * 
 * def set_column_width(int column_index, float width):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_403set_column_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_column_width, __pyx_t_8) < 0) __PYX_ERR(0, 7365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7381
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_405get_columns_count, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_columns_count, __pyx_t_8) < 0) __PYX_ERR(0, 7381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7395
 * 
 * 
 * def begin_drag_drop_source(cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop source. If this return True, you
 *     can call :func:`set_drag_drop_payload` and :func:`end_drag_drop_source`.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_407begin_drag_drop_source, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_drag_drop_source, __pyx_t_8) < 0) __PYX_ERR(0, 7395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7434
 * 
 * 
 * def set_drag_drop_payload(str type, bytes data, cimgui.ImGuiCond condition=0):             # <<<<<<<<<<<<<<
 *     """Set the payload for a drag and drop source. Only call after
 *     :func:`begin_drag_drop_source` returns True.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_409set_drag_drop_payload, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_drag_drop_payload, __pyx_t_8) < 0) __PYX_ERR(0, 7434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7454
 * 
 * 
 * def end_drag_drop_source():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_source`
 *     returns True.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_411end_drag_drop_source, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_drag_drop_source, __pyx_t_8) < 0) __PYX_ERR(0, 7454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7468
 * 
 * 
 * def begin_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop target. If this return True, you
 *     can call :func:`accept_drag_drop_payload` and :func:`end_drag_drop_target`.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_413begin_drag_drop_target, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_drag_drop_target, __pyx_t_8) < 0) __PYX_ERR(0, 7468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7485
 * 
 * 
 * def accept_drag_drop_payload(str type, cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Get the drag and drop payload. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_415accept_drag_drop_payload, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_accept_drag_drop_payload, __pyx_t_8) < 0) __PYX_ERR(0, 7485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7510
 * 
 * 
 * def end_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_417end_drag_drop_target, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_drag_drop_target, __pyx_t_8) < 0) __PYX_ERR(0, 7510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7524
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_419begin_group, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_group, __pyx_t_8) < 0) __PYX_ERR(0, 7524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7559
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_421end_group, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_group, __pyx_t_8) < 0) __PYX_ERR(0, 7559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7568
 * 
 * 
 * def get_cursor_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_423get_cursor_pos, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_pos, __pyx_t_8) < 0) __PYX_ERR(0, 7568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7577
 * 
 * 
 * def get_cursor_pos_x():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosX()
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_425get_cursor_pos_x, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_pos_x, __pyx_t_8) < 0) __PYX_ERR(0, 7577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7581
 * 
 * 
 * def get_cursor_pos_y():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosY()
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_427get_cursor_pos_y, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_pos_y, __pyx_t_8) < 0) __PYX_ERR(0, 7581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7585
 * 
 * 
 * def set_cursor_pos(local_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in local coordinates [0..<window size>] (useful to work with ImDrawList API)
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_429set_cursor_pos, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_cursor_pos, __pyx_t_8) < 0) __PYX_ERR(0, 7585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7594
 * 
 * 
 * def set_cursor_pos_x(float x):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosX(x)
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_431set_cursor_pos_x, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_cursor_pos_x, __pyx_t_8) < 0) __PYX_ERR(0, 7594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7598
 * 
 * 
 * def set_cursor_pos_y(float y):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosY(y)
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_433set_cursor_pos_y, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_cursor_pos_y, __pyx_t_8) < 0) __PYX_ERR(0, 7598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7602
 * 
 * 
 * def get_cursor_start_pos():             # <<<<<<<<<<<<<<
 *     """Get the initial cursor position.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_435get_cursor_start_pos, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_start_pos, __pyx_t_8) < 0) __PYX_ERR(0, 7602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7611
 * 
 * 
 * def get_cursor_screen_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_437get_cursor_screen_pos, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_screen_pos, __pyx_t_8) < 0) __PYX_ERR(0, 7611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7620
 * 
 * 
 * def set_cursor_screen_pos(screen_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_439set_cursor_screen_pos, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_cursor_screen_pos, __pyx_t_8) < 0) __PYX_ERR(0, 7620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7629
 * 
 * 
 * get_cursor_position = get_cursor_pos             # <<<<<<<<<<<<<<
 * set_cursor_position = set_cursor_pos
 * get_cursor_start_position = get_cursor_start_pos
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_get_cursor_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_position, __pyx_t_8) < 0) __PYX_ERR(0, 7629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7630
 * 
 * get_cursor_position = get_cursor_pos
 * set_cursor_position = set_cursor_pos             # <<<<<<<<<<<<<<
 * get_cursor_start_position = get_cursor_start_pos
 * get_cursor_screen_position = get_cursor_screen_pos
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_set_cursor_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_cursor_position, __pyx_t_8) < 0) __PYX_ERR(0, 7630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7631
 * get_cursor_position = get_cursor_pos
 * set_cursor_position = set_cursor_pos
 * get_cursor_start_position = get_cursor_start_pos             # <<<<<<<<<<<<<<
 * get_cursor_screen_position = get_cursor_screen_pos
 * set_cursor_screen_position = set_cursor_screen_pos
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_get_cursor_start_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_start_position, __pyx_t_8) < 0) __PYX_ERR(0, 7631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7632
 * set_cursor_position = set_cursor_pos
 * get_cursor_start_position = get_cursor_start_pos
 * get_cursor_screen_position = get_cursor_screen_pos             # <<<<<<<<<<<<<<
 * set_cursor_screen_position = set_cursor_screen_pos
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_get_cursor_screen_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cursor_screen_position, __pyx_t_8) < 0) __PYX_ERR(0, 7632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7633
 * get_cursor_start_position = get_cursor_start_pos
 * get_cursor_screen_position = get_cursor_screen_pos
 * set_cursor_screen_position = set_cursor_screen_pos             # <<<<<<<<<<<<<<
 * 
 * def align_text_to_frame_padding():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_set_cursor_screen_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_cursor_screen_position, __pyx_t_8) < 0) __PYX_ERR(0, 7633, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7635
 * set_cursor_screen_position = set_cursor_screen_pos
 * 
 * def align_text_to_frame_padding():             # <<<<<<<<<<<<<<
 *     cimgui.AlignTextToFramePadding()
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_441align_text_to_frame_padding, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_align_text_to_frame_padding, __pyx_t_8) < 0) __PYX_ERR(0, 7635, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7638
 *     cimgui.AlignTextToFramePadding()
 * 
 * def get_text_line_height():             # <<<<<<<<<<<<<<
 *     """Get text line height.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_443get_text_line_height, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_text_line_height, __pyx_t_8) < 0) __PYX_ERR(0, 7638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7650
 * 
 * 
 * def get_text_line_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """Get text line height, with spacing.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_445get_text_line_height_with_spacing, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_text_line_height_with_spacin, __pyx_t_8) < 0) __PYX_ERR(0, 7650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7662
 * 
 * 
 * def get_frame_height():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_447get_frame_height, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_frame_height, __pyx_t_8) < 0) __PYX_ERR(0, 7662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7672
 * 
 * 
 * def get_frame_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_449get_frame_height_with_spacing, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_frame_height_with_spacing, __pyx_t_8) < 0) __PYX_ERR(0, 7672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7681
 * 
 * 
 * def create_context(_FontAtlas shared_font_atlas = None):             # <<<<<<<<<<<<<<
 *     """CreateContext
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_451create_context, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_context, __pyx_t_8) < 0) __PYX_ERR(0, 7681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7704
 * 
 * 
 * def destroy_context(_ImGuiContext ctx = None):             # <<<<<<<<<<<<<<
 *     """DestroyContext
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_453destroy_context, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_destroy_context, __pyx_t_8) < 0) __PYX_ERR(0, 7704, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7720
 * 
 * 
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     """GetCurrentContext
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_455get_current_context, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_current_context, __pyx_t_8) < 0) __PYX_ERR(0, 7720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7732
 * 
 * 
 * def set_current_context(_ImGuiContext ctx):             # <<<<<<<<<<<<<<
 *     """SetCurrentContext
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_457set_current_context, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_current_context, __pyx_t_8) < 0) __PYX_ERR(0, 7732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7742
 * 
 * 
 * def push_id(str str_id):             # <<<<<<<<<<<<<<
 *     """Push an ID into the ID stack
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_459push_id, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_push_id, __pyx_t_8) < 0) __PYX_ERR(0, 7742, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7754
 * 
 * 
 * def pop_id():             # <<<<<<<<<<<<<<
 *     """Pop from the ID stack
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_461pop_id, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pop_id, __pyx_t_8) < 0) __PYX_ERR(0, 7754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "imgui/core.pyx":7767
 * 
 * cdef public _ImGuiError "ImGuiError" = PyErr_NewException(
 *     "imgui.core.ImGuiError", Exception, {}             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "imgui/core.pyx":7766
 * from cpython.exc cimport PyErr_NewException
 * 
 * cdef public _ImGuiError "ImGuiError" = PyErr_NewException(             # <<<<<<<<<<<<<<
 *     "imgui.core.ImGuiError", Exception, {}
 * )
 */
  __pyx_t_1 = PyErr_NewException(((char *)"imgui.core.ImGuiError"), ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_XGOTREF(ImGuiError);
  __Pyx_DECREF_SET(ImGuiError, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":7770
 * )
 * 
 * ImGuiError = _ImGuiError # make visible to Python             # <<<<<<<<<<<<<<
 * 
 * # === ansifeed extras ===
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ImGuiError, ImGuiError) < 0) __PYX_ERR(0, 7770, __pyx_L1_error)

  /* "imgui/core.pyx":7774
 * # === ansifeed extras ===
 * 
 * def _ansifeed_text_ansi(str text):             # <<<<<<<<<<<<<<
 *     """Add ANSI-escape-formatted text to current widget stack.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_463_ansifeed_text_ansi, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ansifeed_text_ansi, __pyx_t_1) < 0) __PYX_ERR(0, 7774, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7799
 * 
 * 
 * def _ansifeed_text_ansi_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add pre-colored ANSI-escape-formatted text to current widget stack.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_465_ansifeed_text_ansi_colored, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ansifeed_text_ansi_colored, __pyx_t_1) < 0) __PYX_ERR(0, 7799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7839
 * # === Extra utilities ====
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_font(_Font font):
 *     """Use specified font in given context.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":7840
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_467_py_font, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "imgui/core.pyx":7839
 * # === Extra utilities ====
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_font(_Font font):
 *     """Use specified font in given context.
 */
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_font, __pyx_t_9) < 0) __PYX_ERR(0, 7840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":7871
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):
 *     # note: we treat bool value as integer to guess if we are required to pop
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "imgui/core.pyx":7872
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_470_py_styled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "imgui/core.pyx":7871
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):
 *     # note: we treat bool value as integer to guess if we are required to pop
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_styled, __pyx_t_1) < 0) __PYX_ERR(0, 7872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7880
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_colored(
 *     cimgui.ImGuiCol variable,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":7881
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_473_py_colored, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "imgui/core.pyx":7880
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_colored(
 *     cimgui.ImGuiCol variable,
 */
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_colored, __pyx_t_9) < 0) __PYX_ERR(0, 7881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":7895
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_istyled(*variables_and_values):
 *     # todo: rename to nstyled?
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "imgui/core.pyx":7896
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_476_py_istyled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "imgui/core.pyx":7895
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_istyled(*variables_and_values):
 *     # todo: rename to nstyled?
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_istyled, __pyx_t_1) < 0) __PYX_ERR(0, 7896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":7923
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_scoped(str str_id):
 *     """Use scoped ID within a block of code.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":7924
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */
  __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_479_py_scoped, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 7924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "imgui/core.pyx":7923
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def _py_scoped(str str_id):
 *     """Use scoped ID within a block of code.
 */
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_scoped, __pyx_t_9) < 0) __PYX_ERR(0, 7924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":7941
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_482_py_vertex_buffer_vertex_pos_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_pos_off, __pyx_t_9) < 0) __PYX_ERR(0, 7941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":7944
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_484_py_vertex_buffer_vertex_uv_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_uv_offs, __pyx_t_9) < 0) __PYX_ERR(0, 7944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":7947
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_486_py_vertex_buffer_vertex_col_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_col_off, __pyx_t_9) < 0) __PYX_ERR(0, 7947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":7950
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_488_py_vertex_buffer_vertex_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_size, __pyx_t_9) < 0) __PYX_ERR(0, 7950, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":7953
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_490_py_index_buffer_index_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 7953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_index_buffer_index_size, __pyx_t_9) < 0) __PYX_ERR(0, 7953, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "imgui/core.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: sources = imgui-cpp/imgui.cpp imgui-cpp/imgui_draw.cpp imgui-cpp/imgui_demo.cpp imgui-cpp/imgui_widgets.cpp config-cpp/py_imconfig.cpp
 * # distutils: include_dirs = imgui-cpp ansifeed-cpp
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_9) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_9 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_9) < 0) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__441, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__442, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__443, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__444, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__445, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_13[0] = PyThread_allocate_lock();
  __pyx_t_13[1] = PyThread_allocate_lock();
  __pyx_t_13[2] = PyThread_allocate_lock();
  __pyx_t_13[3] = PyThread_allocate_lock();
  __pyx_t_13[4] = PyThread_allocate_lock();
  __pyx_t_13[5] = PyThread_allocate_lock();
  __pyx_t_13[6] = PyThread_allocate_lock();
  __pyx_t_13[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_13, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_9 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_9) < 0) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_9 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_9) < 0) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_9) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init imgui.core", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init imgui.core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* StringJoin */
#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* BufferIndexError */
static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* None */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* None */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* FusedFunction */
static PyObject *
__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                        PyObject *qualname, PyObject *closure,
                        PyObject *module, PyObject *globals,
                        PyObject *code)
{
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_FusedFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        __pyx_FusedFunctionObject *fusedfunc = (__pyx_FusedFunctionObject *) op;
        fusedfunc->__signatures__ = NULL;
        fusedfunc->type = NULL;
        fusedfunc->self = NULL;
        PyObject_GC_Track(op);
    }
    return op;
}
static void
__pyx_FusedFunction_dealloc(__pyx_FusedFunctionObject *self)
{
    PyObject_GC_UnTrack(self);
    Py_CLEAR(self->self);
    Py_CLEAR(self->type);
    Py_CLEAR(self->__signatures__);
    __Pyx__CyFunction_dealloc((__pyx_CyFunctionObject *) self);
}
static int
__pyx_FusedFunction_traverse(__pyx_FusedFunctionObject *self,
                             visitproc visit,
                             void *arg)
{
    Py_VISIT(self->self);
    Py_VISIT(self->type);
    Py_VISIT(self->__signatures__);
    return __Pyx_CyFunction_traverse((__pyx_CyFunctionObject *) self, visit, arg);
}
static int
__pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self)
{
    Py_CLEAR(self->self);
    Py_CLEAR(self->type);
    Py_CLEAR(self->__signatures__);
    return __Pyx_CyFunction_clear((__pyx_CyFunctionObject *) self);
}
static PyObject *
__pyx_FusedFunction_descr_get(PyObject *self, PyObject *obj, PyObject *type)
{
    __pyx_FusedFunctionObject *func, *meth;
    func = (__pyx_FusedFunctionObject *) self;
    if (func->self || func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(self);
        return self;
    }
    if (obj == Py_None)
        obj = NULL;
    meth = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_New(
                    ((PyCFunctionObject *) func)->m_ml,
                    ((__pyx_CyFunctionObject *) func)->flags,
                    ((__pyx_CyFunctionObject *) func)->func_qualname,
                    ((__pyx_CyFunctionObject *) func)->func_closure,
                    ((PyCFunctionObject *) func)->m_module,
                    ((__pyx_CyFunctionObject *) func)->func_globals,
                    ((__pyx_CyFunctionObject *) func)->func_code);
    if (!meth)
        return NULL;
    if (func->func.defaults) {
        PyObject **pydefaults;
        int i;
        if (!__Pyx_CyFunction_InitDefaults((PyObject*)meth,
                                      func->func.defaults_size,
                                      func->func.defaults_pyobjects)) {
            Py_XDECREF((PyObject*)meth);
            return NULL;
        }
        memcpy(meth->func.defaults, func->func.defaults, func->func.defaults_size);
        pydefaults = __Pyx_CyFunction_Defaults(PyObject *, meth);
        for (i = 0; i < meth->func.defaults_pyobjects; i++)
            Py_XINCREF(pydefaults[i]);
    }
    Py_XINCREF(func->func.func_classobj);
    meth->func.func_classobj = func->func.func_classobj;
    Py_XINCREF(func->__signatures__);
    meth->__signatures__ = func->__signatures__;
    Py_XINCREF(type);
    meth->type = type;
    Py_XINCREF(func->func.defaults_tuple);
    meth->func.defaults_tuple = func->func.defaults_tuple;
    if (func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD)
        obj = type;
    Py_XINCREF(obj);
    meth->self = obj;
    return (PyObject *) meth;
}
static PyObject *
_obj_to_str(PyObject *obj)
{
    if (PyType_Check(obj))
        return PyObject_GetAttr(obj, __pyx_n_s_name);
    else
        return PyObject_Str(obj);
}
static PyObject *
__pyx_FusedFunction_getitem(__pyx_FusedFunctionObject *self, PyObject *idx)
{
    PyObject *signature = NULL;
    PyObject *unbound_result_func;
    PyObject *result_func = NULL;
    if (self->__signatures__ == NULL) {
        PyErr_SetString(PyExc_TypeError, "Function is not fused");
        return NULL;
    }
    if (PyTuple_Check(idx)) {
        PyObject *list = PyList_New(0);
        Py_ssize_t n = PyTuple_GET_SIZE(idx);
        PyObject *sep = NULL;
        int i;
        if (unlikely(!list))
            return NULL;
        for (i = 0; i < n; i++) {
            int ret;
            PyObject *string;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(idx, i);
#else
            PyObject *item = PySequence_ITEM(idx, i);  if (unlikely(!item)) goto __pyx_err;
#endif
            string = _obj_to_str(item);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
            Py_DECREF(item);
#endif
            if (unlikely(!string)) goto __pyx_err;
            ret = PyList_Append(list, string);
            Py_DECREF(string);
            if (unlikely(ret < 0)) goto __pyx_err;
        }
        sep = PyUnicode_FromString("|");
        if (likely(sep))
            signature = PyUnicode_Join(sep, list);
__pyx_err:
;
        Py_DECREF(list);
        Py_XDECREF(sep);
    } else {
        signature = _obj_to_str(idx);
    }
    if (!signature)
        return NULL;
    unbound_result_func = PyObject_GetItem(self->__signatures__, signature);
    if (unbound_result_func) {
        if (self->self || self->type) {
            __pyx_FusedFunctionObject *unbound = (__pyx_FusedFunctionObject *) unbound_result_func;
            Py_CLEAR(unbound->func.func_classobj);
            Py_XINCREF(self->func.func_classobj);
            unbound->func.func_classobj = self->func.func_classobj;
            result_func = __pyx_FusedFunction_descr_get(unbound_result_func,
                                                        self->self, self->type);
        } else {
            result_func = unbound_result_func;
            Py_INCREF(result_func);
        }
    }
    Py_DECREF(signature);
    Py_XDECREF(unbound_result_func);
    return result_func;
}
static PyObject *
__pyx_FusedFunction_callfunction(PyObject *func, PyObject *args, PyObject *kw)
{
     __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    int static_specialized = (cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD &&
                              !((__pyx_FusedFunctionObject *) func)->__signatures__);
    if (cyfunc->flags & __Pyx_CYFUNCTION_CCLASS && !static_specialized) {
        return __Pyx_CyFunction_CallAsMethod(func, args, kw);
    } else {
        return __Pyx_CyFunction_Call(func, args, kw);
    }
}
static PyObject *
__pyx_FusedFunction_call(PyObject *func, PyObject *args, PyObject *kw)
{
    __pyx_FusedFunctionObject *binding_func = (__pyx_FusedFunctionObject *) func;
    Py_ssize_t argc = PyTuple_GET_SIZE(args);
    PyObject *new_args = NULL;
    __pyx_FusedFunctionObject *new_func = NULL;
    PyObject *result = NULL;
    PyObject *self = NULL;
    int is_staticmethod = binding_func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD;
    int is_classmethod = binding_func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD;
    if (binding_func->self) {
        Py_ssize_t i;
        new_args = PyTuple_New(argc + 1);
        if (!new_args)
            return NULL;
        self = binding_func->self;
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_INCREF(self);
#endif
        Py_INCREF(self);
        PyTuple_SET_ITEM(new_args, 0, self);
        for (i = 0; i < argc; i++) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(args, i);
            Py_INCREF(item);
#else
            PyObject *item = PySequence_ITEM(args, i);  if (unlikely(!item)) goto bad;
#endif
            PyTuple_SET_ITEM(new_args, i + 1, item);
        }
        args = new_args;
    } else if (binding_func->type) {
        if (argc < 1) {
            PyErr_SetString(PyExc_TypeError, "Need at least one argument, 0 given.");
            return NULL;
        }
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        self = PyTuple_GET_ITEM(args, 0);
#else
        self = PySequence_ITEM(args, 0);  if (unlikely(!self)) return NULL;
#endif
    }
    if (self && !is_classmethod && !is_staticmethod) {
        int is_instance = PyObject_IsInstance(self, binding_func->type);
        if (unlikely(!is_instance)) {
            PyErr_Format(PyExc_TypeError,
                         "First argument should be of type %.200s, got %.200s.",
                         ((PyTypeObject *) binding_func->type)->tp_name,
                         self->ob_type->tp_name);
            goto bad;
        } else if (unlikely(is_instance == -1)) {
            goto bad;
        }
    }
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
    Py_XDECREF(self);
    self = NULL;
#endif
    if (binding_func->__signatures__) {
        PyObject *tup;
        if (is_staticmethod && binding_func->func.flags & __Pyx_CYFUNCTION_CCLASS) {
            tup = PyTuple_Pack(3, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __Pyx_CyFunction_CallMethod(
                func, binding_func->__signatures__, tup, NULL);
        } else {
            tup = PyTuple_Pack(4, binding_func->__signatures__, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_callfunction(func, tup, NULL);
        }
        Py_DECREF(tup);
        if (unlikely(!new_func))
            goto bad;
        Py_XINCREF(binding_func->func.func_classobj);
        Py_CLEAR(new_func->func.func_classobj);
        new_func->func.func_classobj = binding_func->func.func_classobj;
        func = (PyObject *) new_func;
    }
    result = __pyx_FusedFunction_callfunction(func, args, kw);
bad:
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
    Py_XDECREF(self);
#endif
    Py_XDECREF(new_args);
    Py_XDECREF((PyObject *) new_func);
    return result;
}
static PyMemberDef __pyx_FusedFunction_members[] = {
    {(char *) "__signatures__",
     T_OBJECT,
     offsetof(__pyx_FusedFunctionObject, __signatures__),
     READONLY,
     0},
    {0, 0, 0, 0, 0},
};
static PyMappingMethods __pyx_FusedFunction_mapping_methods = {
    0,
    (binaryfunc) __pyx_FusedFunction_getitem,
    0,
};
static PyTypeObject __pyx_FusedFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "fused_cython_function",
    sizeof(__pyx_FusedFunctionObject),
    0,
    (destructor) __pyx_FusedFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    &__pyx_FusedFunction_mapping_methods,
    0,
    (ternaryfunc) __pyx_FusedFunction_call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __pyx_FusedFunction_traverse,
    (inquiry) __pyx_FusedFunction_clear,
    0,
    0,
    0,
    0,
    0,
    __pyx_FusedFunction_members,
    __pyx_CyFunction_getsets,
    &__pyx_CyFunctionType_type,
    0,
    __pyx_FusedFunction_descr_get,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_FusedFunction_init(void) {
    __pyx_FusedFunctionType_type.tp_base = __pyx_CyFunctionType;
    __pyx_FusedFunctionType = __Pyx_FetchCommonType(&__pyx_FusedFunctionType_type);
    if (__pyx_FusedFunctionType == NULL) {
        return -1;
    }
    return 0;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_ value) {
    const ImGuiCond_ neg_one = (ImGuiCond_) ((ImGuiCond_) 0 - (ImGuiCond_) 1), const_zero = (ImGuiCond_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiCond_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiCond_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCond_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiCond_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCond_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiCond_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ value) {
    const ImGuiStyleVar_ neg_one = (ImGuiStyleVar_) ((ImGuiStyleVar_) 0 - (ImGuiStyleVar_) 1), const_zero = (ImGuiStyleVar_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiStyleVar_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiStyleVar_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiStyleVar_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_ value) {
    const ImGuiKey_ neg_one = (ImGuiKey_) ((ImGuiKey_) 0 - (ImGuiKey_) 1), const_zero = (ImGuiKey_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiKey_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiKey_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiKey_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiKey_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiKey_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiKey_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ value) {
    const ImGuiWindowFlags_ neg_one = (ImGuiWindowFlags_) ((ImGuiWindowFlags_) 0 - (ImGuiWindowFlags_) 1), const_zero = (ImGuiWindowFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiWindowFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiWindowFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiWindowFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_ value) {
    const ImGuiTreeNodeFlags_ neg_one = (ImGuiTreeNodeFlags_) ((ImGuiTreeNodeFlags_) 0 - (ImGuiTreeNodeFlags_) 1), const_zero = (ImGuiTreeNodeFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTreeNodeFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTreeNodeFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_ value) {
    const ImGuiSelectableFlags_ neg_one = (ImGuiSelectableFlags_) ((ImGuiSelectableFlags_) 0 - (ImGuiSelectableFlags_) 1), const_zero = (ImGuiSelectableFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSelectableFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSelectableFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSelectableFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_ value) {
    const ImGuiComboFlags_ neg_one = (ImGuiComboFlags_) ((ImGuiComboFlags_) 0 - (ImGuiComboFlags_) 1), const_zero = (ImGuiComboFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiComboFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiComboFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiComboFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiComboFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiComboFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiComboFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_ value) {
    const ImGuiFocusedFlags_ neg_one = (ImGuiFocusedFlags_) ((ImGuiFocusedFlags_) 0 - (ImGuiFocusedFlags_) 1), const_zero = (ImGuiFocusedFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiFocusedFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiFocusedFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiFocusedFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiFocusedFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiFocusedFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiFocusedFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_ value) {
    const ImGuiHoveredFlags_ neg_one = (ImGuiHoveredFlags_) ((ImGuiHoveredFlags_) 0 - (ImGuiHoveredFlags_) 1), const_zero = (ImGuiHoveredFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiHoveredFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiHoveredFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiHoveredFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiHoveredFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiHoveredFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiHoveredFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_ value) {
    const ImGuiDragDropFlags_ neg_one = (ImGuiDragDropFlags_) ((ImGuiDragDropFlags_) 0 - (ImGuiDragDropFlags_) 1), const_zero = (ImGuiDragDropFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiDragDropFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiDragDropFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDragDropFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiDragDropFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDragDropFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiDragDropFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_ value) {
    const ImGuiDir_ neg_one = (ImGuiDir_) ((ImGuiDir_) 0 - (ImGuiDir_) 1), const_zero = (ImGuiDir_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiDir_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiDir_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDir_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiDir_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDir_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiDir_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ value) {
    const ImGuiMouseCursor_ neg_one = (ImGuiMouseCursor_) ((ImGuiMouseCursor_) 0 - (ImGuiMouseCursor_) 1), const_zero = (ImGuiMouseCursor_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiMouseCursor_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiMouseCursor_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiMouseCursor_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ value) {
    const ImGuiCol_ neg_one = (ImGuiCol_) ((ImGuiCol_) 0 - (ImGuiCol_) 1), const_zero = (ImGuiCol_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiCol_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiCol_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiCol_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiCol_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ value) {
    const ImGuiInputTextFlags_ neg_one = (ImGuiInputTextFlags_) ((ImGuiInputTextFlags_) 0 - (ImGuiInputTextFlags_) 1), const_zero = (ImGuiInputTextFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiInputTextFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiInputTextFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiInputTextFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_ value) {
    const ImGuiConfigFlags_ neg_one = (ImGuiConfigFlags_) ((ImGuiConfigFlags_) 0 - (ImGuiConfigFlags_) 1), const_zero = (ImGuiConfigFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiConfigFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiConfigFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiConfigFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiConfigFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_ value) {
    const ImGuiBackendFlags_ neg_one = (ImGuiBackendFlags_) ((ImGuiBackendFlags_) 0 - (ImGuiBackendFlags_) 1), const_zero = (ImGuiBackendFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiBackendFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiBackendFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiBackendFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiBackendFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiBackendFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiBackendFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags(ImGuiWindowFlags value) {
    const ImGuiWindowFlags neg_one = (ImGuiWindowFlags) ((ImGuiWindowFlags) 0 - (ImGuiWindowFlags) 1), const_zero = (ImGuiWindowFlags) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiWindowFlags) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiWindowFlags) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiWindowFlags),
                                     little, !is_unsigned);
    }
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_float__const__(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_float__const__, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol(ImGuiCol value) {
    const ImGuiCol neg_one = (ImGuiCol) ((ImGuiCol) 0 - (ImGuiCol) 1), const_zero = (ImGuiCol) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiCol) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiCol) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiCol) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiCol),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags(ImGuiConfigFlags value) {
    const ImGuiConfigFlags neg_one = (ImGuiConfigFlags) ((ImGuiConfigFlags) 0 - (ImGuiConfigFlags) 1), const_zero = (ImGuiConfigFlags) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiConfigFlags) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiConfigFlags) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiConfigFlags),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags(ImGuiBackendFlags value) {
    const ImGuiBackendFlags neg_one = (ImGuiBackendFlags) ((ImGuiBackendFlags) 0 - (ImGuiBackendFlags) 1), const_zero = (ImGuiBackendFlags) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiBackendFlags) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiBackendFlags) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiBackendFlags) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiBackendFlags) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiBackendFlags) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiBackendFlags),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiID(ImGuiID value) {
    const ImGuiID neg_one = (ImGuiID) ((ImGuiID) 0 - (ImGuiID) 1), const_zero = (ImGuiID) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiID) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiID) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiID) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiID) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiID) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiID),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir(ImGuiDir value) {
    const ImGuiDir neg_one = (ImGuiDir) ((ImGuiDir) 0 - (ImGuiDir) 1), const_zero = (ImGuiDir) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiDir) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiDir) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDir) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiDir) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDir) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiDir),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor(ImGuiMouseCursor value) {
    const ImGuiMouseCursor neg_one = (ImGuiMouseCursor) ((ImGuiMouseCursor) 0 - (ImGuiMouseCursor) 1), const_zero = (ImGuiMouseCursor) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiMouseCursor) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiMouseCursor) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiMouseCursor),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar(ImGuiStyleVar value) {
    const ImGuiStyleVar neg_one = (ImGuiStyleVar) ((ImGuiStyleVar) 0 - (ImGuiStyleVar) 1), const_zero = (ImGuiStyleVar) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiStyleVar) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiStyleVar) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiStyleVar) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiStyleVar),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImU32(ImU32 value) {
    const ImU32 neg_one = (ImU32) ((ImU32) 0 - (ImU32) 1), const_zero = (ImU32) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImU32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImU32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImU32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImU32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImU32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImU32),
                                     little, !is_unsigned);
    }
}

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
  static CYTHON_INLINE ImU32 __Pyx_PyInt_As_ImU32(PyObject *x) {
    const ImU32 neg_one = (ImU32) ((ImU32) 0 - (ImU32) 1), const_zero = (ImU32) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImU32) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImU32, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImU32) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImU32) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImU32, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImU32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) >= 2 * PyLong_SHIFT) {
                            return (ImU32) (((((ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImU32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) >= 3 * PyLong_SHIFT) {
                            return (ImU32) (((((((ImU32)digits[2]) << PyLong_SHIFT) | (ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImU32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) >= 4 * PyLong_SHIFT) {
                            return (ImU32) (((((((((ImU32)digits[3]) << PyLong_SHIFT) | (ImU32)digits[2]) << PyLong_SHIFT) | (ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImU32) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImU32) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImU32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImU32) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImU32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImU32) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImU32, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImU32,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImU32) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) - 1 > 2 * PyLong_SHIFT) {
                            return (ImU32) (((ImU32)-1)*(((((ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImU32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) - 1 > 2 * PyLong_SHIFT) {
                            return (ImU32) ((((((ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImU32) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) - 1 > 3 * PyLong_SHIFT) {
                            return (ImU32) (((ImU32)-1)*(((((((ImU32)digits[2]) << PyLong_SHIFT) | (ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImU32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) - 1 > 3 * PyLong_SHIFT) {
                            return (ImU32) ((((((((ImU32)digits[2]) << PyLong_SHIFT) | (ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImU32) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) - 1 > 4 * PyLong_SHIFT) {
                            return (ImU32) (((ImU32)-1)*(((((((((ImU32)digits[3]) << PyLong_SHIFT) | (ImU32)digits[2]) << PyLong_SHIFT) | (ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImU32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImU32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImU32) - 1 > 4 * PyLong_SHIFT) {
                            return (ImU32) ((((((((((ImU32)digits[3]) << PyLong_SHIFT) | (ImU32)digits[2]) << PyLong_SHIFT) | (ImU32)digits[1]) << PyLong_SHIFT) | (ImU32)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImU32) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImU32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImU32) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImU32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImU32 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImU32) -1;
        }
    } else {
        ImU32 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImU32) -1;
        val = __Pyx_PyInt_As_ImU32(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImU32");
    return (ImU32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImU32");
    return (ImU32) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiWindowFlags __Pyx_PyInt_As_ImGuiWindowFlags(PyObject *x) {
    const ImGuiWindowFlags neg_one = (ImGuiWindowFlags) ((ImGuiWindowFlags) 0 - (ImGuiWindowFlags) 1), const_zero = (ImGuiWindowFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiWindowFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiWindowFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiWindowFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiWindowFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiWindowFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiWindowFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiWindowFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiWindowFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiWindowFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiWindowFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiWindowFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiWindowFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiWindowFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiWindowFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiWindowFlags) -1;
        }
    } else {
        ImGuiWindowFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiWindowFlags) -1;
        val = __Pyx_PyInt_As_ImGuiWindowFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiWindowFlags");
    return (ImGuiWindowFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiWindowFlags");
    return (ImGuiWindowFlags) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiCol __Pyx_PyInt_As_ImGuiCol(PyObject *x) {
    const ImGuiCol neg_one = (ImGuiCol) ((ImGuiCol) 0 - (ImGuiCol) 1), const_zero = (ImGuiCol) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiCol) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiCol) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiCol) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiCol, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiCol) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) >= 2 * PyLong_SHIFT) {
                            return (ImGuiCol) (((((ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiCol) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) >= 3 * PyLong_SHIFT) {
                            return (ImGuiCol) (((((((ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiCol) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) >= 4 * PyLong_SHIFT) {
                            return (ImGuiCol) (((((((((ImGuiCol)digits[3]) << PyLong_SHIFT) | (ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiCol) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiCol) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiCol) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiCol) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiCol, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiCol,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiCol) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiCol) (((ImGuiCol)-1)*(((((ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiCol) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiCol) ((((((ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiCol) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiCol) (((ImGuiCol)-1)*(((((((ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiCol) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiCol) ((((((((ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiCol) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiCol) (((ImGuiCol)-1)*(((((((((ImGuiCol)digits[3]) << PyLong_SHIFT) | (ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiCol) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiCol) ((((((((((ImGuiCol)digits[3]) << PyLong_SHIFT) | (ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiCol) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiCol) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiCol val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiCol) -1;
        }
    } else {
        ImGuiCol val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiCol) -1;
        val = __Pyx_PyInt_As_ImGuiCol(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiCol");
    return (ImGuiCol) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiCol");
    return (ImGuiCol) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiConfigFlags __Pyx_PyInt_As_ImGuiConfigFlags(PyObject *x) {
    const ImGuiConfigFlags neg_one = (ImGuiConfigFlags) ((ImGuiConfigFlags) 0 - (ImGuiConfigFlags) 1), const_zero = (ImGuiConfigFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiConfigFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiConfigFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiConfigFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiConfigFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((((ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiConfigFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((((((ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiConfigFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((((((((ImGuiConfigFlags)digits[3]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiConfigFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiConfigFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiConfigFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((ImGuiConfigFlags)-1)*(((((ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiConfigFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) ((((((ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiConfigFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((ImGuiConfigFlags)-1)*(((((((ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiConfigFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) ((((((((ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiConfigFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((ImGuiConfigFlags)-1)*(((((((((ImGuiConfigFlags)digits[3]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiConfigFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) ((((((((((ImGuiConfigFlags)digits[3]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiConfigFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiConfigFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiConfigFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiConfigFlags) -1;
        }
    } else {
        ImGuiConfigFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiConfigFlags) -1;
        val = __Pyx_PyInt_As_ImGuiConfigFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiConfigFlags");
    return (ImGuiConfigFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiConfigFlags");
    return (ImGuiConfigFlags) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiBackendFlags __Pyx_PyInt_As_ImGuiBackendFlags(PyObject *x) {
    const ImGuiBackendFlags neg_one = (ImGuiBackendFlags) ((ImGuiBackendFlags) 0 - (ImGuiBackendFlags) 1), const_zero = (ImGuiBackendFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiBackendFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiBackendFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiBackendFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiBackendFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) (((((ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiBackendFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) (((((((ImGuiBackendFlags)digits[2]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiBackendFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) (((((((((ImGuiBackendFlags)digits[3]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[2]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiBackendFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiBackendFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiBackendFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiBackendFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiBackendFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiBackendFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiBackendFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) (((ImGuiBackendFlags)-1)*(((((ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiBackendFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) ((((((ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiBackendFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) (((ImGuiBackendFlags)-1)*(((((((ImGuiBackendFlags)digits[2]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiBackendFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) ((((((((ImGuiBackendFlags)digits[2]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiBackendFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) (((ImGuiBackendFlags)-1)*(((((((((ImGuiBackendFlags)digits[3]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[2]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiBackendFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiBackendFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiBackendFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiBackendFlags) ((((((((((ImGuiBackendFlags)digits[3]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[2]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[1]) << PyLong_SHIFT) | (ImGuiBackendFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiBackendFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiBackendFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiBackendFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiBackendFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiBackendFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiBackendFlags) -1;
        }
    } else {
        ImGuiBackendFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiBackendFlags) -1;
        val = __Pyx_PyInt_As_ImGuiBackendFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiBackendFlags");
    return (ImGuiBackendFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiBackendFlags");
    return (ImGuiBackendFlags) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImWchar __Pyx_PyInt_As_ImWchar(PyObject *x) {
    const ImWchar neg_one = (ImWchar) ((ImWchar) 0 - (ImWchar) 1), const_zero = (ImWchar) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImWchar) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImWchar, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImWchar) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImWchar) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImWchar, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImWchar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) >= 2 * PyLong_SHIFT) {
                            return (ImWchar) (((((ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImWchar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) >= 3 * PyLong_SHIFT) {
                            return (ImWchar) (((((((ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImWchar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) >= 4 * PyLong_SHIFT) {
                            return (ImWchar) (((((((((ImWchar)digits[3]) << PyLong_SHIFT) | (ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImWchar) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImWchar) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImWchar) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImWchar) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImWchar, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImWchar,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImWchar) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImWchar) (((ImWchar)-1)*(((((ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImWchar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImWchar) ((((((ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImWchar) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImWchar) (((ImWchar)-1)*(((((((ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImWchar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImWchar) ((((((((ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImWchar) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImWchar) (((ImWchar)-1)*(((((((((ImWchar)digits[3]) << PyLong_SHIFT) | (ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImWchar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImWchar) ((((((((((ImWchar)digits[3]) << PyLong_SHIFT) | (ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImWchar) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImWchar) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImWchar val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImWchar) -1;
        }
    } else {
        ImWchar val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImWchar) -1;
        val = __Pyx_PyInt_As_ImWchar(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImWchar");
    return (ImWchar) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImWchar");
    return (ImWchar) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiID __Pyx_PyInt_As_ImGuiID(PyObject *x) {
    const ImGuiID neg_one = (ImGuiID) ((ImGuiID) 0 - (ImGuiID) 1), const_zero = (ImGuiID) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiID) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiID, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiID) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiID) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiID, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) >= 2 * PyLong_SHIFT) {
                            return (ImGuiID) (((((ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) >= 3 * PyLong_SHIFT) {
                            return (ImGuiID) (((((((ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) >= 4 * PyLong_SHIFT) {
                            return (ImGuiID) (((((((((ImGuiID)digits[3]) << PyLong_SHIFT) | (ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiID) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiID) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiID) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiID) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiID, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiID,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiID) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiID) (((ImGuiID)-1)*(((((ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiID) ((((((ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiID) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiID) (((ImGuiID)-1)*(((((((ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiID) ((((((((ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiID) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiID) (((ImGuiID)-1)*(((((((((ImGuiID)digits[3]) << PyLong_SHIFT) | (ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiID) ((((((((((ImGuiID)digits[3]) << PyLong_SHIFT) | (ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiID) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiID) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiID val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiID) -1;
        }
    } else {
        ImGuiID val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiID) -1;
        val = __Pyx_PyInt_As_ImGuiID(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiID");
    return (ImGuiID) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiID");
    return (ImGuiID) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiCond __Pyx_PyInt_As_ImGuiCond(PyObject *x) {
    const ImGuiCond neg_one = (ImGuiCond) ((ImGuiCond) 0 - (ImGuiCond) 1), const_zero = (ImGuiCond) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiCond) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiCond, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiCond) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiCond) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiCond, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiCond) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) >= 2 * PyLong_SHIFT) {
                            return (ImGuiCond) (((((ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiCond) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) >= 3 * PyLong_SHIFT) {
                            return (ImGuiCond) (((((((ImGuiCond)digits[2]) << PyLong_SHIFT) | (ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiCond) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) >= 4 * PyLong_SHIFT) {
                            return (ImGuiCond) (((((((((ImGuiCond)digits[3]) << PyLong_SHIFT) | (ImGuiCond)digits[2]) << PyLong_SHIFT) | (ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiCond) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiCond) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCond, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiCond) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCond, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiCond) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiCond, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiCond,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiCond) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiCond) (((ImGuiCond)-1)*(((((ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiCond) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiCond) ((((((ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiCond) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiCond) (((ImGuiCond)-1)*(((((((ImGuiCond)digits[2]) << PyLong_SHIFT) | (ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiCond) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiCond) ((((((((ImGuiCond)digits[2]) << PyLong_SHIFT) | (ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiCond) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiCond) (((ImGuiCond)-1)*(((((((((ImGuiCond)digits[3]) << PyLong_SHIFT) | (ImGuiCond)digits[2]) << PyLong_SHIFT) | (ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiCond) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCond, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCond) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiCond) ((((((((((ImGuiCond)digits[3]) << PyLong_SHIFT) | (ImGuiCond)digits[2]) << PyLong_SHIFT) | (ImGuiCond)digits[1]) << PyLong_SHIFT) | (ImGuiCond)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiCond) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCond, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiCond) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCond, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiCond val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiCond) -1;
        }
    } else {
        ImGuiCond val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiCond) -1;
        val = __Pyx_PyInt_As_ImGuiCond(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiCond");
    return (ImGuiCond) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiCond");
    return (ImGuiCond) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiTreeNodeFlags __Pyx_PyInt_As_ImGuiTreeNodeFlags(PyObject *x) {
    const ImGuiTreeNodeFlags neg_one = (ImGuiTreeNodeFlags) ((ImGuiTreeNodeFlags) 0 - (ImGuiTreeNodeFlags) 1), const_zero = (ImGuiTreeNodeFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiTreeNodeFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiTreeNodeFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiTreeNodeFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((((ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((((((ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((((((((ImGuiTreeNodeFlags)digits[3]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiTreeNodeFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiTreeNodeFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiTreeNodeFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiTreeNodeFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((ImGuiTreeNodeFlags)-1)*(((((ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) ((((((ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((ImGuiTreeNodeFlags)-1)*(((((((ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) ((((((((ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((ImGuiTreeNodeFlags)-1)*(((((((((ImGuiTreeNodeFlags)digits[3]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) ((((((((((ImGuiTreeNodeFlags)digits[3]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiTreeNodeFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiTreeNodeFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiTreeNodeFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiTreeNodeFlags) -1;
        }
    } else {
        ImGuiTreeNodeFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiTreeNodeFlags) -1;
        val = __Pyx_PyInt_As_ImGuiTreeNodeFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiTreeNodeFlags");
    return (ImGuiTreeNodeFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiTreeNodeFlags");
    return (ImGuiTreeNodeFlags) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiDir __Pyx_PyInt_As_ImGuiDir(PyObject *x) {
    const ImGuiDir neg_one = (ImGuiDir) ((ImGuiDir) 0 - (ImGuiDir) 1), const_zero = (ImGuiDir) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiDir) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiDir, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiDir) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiDir) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiDir, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiDir) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) >= 2 * PyLong_SHIFT) {
                            return (ImGuiDir) (((((ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiDir) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) >= 3 * PyLong_SHIFT) {
                            return (ImGuiDir) (((((((ImGuiDir)digits[2]) << PyLong_SHIFT) | (ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiDir) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) >= 4 * PyLong_SHIFT) {
                            return (ImGuiDir) (((((((((ImGuiDir)digits[3]) << PyLong_SHIFT) | (ImGuiDir)digits[2]) << PyLong_SHIFT) | (ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiDir) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiDir) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDir, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiDir) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDir, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiDir) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiDir, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiDir,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiDir) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiDir) (((ImGuiDir)-1)*(((((ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiDir) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiDir) ((((((ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiDir) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiDir) (((ImGuiDir)-1)*(((((((ImGuiDir)digits[2]) << PyLong_SHIFT) | (ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiDir) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiDir) ((((((((ImGuiDir)digits[2]) << PyLong_SHIFT) | (ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiDir) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiDir) (((ImGuiDir)-1)*(((((((((ImGuiDir)digits[3]) << PyLong_SHIFT) | (ImGuiDir)digits[2]) << PyLong_SHIFT) | (ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiDir) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDir, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDir) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiDir) ((((((((((ImGuiDir)digits[3]) << PyLong_SHIFT) | (ImGuiDir)digits[2]) << PyLong_SHIFT) | (ImGuiDir)digits[1]) << PyLong_SHIFT) | (ImGuiDir)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiDir) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDir, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiDir) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDir, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiDir val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiDir) -1;
        }
    } else {
        ImGuiDir val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiDir) -1;
        val = __Pyx_PyInt_As_ImGuiDir(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiDir");
    return (ImGuiDir) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiDir");
    return (ImGuiDir) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiInputTextFlags __Pyx_PyInt_As_ImGuiInputTextFlags(PyObject *x) {
    const ImGuiInputTextFlags neg_one = (ImGuiInputTextFlags) ((ImGuiInputTextFlags) 0 - (ImGuiInputTextFlags) 1), const_zero = (ImGuiInputTextFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiInputTextFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiInputTextFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiInputTextFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiInputTextFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((((ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiInputTextFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((((((ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiInputTextFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((((((((ImGuiInputTextFlags)digits[3]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiInputTextFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiInputTextFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiInputTextFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiInputTextFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiInputTextFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((ImGuiInputTextFlags)-1)*(((((ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiInputTextFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) ((((((ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiInputTextFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((ImGuiInputTextFlags)-1)*(((((((ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiInputTextFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) ((((((((ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiInputTextFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((ImGuiInputTextFlags)-1)*(((((((((ImGuiInputTextFlags)digits[3]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiInputTextFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) ((((((((((ImGuiInputTextFlags)digits[3]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiInputTextFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiInputTextFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiInputTextFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiInputTextFlags) -1;
        }
    } else {
        ImGuiInputTextFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiInputTextFlags) -1;
        val = __Pyx_PyInt_As_ImGuiInputTextFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiInputTextFlags");
    return (ImGuiInputTextFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiInputTextFlags");
    return (ImGuiInputTextFlags) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiHoveredFlags __Pyx_PyInt_As_ImGuiHoveredFlags(PyObject *x) {
    const ImGuiHoveredFlags neg_one = (ImGuiHoveredFlags) ((ImGuiHoveredFlags) 0 - (ImGuiHoveredFlags) 1), const_zero = (ImGuiHoveredFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiHoveredFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiHoveredFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiHoveredFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiHoveredFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) (((((ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiHoveredFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) (((((((ImGuiHoveredFlags)digits[2]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiHoveredFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) (((((((((ImGuiHoveredFlags)digits[3]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[2]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiHoveredFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiHoveredFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiHoveredFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiHoveredFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiHoveredFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiHoveredFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiHoveredFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) (((ImGuiHoveredFlags)-1)*(((((ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiHoveredFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) ((((((ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiHoveredFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) (((ImGuiHoveredFlags)-1)*(((((((ImGuiHoveredFlags)digits[2]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiHoveredFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) ((((((((ImGuiHoveredFlags)digits[2]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiHoveredFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) (((ImGuiHoveredFlags)-1)*(((((((((ImGuiHoveredFlags)digits[3]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[2]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiHoveredFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiHoveredFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiHoveredFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiHoveredFlags) ((((((((((ImGuiHoveredFlags)digits[3]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[2]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[1]) << PyLong_SHIFT) | (ImGuiHoveredFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiHoveredFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiHoveredFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiHoveredFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiHoveredFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiHoveredFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiHoveredFlags) -1;
        }
    } else {
        ImGuiHoveredFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiHoveredFlags) -1;
        val = __Pyx_PyInt_As_ImGuiHoveredFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiHoveredFlags");
    return (ImGuiHoveredFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiHoveredFlags");
    return (ImGuiHoveredFlags) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiMouseCursor __Pyx_PyInt_As_ImGuiMouseCursor(PyObject *x) {
    const ImGuiMouseCursor neg_one = (ImGuiMouseCursor) ((ImGuiMouseCursor) 0 - (ImGuiMouseCursor) 1), const_zero = (ImGuiMouseCursor) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiMouseCursor) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiMouseCursor) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiMouseCursor) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiMouseCursor) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) >= 2 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((((ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiMouseCursor) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) >= 3 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((((((ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiMouseCursor) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) >= 4 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((((((((ImGuiMouseCursor)digits[3]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiMouseCursor) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiMouseCursor) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiMouseCursor) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((ImGuiMouseCursor)-1)*(((((ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiMouseCursor) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) ((((((ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiMouseCursor) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((ImGuiMouseCursor)-1)*(((((((ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiMouseCursor) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) ((((((((ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiMouseCursor) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((ImGuiMouseCursor)-1)*(((((((((ImGuiMouseCursor)digits[3]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiMouseCursor) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) ((((((((((ImGuiMouseCursor)digits[3]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiMouseCursor) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiMouseCursor) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiMouseCursor val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiMouseCursor) -1;
        }
    } else {
        ImGuiMouseCursor val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiMouseCursor) -1;
        val = __Pyx_PyInt_As_ImGuiMouseCursor(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiMouseCursor");
    return (ImGuiMouseCursor) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiMouseCursor");
    return (ImGuiMouseCursor) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiStyleVar __Pyx_PyInt_As_ImGuiStyleVar(PyObject *x) {
    const ImGuiStyleVar neg_one = (ImGuiStyleVar) ((ImGuiStyleVar) 0 - (ImGuiStyleVar) 1), const_zero = (ImGuiStyleVar) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiStyleVar) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiStyleVar) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiStyleVar) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiStyleVar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) >= 2 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((((ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiStyleVar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) >= 3 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((((((ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiStyleVar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) >= 4 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((((((((ImGuiStyleVar)digits[3]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiStyleVar) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiStyleVar) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiStyleVar) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiStyleVar) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiStyleVar,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiStyleVar) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((ImGuiStyleVar)-1)*(((((ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiStyleVar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) ((((((ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiStyleVar) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((ImGuiStyleVar)-1)*(((((((ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiStyleVar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) ((((((((ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiStyleVar) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((ImGuiStyleVar)-1)*(((((((((ImGuiStyleVar)digits[3]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiStyleVar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) ((((((((((ImGuiStyleVar)digits[3]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiStyleVar) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiStyleVar) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiStyleVar val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiStyleVar) -1;
        }
    } else {
        ImGuiStyleVar val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiStyleVar) -1;
        val = __Pyx_PyInt_As_ImGuiStyleVar(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiStyleVar");
    return (ImGuiStyleVar) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiStyleVar");
    return (ImGuiStyleVar) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiDragDropFlags __Pyx_PyInt_As_ImGuiDragDropFlags(PyObject *x) {
    const ImGuiDragDropFlags neg_one = (ImGuiDragDropFlags) ((ImGuiDragDropFlags) 0 - (ImGuiDragDropFlags) 1), const_zero = (ImGuiDragDropFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiDragDropFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiDragDropFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiDragDropFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiDragDropFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) (((((ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiDragDropFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) (((((((ImGuiDragDropFlags)digits[2]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiDragDropFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) (((((((((ImGuiDragDropFlags)digits[3]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[2]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiDragDropFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiDragDropFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDragDropFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiDragDropFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDragDropFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiDragDropFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiDragDropFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) (((ImGuiDragDropFlags)-1)*(((((ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiDragDropFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) ((((((ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiDragDropFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) (((ImGuiDragDropFlags)-1)*(((((((ImGuiDragDropFlags)digits[2]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiDragDropFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) ((((((((ImGuiDragDropFlags)digits[2]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiDragDropFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) (((ImGuiDragDropFlags)-1)*(((((((((ImGuiDragDropFlags)digits[3]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[2]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiDragDropFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiDragDropFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiDragDropFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiDragDropFlags) ((((((((((ImGuiDragDropFlags)digits[3]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[2]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[1]) << PyLong_SHIFT) | (ImGuiDragDropFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiDragDropFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDragDropFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiDragDropFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiDragDropFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiDragDropFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiDragDropFlags) -1;
        }
    } else {
        ImGuiDragDropFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiDragDropFlags) -1;
        val = __Pyx_PyInt_As_ImGuiDragDropFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiDragDropFlags");
    return (ImGuiDragDropFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiDragDropFlags");
    return (ImGuiDragDropFlags) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE ImGuiColorEditFlags __Pyx_PyInt_As_ImGuiColorEditFlags(PyObject *x) {
    const ImGuiColorEditFlags neg_one = (ImGuiColorEditFlags) ((ImGuiColorEditFlags) 0 - (ImGuiColorEditFlags) 1), const_zero = (ImGuiColorEditFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiColorEditFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiColorEditFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiColorEditFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiColorEditFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) (((((ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiColorEditFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) (((((((ImGuiColorEditFlags)digits[2]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiColorEditFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) (((((((((ImGuiColorEditFlags)digits[3]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[2]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiColorEditFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiColorEditFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiColorEditFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiColorEditFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiColorEditFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiColorEditFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiColorEditFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) (((ImGuiColorEditFlags)-1)*(((((ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiColorEditFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) ((((((ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiColorEditFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) (((ImGuiColorEditFlags)-1)*(((((((ImGuiColorEditFlags)digits[2]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiColorEditFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) ((((((((ImGuiColorEditFlags)digits[2]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiColorEditFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) (((ImGuiColorEditFlags)-1)*(((((((((ImGuiColorEditFlags)digits[3]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[2]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiColorEditFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiColorEditFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiColorEditFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiColorEditFlags) ((((((((((ImGuiColorEditFlags)digits[3]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[2]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[1]) << PyLong_SHIFT) | (ImGuiColorEditFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiColorEditFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiColorEditFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiColorEditFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiColorEditFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiColorEditFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiColorEditFlags) -1;
        }
    } else {
        ImGuiColorEditFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiColorEditFlags) -1;
        val = __Pyx_PyInt_As_ImGuiColorEditFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiColorEditFlags");
    return (ImGuiColorEditFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiColorEditFlags");
    return (ImGuiColorEditFlags) -1;
}

/* ImportNumPyArray */
  static PyObject* __Pyx__ImportNumPyArray(void) {
    PyObject *numpy_module, *ndarray_object = NULL;
    numpy_module = __Pyx_Import(__pyx_n_s_numpy, NULL, 0);
    if (likely(numpy_module)) {
        ndarray_object = PyObject_GetAttrString(numpy_module, "ndarray");
        Py_DECREF(numpy_module);
    }
    if (unlikely(!ndarray_object)) {
        PyErr_Clear();
    }
    if (unlikely(!ndarray_object || !PyObject_TypeCheck(ndarray_object, &PyType_Type))) {
        Py_XDECREF(ndarray_object);
        Py_INCREF(Py_None);
        ndarray_object = Py_None;
    }
    return ndarray_object;
}
static CYTHON_INLINE PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void) {
    if (unlikely(!__pyx_numpy_ndarray)) {
        __pyx_numpy_ndarray = __Pyx__ImportNumPyArray();
    }
    Py_INCREF(__pyx_numpy_ndarray);
    return __pyx_numpy_ndarray;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
  #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
